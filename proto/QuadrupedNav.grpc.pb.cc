// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: QuadrupedNav.proto

#include "QuadrupedNav.pb.h"
#include "QuadrupedNav.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dtproto {
namespace quadruped {

static const char* Nav_method_names[] = {
  "/dtproto.quadruped.Nav/PublishOdomWithJointPos",
  "/dtproto.quadruped.Nav/PublishImu",
  "/dtproto.quadruped.Nav/SubscribeVisualOdom",
  "/dtproto.quadruped.Nav/SubscribeLocalGridmap",
  "/dtproto.quadruped.Nav/SubscribeSteppableArea",
  "/dtproto.quadruped.Nav/SubscribeRobotCommand",
};

std::unique_ptr< Nav::Stub> Nav::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Nav::Stub> stub(new Nav::Stub(channel, options));
  return stub;
}

Nav::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PublishOdomWithJointPos_(Nav_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PublishImu_(Nav_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeVisualOdom_(Nav_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SubscribeLocalGridmap_(Nav_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SubscribeSteppableArea_(Nav_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SubscribeRobotCommand_(Nav_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientReader< ::dtproto::quadruped::OdomWithJointPosTimeStamped>* Nav::Stub::PublishOdomWithJointPosRaw(::grpc::ClientContext* context, const ::dtproto::std_msgs::Request& request) {
  return ::grpc::internal::ClientReaderFactory< ::dtproto::quadruped::OdomWithJointPosTimeStamped>::Create(channel_.get(), rpcmethod_PublishOdomWithJointPos_, context, request);
}

void Nav::Stub::async::PublishOdomWithJointPos(::grpc::ClientContext* context, const ::dtproto::std_msgs::Request* request, ::grpc::ClientReadReactor< ::dtproto::quadruped::OdomWithJointPosTimeStamped>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::dtproto::quadruped::OdomWithJointPosTimeStamped>::Create(stub_->channel_.get(), stub_->rpcmethod_PublishOdomWithJointPos_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::dtproto::quadruped::OdomWithJointPosTimeStamped>* Nav::Stub::AsyncPublishOdomWithJointPosRaw(::grpc::ClientContext* context, const ::dtproto::std_msgs::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dtproto::quadruped::OdomWithJointPosTimeStamped>::Create(channel_.get(), cq, rpcmethod_PublishOdomWithJointPos_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::dtproto::quadruped::OdomWithJointPosTimeStamped>* Nav::Stub::PrepareAsyncPublishOdomWithJointPosRaw(::grpc::ClientContext* context, const ::dtproto::std_msgs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dtproto::quadruped::OdomWithJointPosTimeStamped>::Create(channel_.get(), cq, rpcmethod_PublishOdomWithJointPos_, context, request, false, nullptr);
}

::grpc::ClientReader< ::dtproto::sensor_msgs::ImuTimeStamped>* Nav::Stub::PublishImuRaw(::grpc::ClientContext* context, const ::dtproto::std_msgs::Request& request) {
  return ::grpc::internal::ClientReaderFactory< ::dtproto::sensor_msgs::ImuTimeStamped>::Create(channel_.get(), rpcmethod_PublishImu_, context, request);
}

void Nav::Stub::async::PublishImu(::grpc::ClientContext* context, const ::dtproto::std_msgs::Request* request, ::grpc::ClientReadReactor< ::dtproto::sensor_msgs::ImuTimeStamped>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::dtproto::sensor_msgs::ImuTimeStamped>::Create(stub_->channel_.get(), stub_->rpcmethod_PublishImu_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::dtproto::sensor_msgs::ImuTimeStamped>* Nav::Stub::AsyncPublishImuRaw(::grpc::ClientContext* context, const ::dtproto::std_msgs::Request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dtproto::sensor_msgs::ImuTimeStamped>::Create(channel_.get(), cq, rpcmethod_PublishImu_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::dtproto::sensor_msgs::ImuTimeStamped>* Nav::Stub::PrepareAsyncPublishImuRaw(::grpc::ClientContext* context, const ::dtproto::std_msgs::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dtproto::sensor_msgs::ImuTimeStamped>::Create(channel_.get(), cq, rpcmethod_PublishImu_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::dtproto::nav_msgs::OdomTimeStamped>* Nav::Stub::SubscribeVisualOdomRaw(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response) {
  return ::grpc::internal::ClientWriterFactory< ::dtproto::nav_msgs::OdomTimeStamped>::Create(channel_.get(), rpcmethod_SubscribeVisualOdom_, context, response);
}

void Nav::Stub::async::SubscribeVisualOdom(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response, ::grpc::ClientWriteReactor< ::dtproto::nav_msgs::OdomTimeStamped>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::dtproto::nav_msgs::OdomTimeStamped>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeVisualOdom_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::dtproto::nav_msgs::OdomTimeStamped>* Nav::Stub::AsyncSubscribeVisualOdomRaw(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::dtproto::nav_msgs::OdomTimeStamped>::Create(channel_.get(), cq, rpcmethod_SubscribeVisualOdom_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::dtproto::nav_msgs::OdomTimeStamped>* Nav::Stub::PrepareAsyncSubscribeVisualOdomRaw(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::dtproto::nav_msgs::OdomTimeStamped>::Create(channel_.get(), cq, rpcmethod_SubscribeVisualOdom_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::dtproto::nav_msgs::GridTimeStamped>* Nav::Stub::SubscribeLocalGridmapRaw(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response) {
  return ::grpc::internal::ClientWriterFactory< ::dtproto::nav_msgs::GridTimeStamped>::Create(channel_.get(), rpcmethod_SubscribeLocalGridmap_, context, response);
}

void Nav::Stub::async::SubscribeLocalGridmap(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response, ::grpc::ClientWriteReactor< ::dtproto::nav_msgs::GridTimeStamped>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::dtproto::nav_msgs::GridTimeStamped>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeLocalGridmap_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::dtproto::nav_msgs::GridTimeStamped>* Nav::Stub::AsyncSubscribeLocalGridmapRaw(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::dtproto::nav_msgs::GridTimeStamped>::Create(channel_.get(), cq, rpcmethod_SubscribeLocalGridmap_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::dtproto::nav_msgs::GridTimeStamped>* Nav::Stub::PrepareAsyncSubscribeLocalGridmapRaw(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::dtproto::nav_msgs::GridTimeStamped>::Create(channel_.get(), cq, rpcmethod_SubscribeLocalGridmap_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::dtproto::nav_msgs::SteppableAreaTimeStamped>* Nav::Stub::SubscribeSteppableAreaRaw(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response) {
  return ::grpc::internal::ClientWriterFactory< ::dtproto::nav_msgs::SteppableAreaTimeStamped>::Create(channel_.get(), rpcmethod_SubscribeSteppableArea_, context, response);
}

void Nav::Stub::async::SubscribeSteppableArea(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response, ::grpc::ClientWriteReactor< ::dtproto::nav_msgs::SteppableAreaTimeStamped>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::dtproto::nav_msgs::SteppableAreaTimeStamped>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeSteppableArea_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::dtproto::nav_msgs::SteppableAreaTimeStamped>* Nav::Stub::AsyncSubscribeSteppableAreaRaw(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::dtproto::nav_msgs::SteppableAreaTimeStamped>::Create(channel_.get(), cq, rpcmethod_SubscribeSteppableArea_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::dtproto::nav_msgs::SteppableAreaTimeStamped>* Nav::Stub::PrepareAsyncSubscribeSteppableAreaRaw(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::dtproto::nav_msgs::SteppableAreaTimeStamped>::Create(channel_.get(), cq, rpcmethod_SubscribeSteppableArea_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::dtproto::robot_msgs::RobotCommandTimeStamped>* Nav::Stub::SubscribeRobotCommandRaw(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response) {
  return ::grpc::internal::ClientWriterFactory< ::dtproto::robot_msgs::RobotCommandTimeStamped>::Create(channel_.get(), rpcmethod_SubscribeRobotCommand_, context, response);
}

void Nav::Stub::async::SubscribeRobotCommand(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response, ::grpc::ClientWriteReactor< ::dtproto::robot_msgs::RobotCommandTimeStamped>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::dtproto::robot_msgs::RobotCommandTimeStamped>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeRobotCommand_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::dtproto::robot_msgs::RobotCommandTimeStamped>* Nav::Stub::AsyncSubscribeRobotCommandRaw(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::dtproto::robot_msgs::RobotCommandTimeStamped>::Create(channel_.get(), cq, rpcmethod_SubscribeRobotCommand_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::dtproto::robot_msgs::RobotCommandTimeStamped>* Nav::Stub::PrepareAsyncSubscribeRobotCommandRaw(::grpc::ClientContext* context, ::dtproto::std_msgs::Response* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::dtproto::robot_msgs::RobotCommandTimeStamped>::Create(channel_.get(), cq, rpcmethod_SubscribeRobotCommand_, context, response, false, nullptr);
}

Nav::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nav_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Nav::Service, ::dtproto::std_msgs::Request, ::dtproto::quadruped::OdomWithJointPosTimeStamped>(
          [](Nav::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dtproto::std_msgs::Request* req,
             ::grpc::ServerWriter<::dtproto::quadruped::OdomWithJointPosTimeStamped>* writer) {
               return service->PublishOdomWithJointPos(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nav_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Nav::Service, ::dtproto::std_msgs::Request, ::dtproto::sensor_msgs::ImuTimeStamped>(
          [](Nav::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dtproto::std_msgs::Request* req,
             ::grpc::ServerWriter<::dtproto::sensor_msgs::ImuTimeStamped>* writer) {
               return service->PublishImu(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nav_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Nav::Service, ::dtproto::nav_msgs::OdomTimeStamped, ::dtproto::std_msgs::Response>(
          [](Nav::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::dtproto::nav_msgs::OdomTimeStamped>* reader,
             ::dtproto::std_msgs::Response* resp) {
               return service->SubscribeVisualOdom(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nav_method_names[3],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Nav::Service, ::dtproto::nav_msgs::GridTimeStamped, ::dtproto::std_msgs::Response>(
          [](Nav::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::dtproto::nav_msgs::GridTimeStamped>* reader,
             ::dtproto::std_msgs::Response* resp) {
               return service->SubscribeLocalGridmap(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nav_method_names[4],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Nav::Service, ::dtproto::nav_msgs::SteppableAreaTimeStamped, ::dtproto::std_msgs::Response>(
          [](Nav::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::dtproto::nav_msgs::SteppableAreaTimeStamped>* reader,
             ::dtproto::std_msgs::Response* resp) {
               return service->SubscribeSteppableArea(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Nav_method_names[5],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Nav::Service, ::dtproto::robot_msgs::RobotCommandTimeStamped, ::dtproto::std_msgs::Response>(
          [](Nav::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::dtproto::robot_msgs::RobotCommandTimeStamped>* reader,
             ::dtproto::std_msgs::Response* resp) {
               return service->SubscribeRobotCommand(ctx, reader, resp);
             }, this)));
}

Nav::Service::~Service() {
}

::grpc::Status Nav::Service::PublishOdomWithJointPos(::grpc::ServerContext* context, const ::dtproto::std_msgs::Request* request, ::grpc::ServerWriter< ::dtproto::quadruped::OdomWithJointPosTimeStamped>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nav::Service::PublishImu(::grpc::ServerContext* context, const ::dtproto::std_msgs::Request* request, ::grpc::ServerWriter< ::dtproto::sensor_msgs::ImuTimeStamped>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nav::Service::SubscribeVisualOdom(::grpc::ServerContext* context, ::grpc::ServerReader< ::dtproto::nav_msgs::OdomTimeStamped>* reader, ::dtproto::std_msgs::Response* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nav::Service::SubscribeLocalGridmap(::grpc::ServerContext* context, ::grpc::ServerReader< ::dtproto::nav_msgs::GridTimeStamped>* reader, ::dtproto::std_msgs::Response* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nav::Service::SubscribeSteppableArea(::grpc::ServerContext* context, ::grpc::ServerReader< ::dtproto::nav_msgs::SteppableAreaTimeStamped>* reader, ::dtproto::std_msgs::Response* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Nav::Service::SubscribeRobotCommand(::grpc::ServerContext* context, ::grpc::ServerReader< ::dtproto::robot_msgs::RobotCommandTimeStamped>* reader, ::dtproto::std_msgs::Response* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dtproto
}  // namespace quadruped

