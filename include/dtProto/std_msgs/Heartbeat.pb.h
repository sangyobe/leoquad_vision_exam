// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtProto/std_msgs/Heartbeat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "dtProto/std_msgs/Header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto;
namespace dtproto {
namespace std_msgs {
class Heartbeat;
struct HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class LatencyCheckPayload;
struct LatencyCheckPayloadDefaultTypeInternal;
extern LatencyCheckPayloadDefaultTypeInternal _LatencyCheckPayload_default_instance_;
class LatencyCheckRequest;
struct LatencyCheckRequestDefaultTypeInternal;
extern LatencyCheckRequestDefaultTypeInternal _LatencyCheckRequest_default_instance_;
}  // namespace std_msgs
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> ::dtproto::std_msgs::Heartbeat* Arena::CreateMaybeMessage<::dtproto::std_msgs::Heartbeat>(Arena*);
template<> ::dtproto::std_msgs::LatencyCheckPayload* Arena::CreateMaybeMessage<::dtproto::std_msgs::LatencyCheckPayload>(Arena*);
template<> ::dtproto::std_msgs::LatencyCheckRequest* Arena::CreateMaybeMessage<::dtproto::std_msgs::LatencyCheckRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dtproto {
namespace std_msgs {

// ===================================================================

class Heartbeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.std_msgs.Heartbeat) */ {
 public:
  inline Heartbeat() : Heartbeat(nullptr) {}
  ~Heartbeat() override;
  explicit PROTOBUF_CONSTEXPR Heartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heartbeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Heartbeat& from) {
    Heartbeat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heartbeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.std_msgs.Heartbeat";
  }
  protected:
  explicit Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kTimeStampFieldNumber = 2,
    kSeqFieldNumber = 1,
  };
  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .google.protobuf.Timestamp time_stamp = 2;
  bool has_time_stamp() const;
  private:
  bool _internal_has_time_stamp() const;
  public:
  void clear_time_stamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_stamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_stamp();
  void set_allocated_time_stamp(::PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_stamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_stamp();
  public:
  void unsafe_arena_set_allocated_time_stamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_stamp();

  // uint32 seq = 1;
  void clear_seq();
  uint32_t seq() const;
  void set_seq(uint32_t value);
  private:
  uint32_t _internal_seq() const;
  void _internal_set_seq(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.std_msgs.Heartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp_;
    uint32_t seq_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto;
};
// -------------------------------------------------------------------

class LatencyCheckRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.std_msgs.LatencyCheckRequest) */ {
 public:
  inline LatencyCheckRequest() : LatencyCheckRequest(nullptr) {}
  ~LatencyCheckRequest() override;
  explicit PROTOBUF_CONSTEXPR LatencyCheckRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatencyCheckRequest(const LatencyCheckRequest& from);
  LatencyCheckRequest(LatencyCheckRequest&& from) noexcept
    : LatencyCheckRequest() {
    *this = ::std::move(from);
  }

  inline LatencyCheckRequest& operator=(const LatencyCheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyCheckRequest& operator=(LatencyCheckRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatencyCheckRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatencyCheckRequest* internal_default_instance() {
    return reinterpret_cast<const LatencyCheckRequest*>(
               &_LatencyCheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LatencyCheckRequest& a, LatencyCheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyCheckRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyCheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatencyCheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LatencyCheckRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatencyCheckRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LatencyCheckRequest& from) {
    LatencyCheckRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyCheckRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.std_msgs.LatencyCheckRequest";
  }
  protected:
  explicit LatencyCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunsFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // int32 runs = 1;
  void clear_runs();
  int32_t runs() const;
  void set_runs(int32_t value);
  private:
  int32_t _internal_runs() const;
  void _internal_set_runs(int32_t value);
  public:

  // int32 size = 2;
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.std_msgs.LatencyCheckRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t runs_;
    int32_t size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto;
};
// -------------------------------------------------------------------

class LatencyCheckPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.std_msgs.LatencyCheckPayload) */ {
 public:
  inline LatencyCheckPayload() : LatencyCheckPayload(nullptr) {}
  ~LatencyCheckPayload() override;
  explicit PROTOBUF_CONSTEXPR LatencyCheckPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LatencyCheckPayload(const LatencyCheckPayload& from);
  LatencyCheckPayload(LatencyCheckPayload&& from) noexcept
    : LatencyCheckPayload() {
    *this = ::std::move(from);
  }

  inline LatencyCheckPayload& operator=(const LatencyCheckPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline LatencyCheckPayload& operator=(LatencyCheckPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LatencyCheckPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const LatencyCheckPayload* internal_default_instance() {
    return reinterpret_cast<const LatencyCheckPayload*>(
               &_LatencyCheckPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LatencyCheckPayload& a, LatencyCheckPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(LatencyCheckPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LatencyCheckPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LatencyCheckPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LatencyCheckPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LatencyCheckPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LatencyCheckPayload& from) {
    LatencyCheckPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LatencyCheckPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.std_msgs.LatencyCheckPayload";
  }
  protected:
  explicit LatencyCheckPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // bytes body = 2;
  void clear_body();
  const std::string& body() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_body(ArgT0&& arg0, ArgT... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* body);
  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // .dtproto.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::dtproto::std_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::dtproto::std_msgs::Header* release_header();
  ::dtproto::std_msgs::Header* mutable_header();
  void set_allocated_header(::dtproto::std_msgs::Header* header);
  private:
  const ::dtproto::std_msgs::Header& _internal_header() const;
  ::dtproto::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::dtproto::std_msgs::Header* header);
  ::dtproto::std_msgs::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:dtproto.std_msgs.LatencyCheckPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::dtproto::std_msgs::Header* header_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Heartbeat

// uint32 seq = 1;
inline void Heartbeat::clear_seq() {
  _impl_.seq_ = 0u;
}
inline uint32_t Heartbeat::_internal_seq() const {
  return _impl_.seq_;
}
inline uint32_t Heartbeat::seq() const {
  // @@protoc_insertion_point(field_get:dtproto.std_msgs.Heartbeat.seq)
  return _internal_seq();
}
inline void Heartbeat::_internal_set_seq(uint32_t value) {
  
  _impl_.seq_ = value;
}
inline void Heartbeat::set_seq(uint32_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:dtproto.std_msgs.Heartbeat.seq)
}

// .google.protobuf.Timestamp time_stamp = 2;
inline bool Heartbeat::_internal_has_time_stamp() const {
  return this != internal_default_instance() && _impl_.time_stamp_ != nullptr;
}
inline bool Heartbeat::has_time_stamp() const {
  return _internal_has_time_stamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Heartbeat::_internal_time_stamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_stamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Heartbeat::time_stamp() const {
  // @@protoc_insertion_point(field_get:dtproto.std_msgs.Heartbeat.time_stamp)
  return _internal_time_stamp();
}
inline void Heartbeat::unsafe_arena_set_allocated_time_stamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_stamp_);
  }
  _impl_.time_stamp_ = time_stamp;
  if (time_stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.std_msgs.Heartbeat.time_stamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Heartbeat::release_time_stamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_stamp_;
  _impl_.time_stamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Heartbeat::unsafe_arena_release_time_stamp() {
  // @@protoc_insertion_point(field_release:dtproto.std_msgs.Heartbeat.time_stamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_stamp_;
  _impl_.time_stamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Heartbeat::_internal_mutable_time_stamp() {
  
  if (_impl_.time_stamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_stamp_ = p;
  }
  return _impl_.time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Heartbeat::mutable_time_stamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time_stamp();
  // @@protoc_insertion_point(field_mutable:dtproto.std_msgs.Heartbeat.time_stamp)
  return _msg;
}
inline void Heartbeat::set_allocated_time_stamp(::PROTOBUF_NAMESPACE_ID::Timestamp* time_stamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_stamp_);
  }
  if (time_stamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_stamp));
    if (message_arena != submessage_arena) {
      time_stamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_stamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.time_stamp_ = time_stamp;
  // @@protoc_insertion_point(field_set_allocated:dtproto.std_msgs.Heartbeat.time_stamp)
}

// bytes payload = 3;
inline void Heartbeat::clear_payload() {
  _impl_.payload_.ClearToEmpty();
}
inline const std::string& Heartbeat::payload() const {
  // @@protoc_insertion_point(field_get:dtproto.std_msgs.Heartbeat.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Heartbeat::set_payload(ArgT0&& arg0, ArgT... args) {
 
 _impl_.payload_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dtproto.std_msgs.Heartbeat.payload)
}
inline std::string* Heartbeat::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:dtproto.std_msgs.Heartbeat.payload)
  return _s;
}
inline const std::string& Heartbeat::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void Heartbeat::_internal_set_payload(const std::string& value) {
  
  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* Heartbeat::_internal_mutable_payload() {
  
  return _impl_.payload_.Mutable(GetArenaForAllocation());
}
inline std::string* Heartbeat::release_payload() {
  // @@protoc_insertion_point(field_release:dtproto.std_msgs.Heartbeat.payload)
  return _impl_.payload_.Release();
}
inline void Heartbeat::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  _impl_.payload_.SetAllocated(payload, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.payload_.IsDefault()) {
    _impl_.payload_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dtproto.std_msgs.Heartbeat.payload)
}

// -------------------------------------------------------------------

// LatencyCheckRequest

// int32 runs = 1;
inline void LatencyCheckRequest::clear_runs() {
  _impl_.runs_ = 0;
}
inline int32_t LatencyCheckRequest::_internal_runs() const {
  return _impl_.runs_;
}
inline int32_t LatencyCheckRequest::runs() const {
  // @@protoc_insertion_point(field_get:dtproto.std_msgs.LatencyCheckRequest.runs)
  return _internal_runs();
}
inline void LatencyCheckRequest::_internal_set_runs(int32_t value) {
  
  _impl_.runs_ = value;
}
inline void LatencyCheckRequest::set_runs(int32_t value) {
  _internal_set_runs(value);
  // @@protoc_insertion_point(field_set:dtproto.std_msgs.LatencyCheckRequest.runs)
}

// int32 size = 2;
inline void LatencyCheckRequest::clear_size() {
  _impl_.size_ = 0;
}
inline int32_t LatencyCheckRequest::_internal_size() const {
  return _impl_.size_;
}
inline int32_t LatencyCheckRequest::size() const {
  // @@protoc_insertion_point(field_get:dtproto.std_msgs.LatencyCheckRequest.size)
  return _internal_size();
}
inline void LatencyCheckRequest::_internal_set_size(int32_t value) {
  
  _impl_.size_ = value;
}
inline void LatencyCheckRequest::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:dtproto.std_msgs.LatencyCheckRequest.size)
}

// -------------------------------------------------------------------

// LatencyCheckPayload

// .dtproto.std_msgs.Header header = 1;
inline bool LatencyCheckPayload::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool LatencyCheckPayload::has_header() const {
  return _internal_has_header();
}
inline const ::dtproto::std_msgs::Header& LatencyCheckPayload::_internal_header() const {
  const ::dtproto::std_msgs::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::std_msgs::Header&>(
      ::dtproto::std_msgs::_Header_default_instance_);
}
inline const ::dtproto::std_msgs::Header& LatencyCheckPayload::header() const {
  // @@protoc_insertion_point(field_get:dtproto.std_msgs.LatencyCheckPayload.header)
  return _internal_header();
}
inline void LatencyCheckPayload::unsafe_arena_set_allocated_header(
    ::dtproto::std_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.std_msgs.LatencyCheckPayload.header)
}
inline ::dtproto::std_msgs::Header* LatencyCheckPayload::release_header() {
  
  ::dtproto::std_msgs::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::std_msgs::Header* LatencyCheckPayload::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:dtproto.std_msgs.LatencyCheckPayload.header)
  
  ::dtproto::std_msgs::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::dtproto::std_msgs::Header* LatencyCheckPayload::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::std_msgs::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::dtproto::std_msgs::Header* LatencyCheckPayload::mutable_header() {
  ::dtproto::std_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:dtproto.std_msgs.LatencyCheckPayload.header)
  return _msg;
}
inline void LatencyCheckPayload::set_allocated_header(::dtproto::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:dtproto.std_msgs.LatencyCheckPayload.header)
}

// bytes body = 2;
inline void LatencyCheckPayload::clear_body() {
  _impl_.body_.ClearToEmpty();
}
inline const std::string& LatencyCheckPayload::body() const {
  // @@protoc_insertion_point(field_get:dtproto.std_msgs.LatencyCheckPayload.body)
  return _internal_body();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LatencyCheckPayload::set_body(ArgT0&& arg0, ArgT... args) {
 
 _impl_.body_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dtproto.std_msgs.LatencyCheckPayload.body)
}
inline std::string* LatencyCheckPayload::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:dtproto.std_msgs.LatencyCheckPayload.body)
  return _s;
}
inline const std::string& LatencyCheckPayload::_internal_body() const {
  return _impl_.body_.Get();
}
inline void LatencyCheckPayload::_internal_set_body(const std::string& value) {
  
  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* LatencyCheckPayload::_internal_mutable_body() {
  
  return _impl_.body_.Mutable(GetArenaForAllocation());
}
inline std::string* LatencyCheckPayload::release_body() {
  // @@protoc_insertion_point(field_release:dtproto.std_msgs.LatencyCheckPayload.body)
  return _impl_.body_.Release();
}
inline void LatencyCheckPayload::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  _impl_.body_.SetAllocated(body, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.body_.IsDefault()) {
    _impl_.body_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dtproto.std_msgs.LatencyCheckPayload.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace std_msgs
}  // namespace dtproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto
