// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dtProto/std_msgs/Heartbeat.proto

#include "dtProto/std_msgs/Heartbeat.pb.h"
#include "dtProto/std_msgs/Heartbeat.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dtproto {
namespace std_msgs {

static const char* CommHealthCheck_method_names[] = {
  "/dtproto.std_msgs.CommHealthCheck/Ping",
  "/dtproto.std_msgs.CommHealthCheck/CheckLatency",
};

std::unique_ptr< CommHealthCheck::Stub> CommHealthCheck::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CommHealthCheck::Stub> stub(new CommHealthCheck::Stub(channel, options));
  return stub;
}

CommHealthCheck::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Ping_(CommHealthCheck_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CheckLatency_(CommHealthCheck_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status CommHealthCheck::Stub::Ping(::grpc::ClientContext* context, const ::dtproto::std_msgs::Heartbeat& request, ::dtproto::std_msgs::Heartbeat* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dtproto::std_msgs::Heartbeat, ::dtproto::std_msgs::Heartbeat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ping_, context, request, response);
}

void CommHealthCheck::Stub::async::Ping(::grpc::ClientContext* context, const ::dtproto::std_msgs::Heartbeat* request, ::dtproto::std_msgs::Heartbeat* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dtproto::std_msgs::Heartbeat, ::dtproto::std_msgs::Heartbeat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, std::move(f));
}

void CommHealthCheck::Stub::async::Ping(::grpc::ClientContext* context, const ::dtproto::std_msgs::Heartbeat* request, ::dtproto::std_msgs::Heartbeat* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ping_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dtproto::std_msgs::Heartbeat>* CommHealthCheck::Stub::PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::dtproto::std_msgs::Heartbeat& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dtproto::std_msgs::Heartbeat, ::dtproto::std_msgs::Heartbeat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dtproto::std_msgs::Heartbeat>* CommHealthCheck::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::dtproto::std_msgs::Heartbeat& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::dtproto::std_msgs::LatencyCheckPayload>* CommHealthCheck::Stub::CheckLatencyRaw(::grpc::ClientContext* context, const ::dtproto::std_msgs::LatencyCheckRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::dtproto::std_msgs::LatencyCheckPayload>::Create(channel_.get(), rpcmethod_CheckLatency_, context, request);
}

void CommHealthCheck::Stub::async::CheckLatency(::grpc::ClientContext* context, const ::dtproto::std_msgs::LatencyCheckRequest* request, ::grpc::ClientReadReactor< ::dtproto::std_msgs::LatencyCheckPayload>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::dtproto::std_msgs::LatencyCheckPayload>::Create(stub_->channel_.get(), stub_->rpcmethod_CheckLatency_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::dtproto::std_msgs::LatencyCheckPayload>* CommHealthCheck::Stub::AsyncCheckLatencyRaw(::grpc::ClientContext* context, const ::dtproto::std_msgs::LatencyCheckRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dtproto::std_msgs::LatencyCheckPayload>::Create(channel_.get(), cq, rpcmethod_CheckLatency_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::dtproto::std_msgs::LatencyCheckPayload>* CommHealthCheck::Stub::PrepareAsyncCheckLatencyRaw(::grpc::ClientContext* context, const ::dtproto::std_msgs::LatencyCheckRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dtproto::std_msgs::LatencyCheckPayload>::Create(channel_.get(), cq, rpcmethod_CheckLatency_, context, request, false, nullptr);
}

CommHealthCheck::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommHealthCheck_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CommHealthCheck::Service, ::dtproto::std_msgs::Heartbeat, ::dtproto::std_msgs::Heartbeat, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CommHealthCheck::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dtproto::std_msgs::Heartbeat* req,
             ::dtproto::std_msgs::Heartbeat* resp) {
               return service->Ping(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CommHealthCheck_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CommHealthCheck::Service, ::dtproto::std_msgs::LatencyCheckRequest, ::dtproto::std_msgs::LatencyCheckPayload>(
          [](CommHealthCheck::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dtproto::std_msgs::LatencyCheckRequest* req,
             ::grpc::ServerWriter<::dtproto::std_msgs::LatencyCheckPayload>* writer) {
               return service->CheckLatency(ctx, req, writer);
             }, this)));
}

CommHealthCheck::Service::~Service() {
}

::grpc::Status CommHealthCheck::Service::Ping(::grpc::ServerContext* context, const ::dtproto::std_msgs::Heartbeat* request, ::dtproto::std_msgs::Heartbeat* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CommHealthCheck::Service::CheckLatency(::grpc::ServerContext* context, const ::dtproto::std_msgs::LatencyCheckRequest* request, ::grpc::ServerWriter< ::dtproto::std_msgs::LatencyCheckPayload>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dtproto
}  // namespace std_msgs

