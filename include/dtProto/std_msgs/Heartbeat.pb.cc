// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtProto/std_msgs/Heartbeat.proto

#include "dtProto/std_msgs/Heartbeat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dtproto {
namespace std_msgs {
PROTOBUF_CONSTEXPR Heartbeat::Heartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_stamp_)*/nullptr
  , /*decltype(_impl_.seq_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatDefaultTypeInternal() {}
  union {
    Heartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
PROTOBUF_CONSTEXPR LatencyCheckRequest::LatencyCheckRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.runs_)*/0
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LatencyCheckRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyCheckRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyCheckRequestDefaultTypeInternal() {}
  union {
    LatencyCheckRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyCheckRequestDefaultTypeInternal _LatencyCheckRequest_default_instance_;
PROTOBUF_CONSTEXPR LatencyCheckPayload::LatencyCheckPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.body_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LatencyCheckPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LatencyCheckPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LatencyCheckPayloadDefaultTypeInternal() {}
  union {
    LatencyCheckPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LatencyCheckPayloadDefaultTypeInternal _LatencyCheckPayload_default_instance_;
}  // namespace std_msgs
}  // namespace dtproto
static ::_pb::Metadata file_level_metadata_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto = nullptr;

const uint32_t TableStruct_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::std_msgs::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::std_msgs::Heartbeat, _impl_.seq_),
  PROTOBUF_FIELD_OFFSET(::dtproto::std_msgs::Heartbeat, _impl_.time_stamp_),
  PROTOBUF_FIELD_OFFSET(::dtproto::std_msgs::Heartbeat, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::std_msgs::LatencyCheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::std_msgs::LatencyCheckRequest, _impl_.runs_),
  PROTOBUF_FIELD_OFFSET(::dtproto::std_msgs::LatencyCheckRequest, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::std_msgs::LatencyCheckPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::std_msgs::LatencyCheckPayload, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::dtproto::std_msgs::LatencyCheckPayload, _impl_.body_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dtproto::std_msgs::Heartbeat)},
  { 9, -1, -1, sizeof(::dtproto::std_msgs::LatencyCheckRequest)},
  { 17, -1, -1, sizeof(::dtproto::std_msgs::LatencyCheckPayload)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dtproto::std_msgs::_Heartbeat_default_instance_._instance,
  &::dtproto::std_msgs::_LatencyCheckRequest_default_instance_._instance,
  &::dtproto::std_msgs::_LatencyCheckPayload_default_instance_._instance,
};

const char descriptor_table_protodef_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n dtProto/std_msgs/Heartbeat.proto\022\020dtpr"
  "oto.std_msgs\032\037google/protobuf/timestamp."
  "proto\032\035dtProto/std_msgs/Header.proto\"Y\n\t"
  "Heartbeat\022\013\n\003seq\030\001 \001(\r\022.\n\ntime_stamp\030\002 \001"
  "(\0132\032.google.protobuf.Timestamp\022\017\n\007payloa"
  "d\030\003 \001(\014\"1\n\023LatencyCheckRequest\022\014\n\004runs\030\001"
  " \001(\005\022\014\n\004size\030\002 \001(\005\"M\n\023LatencyCheckPayloa"
  "d\022(\n\006header\030\001 \001(\0132\030.dtproto.std_msgs.Hea"
  "der\022\014\n\004body\030\002 \001(\0142\263\001\n\017CommHealthCheck\022@\n"
  "\004Ping\022\033.dtproto.std_msgs.Heartbeat\032\033.dtp"
  "roto.std_msgs.Heartbeat\022^\n\014CheckLatency\022"
  "%.dtproto.std_msgs.LatencyCheckRequest\032%"
  ".dtproto.std_msgs.LatencyCheckPayload0\001b"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto_deps[2] = {
  &::descriptor_table_dtProto_2fstd_5fmsgs_2fHeader_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto = {
    false, false, 527, descriptor_table_protodef_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto,
    "dtProto/std_msgs/Heartbeat.proto",
    &descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto_once, descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto_deps, 2, 3,
    schemas, file_default_instances, TableStruct_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto::offsets,
    file_level_metadata_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto, file_level_enum_descriptors_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto,
    file_level_service_descriptors_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto_getter() {
  return &descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto(&descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto);
namespace dtproto {
namespace std_msgs {

// ===================================================================

class Heartbeat::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_stamp(const Heartbeat* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Heartbeat::_Internal::time_stamp(const Heartbeat* msg) {
  return *msg->_impl_.time_stamp_;
}
void Heartbeat::clear_time_stamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_stamp_ != nullptr) {
    delete _impl_.time_stamp_;
  }
  _impl_.time_stamp_ = nullptr;
}
Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.std_msgs.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Heartbeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.time_stamp_){nullptr}
    , decltype(_impl_.seq_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_time_stamp()) {
    _this->_impl_.time_stamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_stamp_);
  }
  _this->_impl_.seq_ = from._impl_.seq_;
  // @@protoc_insertion_point(copy_constructor:dtproto.std_msgs.Heartbeat)
}

inline void Heartbeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , decltype(_impl_.time_stamp_){nullptr}
    , decltype(_impl_.seq_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:dtproto.std_msgs.Heartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Heartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_stamp_;
}

void Heartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.std_msgs.Heartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_stamp_ != nullptr) {
    delete _impl_.time_stamp_;
  }
  _impl_.time_stamp_ = nullptr;
  _impl_.seq_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_stamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Heartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.std_msgs.Heartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seq = 1;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seq(), target);
  }

  // .google.protobuf.Timestamp time_stamp = 2;
  if (this->_internal_has_time_stamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time_stamp(this),
        _Internal::time_stamp(this).GetCachedSize(), target, stream);
  }

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.std_msgs.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.std_msgs.Heartbeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // .google.protobuf.Timestamp time_stamp = 2;
  if (this->_internal_has_time_stamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_stamp_);
  }

  // uint32 seq = 1;
  if (this->_internal_seq() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_seq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Heartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Heartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Heartbeat::GetClassData() const { return &_class_data_; }


void Heartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Heartbeat*>(&to_msg);
  auto& from = static_cast<const Heartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.std_msgs.Heartbeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_has_time_stamp()) {
    _this->_internal_mutable_time_stamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time_stamp());
  }
  if (from._internal_seq() != 0) {
    _this->_internal_set_seq(from._internal_seq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.std_msgs.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.seq_)
      + sizeof(Heartbeat::_impl_.seq_)
      - PROTOBUF_FIELD_OFFSET(Heartbeat, _impl_.time_stamp_)>(
          reinterpret_cast<char*>(&_impl_.time_stamp_),
          reinterpret_cast<char*>(&other->_impl_.time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto_getter, &descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto_once,
      file_level_metadata_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto[0]);
}

// ===================================================================

class LatencyCheckRequest::_Internal {
 public:
};

LatencyCheckRequest::LatencyCheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.std_msgs.LatencyCheckRequest)
}
LatencyCheckRequest::LatencyCheckRequest(const LatencyCheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LatencyCheckRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.runs_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.runs_, &from._impl_.runs_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.runs_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:dtproto.std_msgs.LatencyCheckRequest)
}

inline void LatencyCheckRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.runs_){0}
    , decltype(_impl_.size_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LatencyCheckRequest::~LatencyCheckRequest() {
  // @@protoc_insertion_point(destructor:dtproto.std_msgs.LatencyCheckRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatencyCheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LatencyCheckRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatencyCheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.std_msgs.LatencyCheckRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.runs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.runs_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyCheckRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 runs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.runs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatencyCheckRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.std_msgs.LatencyCheckRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 runs = 1;
  if (this->_internal_runs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_runs(), target);
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.std_msgs.LatencyCheckRequest)
  return target;
}

size_t LatencyCheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.std_msgs.LatencyCheckRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 runs = 1;
  if (this->_internal_runs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_runs());
  }

  // int32 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatencyCheckRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LatencyCheckRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatencyCheckRequest::GetClassData() const { return &_class_data_; }


void LatencyCheckRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LatencyCheckRequest*>(&to_msg);
  auto& from = static_cast<const LatencyCheckRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.std_msgs.LatencyCheckRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_runs() != 0) {
    _this->_internal_set_runs(from._internal_runs());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyCheckRequest::CopyFrom(const LatencyCheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.std_msgs.LatencyCheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyCheckRequest::IsInitialized() const {
  return true;
}

void LatencyCheckRequest::InternalSwap(LatencyCheckRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LatencyCheckRequest, _impl_.size_)
      + sizeof(LatencyCheckRequest::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(LatencyCheckRequest, _impl_.runs_)>(
          reinterpret_cast<char*>(&_impl_.runs_),
          reinterpret_cast<char*>(&other->_impl_.runs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyCheckRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto_getter, &descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto_once,
      file_level_metadata_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto[1]);
}

// ===================================================================

class LatencyCheckPayload::_Internal {
 public:
  static const ::dtproto::std_msgs::Header& header(const LatencyCheckPayload* msg);
};

const ::dtproto::std_msgs::Header&
LatencyCheckPayload::_Internal::header(const LatencyCheckPayload* msg) {
  return *msg->_impl_.header_;
}
void LatencyCheckPayload::clear_header() {
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
}
LatencyCheckPayload::LatencyCheckPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.std_msgs.LatencyCheckPayload)
}
LatencyCheckPayload::LatencyCheckPayload(const LatencyCheckPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LatencyCheckPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.body_){}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_body().empty()) {
    _this->_impl_.body_.Set(from._internal_body(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::dtproto::std_msgs::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:dtproto.std_msgs.LatencyCheckPayload)
}

inline void LatencyCheckPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.body_){}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LatencyCheckPayload::~LatencyCheckPayload() {
  // @@protoc_insertion_point(destructor:dtproto.std_msgs.LatencyCheckPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LatencyCheckPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void LatencyCheckPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LatencyCheckPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.std_msgs.LatencyCheckPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.body_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LatencyCheckPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.std_msgs.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LatencyCheckPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.std_msgs.LatencyCheckPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // bytes body = 2;
  if (!this->_internal_body().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.std_msgs.LatencyCheckPayload)
  return target;
}

size_t LatencyCheckPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.std_msgs.LatencyCheckPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes body = 2;
  if (!this->_internal_body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_body());
  }

  // .dtproto.std_msgs.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LatencyCheckPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LatencyCheckPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LatencyCheckPayload::GetClassData() const { return &_class_data_; }


void LatencyCheckPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LatencyCheckPayload*>(&to_msg);
  auto& from = static_cast<const LatencyCheckPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.std_msgs.LatencyCheckPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::dtproto::std_msgs::Header::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LatencyCheckPayload::CopyFrom(const LatencyCheckPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.std_msgs.LatencyCheckPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LatencyCheckPayload::IsInitialized() const {
  return true;
}

void LatencyCheckPayload::InternalSwap(LatencyCheckPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.body_, lhs_arena,
      &other->_impl_.body_, rhs_arena
  );
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LatencyCheckPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto_getter, &descriptor_table_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto_once,
      file_level_metadata_dtProto_2fstd_5fmsgs_2fHeartbeat_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace std_msgs
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dtproto::std_msgs::Heartbeat*
Arena::CreateMaybeMessage< ::dtproto::std_msgs::Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::std_msgs::Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::std_msgs::LatencyCheckRequest*
Arena::CreateMaybeMessage< ::dtproto::std_msgs::LatencyCheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::std_msgs::LatencyCheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::std_msgs::LatencyCheckPayload*
Arena::CreateMaybeMessage< ::dtproto::std_msgs::LatencyCheckPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::std_msgs::LatencyCheckPayload >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
