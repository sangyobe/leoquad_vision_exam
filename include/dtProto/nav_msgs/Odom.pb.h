// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtProto/nav_msgs/Odom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dtProto_2fnav_5fmsgs_2fOdom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dtProto_2fnav_5fmsgs_2fOdom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dtProto/std_msgs/Header.pb.h"
#include "dtProto/geometry_msgs/Pose.pb.h"
#include "dtProto/geometry_msgs/Orientation.pb.h"
#include "dtProto/geometry_msgs/Twist.pb.h"
#include "dtProto/geometry_msgs/Matrix.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dtProto_2fnav_5fmsgs_2fOdom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dtProto_2fnav_5fmsgs_2fOdom_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dtProto_2fnav_5fmsgs_2fOdom_2eproto;
namespace dtproto {
namespace nav_msgs {
class Odom;
struct OdomDefaultTypeInternal;
extern OdomDefaultTypeInternal _Odom_default_instance_;
class OdomTimeStamped;
struct OdomTimeStampedDefaultTypeInternal;
extern OdomTimeStampedDefaultTypeInternal _OdomTimeStamped_default_instance_;
class OdomWithCov;
struct OdomWithCovDefaultTypeInternal;
extern OdomWithCovDefaultTypeInternal _OdomWithCov_default_instance_;
class OdomWithCovTimeStamped;
struct OdomWithCovTimeStampedDefaultTypeInternal;
extern OdomWithCovTimeStampedDefaultTypeInternal _OdomWithCovTimeStamped_default_instance_;
}  // namespace nav_msgs
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> ::dtproto::nav_msgs::Odom* Arena::CreateMaybeMessage<::dtproto::nav_msgs::Odom>(Arena*);
template<> ::dtproto::nav_msgs::OdomTimeStamped* Arena::CreateMaybeMessage<::dtproto::nav_msgs::OdomTimeStamped>(Arena*);
template<> ::dtproto::nav_msgs::OdomWithCov* Arena::CreateMaybeMessage<::dtproto::nav_msgs::OdomWithCov>(Arena*);
template<> ::dtproto::nav_msgs::OdomWithCovTimeStamped* Arena::CreateMaybeMessage<::dtproto::nav_msgs::OdomWithCovTimeStamped>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dtproto {
namespace nav_msgs {

// ===================================================================

class Odom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.nav_msgs.Odom) */ {
 public:
  inline Odom() : Odom(nullptr) {}
  ~Odom() override;
  explicit PROTOBUF_CONSTEXPR Odom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Odom(const Odom& from);
  Odom(Odom&& from) noexcept
    : Odom() {
    *this = ::std::move(from);
  }

  inline Odom& operator=(const Odom& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odom& operator=(Odom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Odom& default_instance() {
    return *internal_default_instance();
  }
  static inline const Odom* internal_default_instance() {
    return reinterpret_cast<const Odom*>(
               &_Odom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Odom& a, Odom& b) {
    a.Swap(&b);
  }
  inline void Swap(Odom* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Odom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Odom>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Odom& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Odom& from) {
    Odom::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odom* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.nav_msgs.Odom";
  }
  protected:
  explicit Odom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFrameIdFieldNumber = 3,
    kPoseFieldNumber = 1,
    kTwistFieldNumber = 2,
  };
  // string child_frame_id = 3;
  void clear_child_frame_id();
  const std::string& child_frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_child_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_child_frame_id();
  PROTOBUF_NODISCARD std::string* release_child_frame_id();
  void set_allocated_child_frame_id(std::string* child_frame_id);
  private:
  const std::string& _internal_child_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_child_frame_id(const std::string& value);
  std::string* _internal_mutable_child_frame_id();
  public:

  // .dtproto.geometry_msgs.Pose3d pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::dtproto::geometry_msgs::Pose3d& pose() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Pose3d* release_pose();
  ::dtproto::geometry_msgs::Pose3d* mutable_pose();
  void set_allocated_pose(::dtproto::geometry_msgs::Pose3d* pose);
  private:
  const ::dtproto::geometry_msgs::Pose3d& _internal_pose() const;
  ::dtproto::geometry_msgs::Pose3d* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::dtproto::geometry_msgs::Pose3d* pose);
  ::dtproto::geometry_msgs::Pose3d* unsafe_arena_release_pose();

  // .dtproto.geometry_msgs.Twist twist = 2;
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::dtproto::geometry_msgs::Twist& twist() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Twist* release_twist();
  ::dtproto::geometry_msgs::Twist* mutable_twist();
  void set_allocated_twist(::dtproto::geometry_msgs::Twist* twist);
  private:
  const ::dtproto::geometry_msgs::Twist& _internal_twist() const;
  ::dtproto::geometry_msgs::Twist* _internal_mutable_twist();
  public:
  void unsafe_arena_set_allocated_twist(
      ::dtproto::geometry_msgs::Twist* twist);
  ::dtproto::geometry_msgs::Twist* unsafe_arena_release_twist();

  // @@protoc_insertion_point(class_scope:dtproto.nav_msgs.Odom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_frame_id_;
    ::dtproto::geometry_msgs::Pose3d* pose_;
    ::dtproto::geometry_msgs::Twist* twist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fnav_5fmsgs_2fOdom_2eproto;
};
// -------------------------------------------------------------------

class OdomTimeStamped final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.nav_msgs.OdomTimeStamped) */ {
 public:
  inline OdomTimeStamped() : OdomTimeStamped(nullptr) {}
  ~OdomTimeStamped() override;
  explicit PROTOBUF_CONSTEXPR OdomTimeStamped(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OdomTimeStamped(const OdomTimeStamped& from);
  OdomTimeStamped(OdomTimeStamped&& from) noexcept
    : OdomTimeStamped() {
    *this = ::std::move(from);
  }

  inline OdomTimeStamped& operator=(const OdomTimeStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdomTimeStamped& operator=(OdomTimeStamped&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OdomTimeStamped& default_instance() {
    return *internal_default_instance();
  }
  static inline const OdomTimeStamped* internal_default_instance() {
    return reinterpret_cast<const OdomTimeStamped*>(
               &_OdomTimeStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OdomTimeStamped& a, OdomTimeStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(OdomTimeStamped* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OdomTimeStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OdomTimeStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OdomTimeStamped>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OdomTimeStamped& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OdomTimeStamped& from) {
    OdomTimeStamped::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdomTimeStamped* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.nav_msgs.OdomTimeStamped";
  }
  protected:
  explicit OdomTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kOdomFieldNumber = 2,
  };
  // .dtproto.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::dtproto::std_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::dtproto::std_msgs::Header* release_header();
  ::dtproto::std_msgs::Header* mutable_header();
  void set_allocated_header(::dtproto::std_msgs::Header* header);
  private:
  const ::dtproto::std_msgs::Header& _internal_header() const;
  ::dtproto::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::dtproto::std_msgs::Header* header);
  ::dtproto::std_msgs::Header* unsafe_arena_release_header();

  // .dtproto.nav_msgs.Odom odom = 2;
  bool has_odom() const;
  private:
  bool _internal_has_odom() const;
  public:
  void clear_odom();
  const ::dtproto::nav_msgs::Odom& odom() const;
  PROTOBUF_NODISCARD ::dtproto::nav_msgs::Odom* release_odom();
  ::dtproto::nav_msgs::Odom* mutable_odom();
  void set_allocated_odom(::dtproto::nav_msgs::Odom* odom);
  private:
  const ::dtproto::nav_msgs::Odom& _internal_odom() const;
  ::dtproto::nav_msgs::Odom* _internal_mutable_odom();
  public:
  void unsafe_arena_set_allocated_odom(
      ::dtproto::nav_msgs::Odom* odom);
  ::dtproto::nav_msgs::Odom* unsafe_arena_release_odom();

  // @@protoc_insertion_point(class_scope:dtproto.nav_msgs.OdomTimeStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dtproto::std_msgs::Header* header_;
    ::dtproto::nav_msgs::Odom* odom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fnav_5fmsgs_2fOdom_2eproto;
};
// -------------------------------------------------------------------

class OdomWithCov final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.nav_msgs.OdomWithCov) */ {
 public:
  inline OdomWithCov() : OdomWithCov(nullptr) {}
  ~OdomWithCov() override;
  explicit PROTOBUF_CONSTEXPR OdomWithCov(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OdomWithCov(const OdomWithCov& from);
  OdomWithCov(OdomWithCov&& from) noexcept
    : OdomWithCov() {
    *this = ::std::move(from);
  }

  inline OdomWithCov& operator=(const OdomWithCov& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdomWithCov& operator=(OdomWithCov&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OdomWithCov& default_instance() {
    return *internal_default_instance();
  }
  static inline const OdomWithCov* internal_default_instance() {
    return reinterpret_cast<const OdomWithCov*>(
               &_OdomWithCov_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OdomWithCov& a, OdomWithCov& b) {
    a.Swap(&b);
  }
  inline void Swap(OdomWithCov* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OdomWithCov* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OdomWithCov* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OdomWithCov>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OdomWithCov& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OdomWithCov& from) {
    OdomWithCov::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdomWithCov* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.nav_msgs.OdomWithCov";
  }
  protected:
  explicit OdomWithCov(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildFrameIdFieldNumber = 3,
    kPoseFieldNumber = 1,
    kTwistFieldNumber = 2,
    kPoseCovFieldNumber = 4,
    kTwistCovFieldNumber = 5,
  };
  // string child_frame_id = 3;
  void clear_child_frame_id();
  const std::string& child_frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_child_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_child_frame_id();
  PROTOBUF_NODISCARD std::string* release_child_frame_id();
  void set_allocated_child_frame_id(std::string* child_frame_id);
  private:
  const std::string& _internal_child_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_child_frame_id(const std::string& value);
  std::string* _internal_mutable_child_frame_id();
  public:

  // .dtproto.geometry_msgs.Pose3d pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::dtproto::geometry_msgs::Pose3d& pose() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Pose3d* release_pose();
  ::dtproto::geometry_msgs::Pose3d* mutable_pose();
  void set_allocated_pose(::dtproto::geometry_msgs::Pose3d* pose);
  private:
  const ::dtproto::geometry_msgs::Pose3d& _internal_pose() const;
  ::dtproto::geometry_msgs::Pose3d* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::dtproto::geometry_msgs::Pose3d* pose);
  ::dtproto::geometry_msgs::Pose3d* unsafe_arena_release_pose();

  // .dtproto.geometry_msgs.Twist twist = 2;
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::dtproto::geometry_msgs::Twist& twist() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Twist* release_twist();
  ::dtproto::geometry_msgs::Twist* mutable_twist();
  void set_allocated_twist(::dtproto::geometry_msgs::Twist* twist);
  private:
  const ::dtproto::geometry_msgs::Twist& _internal_twist() const;
  ::dtproto::geometry_msgs::Twist* _internal_mutable_twist();
  public:
  void unsafe_arena_set_allocated_twist(
      ::dtproto::geometry_msgs::Twist* twist);
  ::dtproto::geometry_msgs::Twist* unsafe_arena_release_twist();

  // .dtproto.geometry_msgs.Matrix6d pose_cov = 4;
  bool has_pose_cov() const;
  private:
  bool _internal_has_pose_cov() const;
  public:
  void clear_pose_cov();
  const ::dtproto::geometry_msgs::Matrix6d& pose_cov() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Matrix6d* release_pose_cov();
  ::dtproto::geometry_msgs::Matrix6d* mutable_pose_cov();
  void set_allocated_pose_cov(::dtproto::geometry_msgs::Matrix6d* pose_cov);
  private:
  const ::dtproto::geometry_msgs::Matrix6d& _internal_pose_cov() const;
  ::dtproto::geometry_msgs::Matrix6d* _internal_mutable_pose_cov();
  public:
  void unsafe_arena_set_allocated_pose_cov(
      ::dtproto::geometry_msgs::Matrix6d* pose_cov);
  ::dtproto::geometry_msgs::Matrix6d* unsafe_arena_release_pose_cov();

  // .dtproto.geometry_msgs.Matrix6d twist_cov = 5;
  bool has_twist_cov() const;
  private:
  bool _internal_has_twist_cov() const;
  public:
  void clear_twist_cov();
  const ::dtproto::geometry_msgs::Matrix6d& twist_cov() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Matrix6d* release_twist_cov();
  ::dtproto::geometry_msgs::Matrix6d* mutable_twist_cov();
  void set_allocated_twist_cov(::dtproto::geometry_msgs::Matrix6d* twist_cov);
  private:
  const ::dtproto::geometry_msgs::Matrix6d& _internal_twist_cov() const;
  ::dtproto::geometry_msgs::Matrix6d* _internal_mutable_twist_cov();
  public:
  void unsafe_arena_set_allocated_twist_cov(
      ::dtproto::geometry_msgs::Matrix6d* twist_cov);
  ::dtproto::geometry_msgs::Matrix6d* unsafe_arena_release_twist_cov();

  // @@protoc_insertion_point(class_scope:dtproto.nav_msgs.OdomWithCov)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_frame_id_;
    ::dtproto::geometry_msgs::Pose3d* pose_;
    ::dtproto::geometry_msgs::Twist* twist_;
    ::dtproto::geometry_msgs::Matrix6d* pose_cov_;
    ::dtproto::geometry_msgs::Matrix6d* twist_cov_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fnav_5fmsgs_2fOdom_2eproto;
};
// -------------------------------------------------------------------

class OdomWithCovTimeStamped final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.nav_msgs.OdomWithCovTimeStamped) */ {
 public:
  inline OdomWithCovTimeStamped() : OdomWithCovTimeStamped(nullptr) {}
  ~OdomWithCovTimeStamped() override;
  explicit PROTOBUF_CONSTEXPR OdomWithCovTimeStamped(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OdomWithCovTimeStamped(const OdomWithCovTimeStamped& from);
  OdomWithCovTimeStamped(OdomWithCovTimeStamped&& from) noexcept
    : OdomWithCovTimeStamped() {
    *this = ::std::move(from);
  }

  inline OdomWithCovTimeStamped& operator=(const OdomWithCovTimeStamped& from) {
    CopyFrom(from);
    return *this;
  }
  inline OdomWithCovTimeStamped& operator=(OdomWithCovTimeStamped&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OdomWithCovTimeStamped& default_instance() {
    return *internal_default_instance();
  }
  static inline const OdomWithCovTimeStamped* internal_default_instance() {
    return reinterpret_cast<const OdomWithCovTimeStamped*>(
               &_OdomWithCovTimeStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OdomWithCovTimeStamped& a, OdomWithCovTimeStamped& b) {
    a.Swap(&b);
  }
  inline void Swap(OdomWithCovTimeStamped* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OdomWithCovTimeStamped* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OdomWithCovTimeStamped* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OdomWithCovTimeStamped>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OdomWithCovTimeStamped& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OdomWithCovTimeStamped& from) {
    OdomWithCovTimeStamped::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OdomWithCovTimeStamped* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.nav_msgs.OdomWithCovTimeStamped";
  }
  protected:
  explicit OdomWithCovTimeStamped(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kOdomFieldNumber = 2,
  };
  // .dtproto.std_msgs.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::dtproto::std_msgs::Header& header() const;
  PROTOBUF_NODISCARD ::dtproto::std_msgs::Header* release_header();
  ::dtproto::std_msgs::Header* mutable_header();
  void set_allocated_header(::dtproto::std_msgs::Header* header);
  private:
  const ::dtproto::std_msgs::Header& _internal_header() const;
  ::dtproto::std_msgs::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::dtproto::std_msgs::Header* header);
  ::dtproto::std_msgs::Header* unsafe_arena_release_header();

  // .dtproto.nav_msgs.OdomWithCov odom = 2;
  bool has_odom() const;
  private:
  bool _internal_has_odom() const;
  public:
  void clear_odom();
  const ::dtproto::nav_msgs::OdomWithCov& odom() const;
  PROTOBUF_NODISCARD ::dtproto::nav_msgs::OdomWithCov* release_odom();
  ::dtproto::nav_msgs::OdomWithCov* mutable_odom();
  void set_allocated_odom(::dtproto::nav_msgs::OdomWithCov* odom);
  private:
  const ::dtproto::nav_msgs::OdomWithCov& _internal_odom() const;
  ::dtproto::nav_msgs::OdomWithCov* _internal_mutable_odom();
  public:
  void unsafe_arena_set_allocated_odom(
      ::dtproto::nav_msgs::OdomWithCov* odom);
  ::dtproto::nav_msgs::OdomWithCov* unsafe_arena_release_odom();

  // @@protoc_insertion_point(class_scope:dtproto.nav_msgs.OdomWithCovTimeStamped)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dtproto::std_msgs::Header* header_;
    ::dtproto::nav_msgs::OdomWithCov* odom_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fnav_5fmsgs_2fOdom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Odom

// .dtproto.geometry_msgs.Pose3d pose = 1;
inline bool Odom::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool Odom::has_pose() const {
  return _internal_has_pose();
}
inline const ::dtproto::geometry_msgs::Pose3d& Odom::_internal_pose() const {
  const ::dtproto::geometry_msgs::Pose3d* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Pose3d&>(
      ::dtproto::geometry_msgs::_Pose3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Pose3d& Odom::pose() const {
  // @@protoc_insertion_point(field_get:dtproto.nav_msgs.Odom.pose)
  return _internal_pose();
}
inline void Odom::unsafe_arena_set_allocated_pose(
    ::dtproto::geometry_msgs::Pose3d* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.nav_msgs.Odom.pose)
}
inline ::dtproto::geometry_msgs::Pose3d* Odom::release_pose() {
  
  ::dtproto::geometry_msgs::Pose3d* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Pose3d* Odom::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:dtproto.nav_msgs.Odom.pose)
  
  ::dtproto::geometry_msgs::Pose3d* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Pose3d* Odom::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Pose3d>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::dtproto::geometry_msgs::Pose3d* Odom::mutable_pose() {
  ::dtproto::geometry_msgs::Pose3d* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:dtproto.nav_msgs.Odom.pose)
  return _msg;
}
inline void Odom::set_allocated_pose(::dtproto::geometry_msgs::Pose3d* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:dtproto.nav_msgs.Odom.pose)
}

// .dtproto.geometry_msgs.Twist twist = 2;
inline bool Odom::_internal_has_twist() const {
  return this != internal_default_instance() && _impl_.twist_ != nullptr;
}
inline bool Odom::has_twist() const {
  return _internal_has_twist();
}
inline const ::dtproto::geometry_msgs::Twist& Odom::_internal_twist() const {
  const ::dtproto::geometry_msgs::Twist* p = _impl_.twist_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Twist&>(
      ::dtproto::geometry_msgs::_Twist_default_instance_);
}
inline const ::dtproto::geometry_msgs::Twist& Odom::twist() const {
  // @@protoc_insertion_point(field_get:dtproto.nav_msgs.Odom.twist)
  return _internal_twist();
}
inline void Odom::unsafe_arena_set_allocated_twist(
    ::dtproto::geometry_msgs::Twist* twist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.twist_);
  }
  _impl_.twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.nav_msgs.Odom.twist)
}
inline ::dtproto::geometry_msgs::Twist* Odom::release_twist() {
  
  ::dtproto::geometry_msgs::Twist* temp = _impl_.twist_;
  _impl_.twist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Twist* Odom::unsafe_arena_release_twist() {
  // @@protoc_insertion_point(field_release:dtproto.nav_msgs.Odom.twist)
  
  ::dtproto::geometry_msgs::Twist* temp = _impl_.twist_;
  _impl_.twist_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Twist* Odom::_internal_mutable_twist() {
  
  if (_impl_.twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Twist>(GetArenaForAllocation());
    _impl_.twist_ = p;
  }
  return _impl_.twist_;
}
inline ::dtproto::geometry_msgs::Twist* Odom::mutable_twist() {
  ::dtproto::geometry_msgs::Twist* _msg = _internal_mutable_twist();
  // @@protoc_insertion_point(field_mutable:dtproto.nav_msgs.Odom.twist)
  return _msg;
}
inline void Odom::set_allocated_twist(::dtproto::geometry_msgs::Twist* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.twist_);
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist));
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:dtproto.nav_msgs.Odom.twist)
}

// string child_frame_id = 3;
inline void Odom::clear_child_frame_id() {
  _impl_.child_frame_id_.ClearToEmpty();
}
inline const std::string& Odom::child_frame_id() const {
  // @@protoc_insertion_point(field_get:dtproto.nav_msgs.Odom.child_frame_id)
  return _internal_child_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Odom::set_child_frame_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.child_frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dtproto.nav_msgs.Odom.child_frame_id)
}
inline std::string* Odom::mutable_child_frame_id() {
  std::string* _s = _internal_mutable_child_frame_id();
  // @@protoc_insertion_point(field_mutable:dtproto.nav_msgs.Odom.child_frame_id)
  return _s;
}
inline const std::string& Odom::_internal_child_frame_id() const {
  return _impl_.child_frame_id_.Get();
}
inline void Odom::_internal_set_child_frame_id(const std::string& value) {
  
  _impl_.child_frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Odom::_internal_mutable_child_frame_id() {
  
  return _impl_.child_frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* Odom::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:dtproto.nav_msgs.Odom.child_frame_id)
  return _impl_.child_frame_id_.Release();
}
inline void Odom::set_allocated_child_frame_id(std::string* child_frame_id) {
  if (child_frame_id != nullptr) {
    
  } else {
    
  }
  _impl_.child_frame_id_.SetAllocated(child_frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.child_frame_id_.IsDefault()) {
    _impl_.child_frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dtproto.nav_msgs.Odom.child_frame_id)
}

// -------------------------------------------------------------------

// OdomTimeStamped

// .dtproto.std_msgs.Header header = 1;
inline bool OdomTimeStamped::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool OdomTimeStamped::has_header() const {
  return _internal_has_header();
}
inline const ::dtproto::std_msgs::Header& OdomTimeStamped::_internal_header() const {
  const ::dtproto::std_msgs::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::std_msgs::Header&>(
      ::dtproto::std_msgs::_Header_default_instance_);
}
inline const ::dtproto::std_msgs::Header& OdomTimeStamped::header() const {
  // @@protoc_insertion_point(field_get:dtproto.nav_msgs.OdomTimeStamped.header)
  return _internal_header();
}
inline void OdomTimeStamped::unsafe_arena_set_allocated_header(
    ::dtproto::std_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.nav_msgs.OdomTimeStamped.header)
}
inline ::dtproto::std_msgs::Header* OdomTimeStamped::release_header() {
  
  ::dtproto::std_msgs::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::std_msgs::Header* OdomTimeStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:dtproto.nav_msgs.OdomTimeStamped.header)
  
  ::dtproto::std_msgs::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::dtproto::std_msgs::Header* OdomTimeStamped::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::std_msgs::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::dtproto::std_msgs::Header* OdomTimeStamped::mutable_header() {
  ::dtproto::std_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:dtproto.nav_msgs.OdomTimeStamped.header)
  return _msg;
}
inline void OdomTimeStamped::set_allocated_header(::dtproto::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:dtproto.nav_msgs.OdomTimeStamped.header)
}

// .dtproto.nav_msgs.Odom odom = 2;
inline bool OdomTimeStamped::_internal_has_odom() const {
  return this != internal_default_instance() && _impl_.odom_ != nullptr;
}
inline bool OdomTimeStamped::has_odom() const {
  return _internal_has_odom();
}
inline void OdomTimeStamped::clear_odom() {
  if (GetArenaForAllocation() == nullptr && _impl_.odom_ != nullptr) {
    delete _impl_.odom_;
  }
  _impl_.odom_ = nullptr;
}
inline const ::dtproto::nav_msgs::Odom& OdomTimeStamped::_internal_odom() const {
  const ::dtproto::nav_msgs::Odom* p = _impl_.odom_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::nav_msgs::Odom&>(
      ::dtproto::nav_msgs::_Odom_default_instance_);
}
inline const ::dtproto::nav_msgs::Odom& OdomTimeStamped::odom() const {
  // @@protoc_insertion_point(field_get:dtproto.nav_msgs.OdomTimeStamped.odom)
  return _internal_odom();
}
inline void OdomTimeStamped::unsafe_arena_set_allocated_odom(
    ::dtproto::nav_msgs::Odom* odom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.odom_);
  }
  _impl_.odom_ = odom;
  if (odom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.nav_msgs.OdomTimeStamped.odom)
}
inline ::dtproto::nav_msgs::Odom* OdomTimeStamped::release_odom() {
  
  ::dtproto::nav_msgs::Odom* temp = _impl_.odom_;
  _impl_.odom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::nav_msgs::Odom* OdomTimeStamped::unsafe_arena_release_odom() {
  // @@protoc_insertion_point(field_release:dtproto.nav_msgs.OdomTimeStamped.odom)
  
  ::dtproto::nav_msgs::Odom* temp = _impl_.odom_;
  _impl_.odom_ = nullptr;
  return temp;
}
inline ::dtproto::nav_msgs::Odom* OdomTimeStamped::_internal_mutable_odom() {
  
  if (_impl_.odom_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::nav_msgs::Odom>(GetArenaForAllocation());
    _impl_.odom_ = p;
  }
  return _impl_.odom_;
}
inline ::dtproto::nav_msgs::Odom* OdomTimeStamped::mutable_odom() {
  ::dtproto::nav_msgs::Odom* _msg = _internal_mutable_odom();
  // @@protoc_insertion_point(field_mutable:dtproto.nav_msgs.OdomTimeStamped.odom)
  return _msg;
}
inline void OdomTimeStamped::set_allocated_odom(::dtproto::nav_msgs::Odom* odom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.odom_;
  }
  if (odom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(odom);
    if (message_arena != submessage_arena) {
      odom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.odom_ = odom;
  // @@protoc_insertion_point(field_set_allocated:dtproto.nav_msgs.OdomTimeStamped.odom)
}

// -------------------------------------------------------------------

// OdomWithCov

// .dtproto.geometry_msgs.Pose3d pose = 1;
inline bool OdomWithCov::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool OdomWithCov::has_pose() const {
  return _internal_has_pose();
}
inline const ::dtproto::geometry_msgs::Pose3d& OdomWithCov::_internal_pose() const {
  const ::dtproto::geometry_msgs::Pose3d* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Pose3d&>(
      ::dtproto::geometry_msgs::_Pose3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Pose3d& OdomWithCov::pose() const {
  // @@protoc_insertion_point(field_get:dtproto.nav_msgs.OdomWithCov.pose)
  return _internal_pose();
}
inline void OdomWithCov::unsafe_arena_set_allocated_pose(
    ::dtproto::geometry_msgs::Pose3d* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.nav_msgs.OdomWithCov.pose)
}
inline ::dtproto::geometry_msgs::Pose3d* OdomWithCov::release_pose() {
  
  ::dtproto::geometry_msgs::Pose3d* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Pose3d* OdomWithCov::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:dtproto.nav_msgs.OdomWithCov.pose)
  
  ::dtproto::geometry_msgs::Pose3d* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Pose3d* OdomWithCov::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Pose3d>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::dtproto::geometry_msgs::Pose3d* OdomWithCov::mutable_pose() {
  ::dtproto::geometry_msgs::Pose3d* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:dtproto.nav_msgs.OdomWithCov.pose)
  return _msg;
}
inline void OdomWithCov::set_allocated_pose(::dtproto::geometry_msgs::Pose3d* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:dtproto.nav_msgs.OdomWithCov.pose)
}

// .dtproto.geometry_msgs.Twist twist = 2;
inline bool OdomWithCov::_internal_has_twist() const {
  return this != internal_default_instance() && _impl_.twist_ != nullptr;
}
inline bool OdomWithCov::has_twist() const {
  return _internal_has_twist();
}
inline const ::dtproto::geometry_msgs::Twist& OdomWithCov::_internal_twist() const {
  const ::dtproto::geometry_msgs::Twist* p = _impl_.twist_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Twist&>(
      ::dtproto::geometry_msgs::_Twist_default_instance_);
}
inline const ::dtproto::geometry_msgs::Twist& OdomWithCov::twist() const {
  // @@protoc_insertion_point(field_get:dtproto.nav_msgs.OdomWithCov.twist)
  return _internal_twist();
}
inline void OdomWithCov::unsafe_arena_set_allocated_twist(
    ::dtproto::geometry_msgs::Twist* twist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.twist_);
  }
  _impl_.twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.nav_msgs.OdomWithCov.twist)
}
inline ::dtproto::geometry_msgs::Twist* OdomWithCov::release_twist() {
  
  ::dtproto::geometry_msgs::Twist* temp = _impl_.twist_;
  _impl_.twist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Twist* OdomWithCov::unsafe_arena_release_twist() {
  // @@protoc_insertion_point(field_release:dtproto.nav_msgs.OdomWithCov.twist)
  
  ::dtproto::geometry_msgs::Twist* temp = _impl_.twist_;
  _impl_.twist_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Twist* OdomWithCov::_internal_mutable_twist() {
  
  if (_impl_.twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Twist>(GetArenaForAllocation());
    _impl_.twist_ = p;
  }
  return _impl_.twist_;
}
inline ::dtproto::geometry_msgs::Twist* OdomWithCov::mutable_twist() {
  ::dtproto::geometry_msgs::Twist* _msg = _internal_mutable_twist();
  // @@protoc_insertion_point(field_mutable:dtproto.nav_msgs.OdomWithCov.twist)
  return _msg;
}
inline void OdomWithCov::set_allocated_twist(::dtproto::geometry_msgs::Twist* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.twist_);
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist));
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:dtproto.nav_msgs.OdomWithCov.twist)
}

// string child_frame_id = 3;
inline void OdomWithCov::clear_child_frame_id() {
  _impl_.child_frame_id_.ClearToEmpty();
}
inline const std::string& OdomWithCov::child_frame_id() const {
  // @@protoc_insertion_point(field_get:dtproto.nav_msgs.OdomWithCov.child_frame_id)
  return _internal_child_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void OdomWithCov::set_child_frame_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.child_frame_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dtproto.nav_msgs.OdomWithCov.child_frame_id)
}
inline std::string* OdomWithCov::mutable_child_frame_id() {
  std::string* _s = _internal_mutable_child_frame_id();
  // @@protoc_insertion_point(field_mutable:dtproto.nav_msgs.OdomWithCov.child_frame_id)
  return _s;
}
inline const std::string& OdomWithCov::_internal_child_frame_id() const {
  return _impl_.child_frame_id_.Get();
}
inline void OdomWithCov::_internal_set_child_frame_id(const std::string& value) {
  
  _impl_.child_frame_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OdomWithCov::_internal_mutable_child_frame_id() {
  
  return _impl_.child_frame_id_.Mutable(GetArenaForAllocation());
}
inline std::string* OdomWithCov::release_child_frame_id() {
  // @@protoc_insertion_point(field_release:dtproto.nav_msgs.OdomWithCov.child_frame_id)
  return _impl_.child_frame_id_.Release();
}
inline void OdomWithCov::set_allocated_child_frame_id(std::string* child_frame_id) {
  if (child_frame_id != nullptr) {
    
  } else {
    
  }
  _impl_.child_frame_id_.SetAllocated(child_frame_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.child_frame_id_.IsDefault()) {
    _impl_.child_frame_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dtproto.nav_msgs.OdomWithCov.child_frame_id)
}

// .dtproto.geometry_msgs.Matrix6d pose_cov = 4;
inline bool OdomWithCov::_internal_has_pose_cov() const {
  return this != internal_default_instance() && _impl_.pose_cov_ != nullptr;
}
inline bool OdomWithCov::has_pose_cov() const {
  return _internal_has_pose_cov();
}
inline const ::dtproto::geometry_msgs::Matrix6d& OdomWithCov::_internal_pose_cov() const {
  const ::dtproto::geometry_msgs::Matrix6d* p = _impl_.pose_cov_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Matrix6d&>(
      ::dtproto::geometry_msgs::_Matrix6d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Matrix6d& OdomWithCov::pose_cov() const {
  // @@protoc_insertion_point(field_get:dtproto.nav_msgs.OdomWithCov.pose_cov)
  return _internal_pose_cov();
}
inline void OdomWithCov::unsafe_arena_set_allocated_pose_cov(
    ::dtproto::geometry_msgs::Matrix6d* pose_cov) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_cov_);
  }
  _impl_.pose_cov_ = pose_cov;
  if (pose_cov) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.nav_msgs.OdomWithCov.pose_cov)
}
inline ::dtproto::geometry_msgs::Matrix6d* OdomWithCov::release_pose_cov() {
  
  ::dtproto::geometry_msgs::Matrix6d* temp = _impl_.pose_cov_;
  _impl_.pose_cov_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Matrix6d* OdomWithCov::unsafe_arena_release_pose_cov() {
  // @@protoc_insertion_point(field_release:dtproto.nav_msgs.OdomWithCov.pose_cov)
  
  ::dtproto::geometry_msgs::Matrix6d* temp = _impl_.pose_cov_;
  _impl_.pose_cov_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Matrix6d* OdomWithCov::_internal_mutable_pose_cov() {
  
  if (_impl_.pose_cov_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Matrix6d>(GetArenaForAllocation());
    _impl_.pose_cov_ = p;
  }
  return _impl_.pose_cov_;
}
inline ::dtproto::geometry_msgs::Matrix6d* OdomWithCov::mutable_pose_cov() {
  ::dtproto::geometry_msgs::Matrix6d* _msg = _internal_mutable_pose_cov();
  // @@protoc_insertion_point(field_mutable:dtproto.nav_msgs.OdomWithCov.pose_cov)
  return _msg;
}
inline void OdomWithCov::set_allocated_pose_cov(::dtproto::geometry_msgs::Matrix6d* pose_cov) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_cov_);
  }
  if (pose_cov) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_cov));
    if (message_arena != submessage_arena) {
      pose_cov = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_cov, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_cov_ = pose_cov;
  // @@protoc_insertion_point(field_set_allocated:dtproto.nav_msgs.OdomWithCov.pose_cov)
}

// .dtproto.geometry_msgs.Matrix6d twist_cov = 5;
inline bool OdomWithCov::_internal_has_twist_cov() const {
  return this != internal_default_instance() && _impl_.twist_cov_ != nullptr;
}
inline bool OdomWithCov::has_twist_cov() const {
  return _internal_has_twist_cov();
}
inline const ::dtproto::geometry_msgs::Matrix6d& OdomWithCov::_internal_twist_cov() const {
  const ::dtproto::geometry_msgs::Matrix6d* p = _impl_.twist_cov_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Matrix6d&>(
      ::dtproto::geometry_msgs::_Matrix6d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Matrix6d& OdomWithCov::twist_cov() const {
  // @@protoc_insertion_point(field_get:dtproto.nav_msgs.OdomWithCov.twist_cov)
  return _internal_twist_cov();
}
inline void OdomWithCov::unsafe_arena_set_allocated_twist_cov(
    ::dtproto::geometry_msgs::Matrix6d* twist_cov) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.twist_cov_);
  }
  _impl_.twist_cov_ = twist_cov;
  if (twist_cov) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.nav_msgs.OdomWithCov.twist_cov)
}
inline ::dtproto::geometry_msgs::Matrix6d* OdomWithCov::release_twist_cov() {
  
  ::dtproto::geometry_msgs::Matrix6d* temp = _impl_.twist_cov_;
  _impl_.twist_cov_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Matrix6d* OdomWithCov::unsafe_arena_release_twist_cov() {
  // @@protoc_insertion_point(field_release:dtproto.nav_msgs.OdomWithCov.twist_cov)
  
  ::dtproto::geometry_msgs::Matrix6d* temp = _impl_.twist_cov_;
  _impl_.twist_cov_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Matrix6d* OdomWithCov::_internal_mutable_twist_cov() {
  
  if (_impl_.twist_cov_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Matrix6d>(GetArenaForAllocation());
    _impl_.twist_cov_ = p;
  }
  return _impl_.twist_cov_;
}
inline ::dtproto::geometry_msgs::Matrix6d* OdomWithCov::mutable_twist_cov() {
  ::dtproto::geometry_msgs::Matrix6d* _msg = _internal_mutable_twist_cov();
  // @@protoc_insertion_point(field_mutable:dtproto.nav_msgs.OdomWithCov.twist_cov)
  return _msg;
}
inline void OdomWithCov::set_allocated_twist_cov(::dtproto::geometry_msgs::Matrix6d* twist_cov) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.twist_cov_);
  }
  if (twist_cov) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_cov));
    if (message_arena != submessage_arena) {
      twist_cov = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist_cov, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.twist_cov_ = twist_cov;
  // @@protoc_insertion_point(field_set_allocated:dtproto.nav_msgs.OdomWithCov.twist_cov)
}

// -------------------------------------------------------------------

// OdomWithCovTimeStamped

// .dtproto.std_msgs.Header header = 1;
inline bool OdomWithCovTimeStamped::_internal_has_header() const {
  return this != internal_default_instance() && _impl_.header_ != nullptr;
}
inline bool OdomWithCovTimeStamped::has_header() const {
  return _internal_has_header();
}
inline const ::dtproto::std_msgs::Header& OdomWithCovTimeStamped::_internal_header() const {
  const ::dtproto::std_msgs::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::std_msgs::Header&>(
      ::dtproto::std_msgs::_Header_default_instance_);
}
inline const ::dtproto::std_msgs::Header& OdomWithCovTimeStamped::header() const {
  // @@protoc_insertion_point(field_get:dtproto.nav_msgs.OdomWithCovTimeStamped.header)
  return _internal_header();
}
inline void OdomWithCovTimeStamped::unsafe_arena_set_allocated_header(
    ::dtproto::std_msgs::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.nav_msgs.OdomWithCovTimeStamped.header)
}
inline ::dtproto::std_msgs::Header* OdomWithCovTimeStamped::release_header() {
  
  ::dtproto::std_msgs::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::std_msgs::Header* OdomWithCovTimeStamped::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:dtproto.nav_msgs.OdomWithCovTimeStamped.header)
  
  ::dtproto::std_msgs::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::dtproto::std_msgs::Header* OdomWithCovTimeStamped::_internal_mutable_header() {
  
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::std_msgs::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::dtproto::std_msgs::Header* OdomWithCovTimeStamped::mutable_header() {
  ::dtproto::std_msgs::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:dtproto.nav_msgs.OdomWithCovTimeStamped.header)
  return _msg;
}
inline void OdomWithCovTimeStamped::set_allocated_header(::dtproto::std_msgs::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:dtproto.nav_msgs.OdomWithCovTimeStamped.header)
}

// .dtproto.nav_msgs.OdomWithCov odom = 2;
inline bool OdomWithCovTimeStamped::_internal_has_odom() const {
  return this != internal_default_instance() && _impl_.odom_ != nullptr;
}
inline bool OdomWithCovTimeStamped::has_odom() const {
  return _internal_has_odom();
}
inline void OdomWithCovTimeStamped::clear_odom() {
  if (GetArenaForAllocation() == nullptr && _impl_.odom_ != nullptr) {
    delete _impl_.odom_;
  }
  _impl_.odom_ = nullptr;
}
inline const ::dtproto::nav_msgs::OdomWithCov& OdomWithCovTimeStamped::_internal_odom() const {
  const ::dtproto::nav_msgs::OdomWithCov* p = _impl_.odom_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::nav_msgs::OdomWithCov&>(
      ::dtproto::nav_msgs::_OdomWithCov_default_instance_);
}
inline const ::dtproto::nav_msgs::OdomWithCov& OdomWithCovTimeStamped::odom() const {
  // @@protoc_insertion_point(field_get:dtproto.nav_msgs.OdomWithCovTimeStamped.odom)
  return _internal_odom();
}
inline void OdomWithCovTimeStamped::unsafe_arena_set_allocated_odom(
    ::dtproto::nav_msgs::OdomWithCov* odom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.odom_);
  }
  _impl_.odom_ = odom;
  if (odom) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.nav_msgs.OdomWithCovTimeStamped.odom)
}
inline ::dtproto::nav_msgs::OdomWithCov* OdomWithCovTimeStamped::release_odom() {
  
  ::dtproto::nav_msgs::OdomWithCov* temp = _impl_.odom_;
  _impl_.odom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::nav_msgs::OdomWithCov* OdomWithCovTimeStamped::unsafe_arena_release_odom() {
  // @@protoc_insertion_point(field_release:dtproto.nav_msgs.OdomWithCovTimeStamped.odom)
  
  ::dtproto::nav_msgs::OdomWithCov* temp = _impl_.odom_;
  _impl_.odom_ = nullptr;
  return temp;
}
inline ::dtproto::nav_msgs::OdomWithCov* OdomWithCovTimeStamped::_internal_mutable_odom() {
  
  if (_impl_.odom_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::nav_msgs::OdomWithCov>(GetArenaForAllocation());
    _impl_.odom_ = p;
  }
  return _impl_.odom_;
}
inline ::dtproto::nav_msgs::OdomWithCov* OdomWithCovTimeStamped::mutable_odom() {
  ::dtproto::nav_msgs::OdomWithCov* _msg = _internal_mutable_odom();
  // @@protoc_insertion_point(field_mutable:dtproto.nav_msgs.OdomWithCovTimeStamped.odom)
  return _msg;
}
inline void OdomWithCovTimeStamped::set_allocated_odom(::dtproto::nav_msgs::OdomWithCov* odom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.odom_;
  }
  if (odom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(odom);
    if (message_arena != submessage_arena) {
      odom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odom, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.odom_ = odom;
  // @@protoc_insertion_point(field_set_allocated:dtproto.nav_msgs.OdomWithCovTimeStamped.odom)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nav_msgs
}  // namespace dtproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dtProto_2fnav_5fmsgs_2fOdom_2eproto
