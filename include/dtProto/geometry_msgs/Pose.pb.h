// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtProto/geometry_msgs/Pose.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dtProto_2fgeometry_5fmsgs_2fPose_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dtProto_2fgeometry_5fmsgs_2fPose_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dtProto/geometry_msgs/Point.pb.h"
#include "dtProto/geometry_msgs/Orientation.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dtProto_2fgeometry_5fmsgs_2fPose_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dtProto_2fgeometry_5fmsgs_2fPose_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dtProto_2fgeometry_5fmsgs_2fPose_2eproto;
namespace dtproto {
namespace geometry_msgs {
class Pose2d;
struct Pose2dDefaultTypeInternal;
extern Pose2dDefaultTypeInternal _Pose2d_default_instance_;
class Pose3d;
struct Pose3dDefaultTypeInternal;
extern Pose3dDefaultTypeInternal _Pose3d_default_instance_;
}  // namespace geometry_msgs
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> ::dtproto::geometry_msgs::Pose2d* Arena::CreateMaybeMessage<::dtproto::geometry_msgs::Pose2d>(Arena*);
template<> ::dtproto::geometry_msgs::Pose3d* Arena::CreateMaybeMessage<::dtproto::geometry_msgs::Pose3d>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dtproto {
namespace geometry_msgs {

// ===================================================================

class Pose2d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.geometry_msgs.Pose2d) */ {
 public:
  inline Pose2d() : Pose2d(nullptr) {}
  ~Pose2d() override;
  explicit PROTOBUF_CONSTEXPR Pose2d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose2d(const Pose2d& from);
  Pose2d(Pose2d&& from) noexcept
    : Pose2d() {
    *this = ::std::move(from);
  }

  inline Pose2d& operator=(const Pose2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose2d& operator=(Pose2d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose2d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose2d* internal_default_instance() {
    return reinterpret_cast<const Pose2d*>(
               &_Pose2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pose2d& a, Pose2d& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose2d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pose2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pose2d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pose2d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pose2d& from) {
    Pose2d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose2d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.geometry_msgs.Pose2d";
  }
  protected:
  explicit Pose2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kHeadingFieldNumber = 2,
  };
  // .dtproto.geometry_msgs.Point2d position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::dtproto::geometry_msgs::Point2d& position() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point2d* release_position();
  ::dtproto::geometry_msgs::Point2d* mutable_position();
  void set_allocated_position(::dtproto::geometry_msgs::Point2d* position);
  private:
  const ::dtproto::geometry_msgs::Point2d& _internal_position() const;
  ::dtproto::geometry_msgs::Point2d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::dtproto::geometry_msgs::Point2d* position);
  ::dtproto::geometry_msgs::Point2d* unsafe_arena_release_position();

  // double heading = 2;
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.geometry_msgs.Pose2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dtproto::geometry_msgs::Point2d* position_;
    double heading_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fgeometry_5fmsgs_2fPose_2eproto;
};
// -------------------------------------------------------------------

class Pose3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.geometry_msgs.Pose3d) */ {
 public:
  inline Pose3d() : Pose3d(nullptr) {}
  ~Pose3d() override;
  explicit PROTOBUF_CONSTEXPR Pose3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose3d(const Pose3d& from);
  Pose3d(Pose3d&& from) noexcept
    : Pose3d() {
    *this = ::std::move(from);
  }

  inline Pose3d& operator=(const Pose3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose3d& operator=(Pose3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose3d* internal_default_instance() {
    return reinterpret_cast<const Pose3d*>(
               &_Pose3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Pose3d& a, Pose3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pose3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pose3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pose3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Pose3d& from) {
    Pose3d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.geometry_msgs.Pose3d";
  }
  protected:
  explicit Pose3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .dtproto.geometry_msgs.Point3d position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::dtproto::geometry_msgs::Point3d& position() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_position();
  ::dtproto::geometry_msgs::Point3d* mutable_position();
  void set_allocated_position(::dtproto::geometry_msgs::Point3d* position);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_position() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::dtproto::geometry_msgs::Point3d* position);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_position();

  // .dtproto.geometry_msgs.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::dtproto::geometry_msgs::Quaternion& orientation() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Quaternion* release_orientation();
  ::dtproto::geometry_msgs::Quaternion* mutable_orientation();
  void set_allocated_orientation(::dtproto::geometry_msgs::Quaternion* orientation);
  private:
  const ::dtproto::geometry_msgs::Quaternion& _internal_orientation() const;
  ::dtproto::geometry_msgs::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::dtproto::geometry_msgs::Quaternion* orientation);
  ::dtproto::geometry_msgs::Quaternion* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:dtproto.geometry_msgs.Pose3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::dtproto::geometry_msgs::Point3d* position_;
    ::dtproto::geometry_msgs::Quaternion* orientation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fgeometry_5fmsgs_2fPose_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose2d

// .dtproto.geometry_msgs.Point2d position = 1;
inline bool Pose2d::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Pose2d::has_position() const {
  return _internal_has_position();
}
inline const ::dtproto::geometry_msgs::Point2d& Pose2d::_internal_position() const {
  const ::dtproto::geometry_msgs::Point2d* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point2d&>(
      ::dtproto::geometry_msgs::_Point2d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point2d& Pose2d::position() const {
  // @@protoc_insertion_point(field_get:dtproto.geometry_msgs.Pose2d.position)
  return _internal_position();
}
inline void Pose2d::unsafe_arena_set_allocated_position(
    ::dtproto::geometry_msgs::Point2d* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.geometry_msgs.Pose2d.position)
}
inline ::dtproto::geometry_msgs::Point2d* Pose2d::release_position() {
  
  ::dtproto::geometry_msgs::Point2d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point2d* Pose2d::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:dtproto.geometry_msgs.Pose2d.position)
  
  ::dtproto::geometry_msgs::Point2d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point2d* Pose2d::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point2d>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::dtproto::geometry_msgs::Point2d* Pose2d::mutable_position() {
  ::dtproto::geometry_msgs::Point2d* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:dtproto.geometry_msgs.Pose2d.position)
  return _msg;
}
inline void Pose2d::set_allocated_position(::dtproto::geometry_msgs::Point2d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:dtproto.geometry_msgs.Pose2d.position)
}

// double heading = 2;
inline void Pose2d::clear_heading() {
  _impl_.heading_ = 0;
}
inline double Pose2d::_internal_heading() const {
  return _impl_.heading_;
}
inline double Pose2d::heading() const {
  // @@protoc_insertion_point(field_get:dtproto.geometry_msgs.Pose2d.heading)
  return _internal_heading();
}
inline void Pose2d::_internal_set_heading(double value) {
  
  _impl_.heading_ = value;
}
inline void Pose2d::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:dtproto.geometry_msgs.Pose2d.heading)
}

// -------------------------------------------------------------------

// Pose3d

// .dtproto.geometry_msgs.Point3d position = 1;
inline bool Pose3d::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool Pose3d::has_position() const {
  return _internal_has_position();
}
inline const ::dtproto::geometry_msgs::Point3d& Pose3d::_internal_position() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& Pose3d::position() const {
  // @@protoc_insertion_point(field_get:dtproto.geometry_msgs.Pose3d.position)
  return _internal_position();
}
inline void Pose3d::unsafe_arena_set_allocated_position(
    ::dtproto::geometry_msgs::Point3d* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.geometry_msgs.Pose3d.position)
}
inline ::dtproto::geometry_msgs::Point3d* Pose3d::release_position() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* Pose3d::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:dtproto.geometry_msgs.Pose3d.position)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* Pose3d::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::dtproto::geometry_msgs::Point3d* Pose3d::mutable_position() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:dtproto.geometry_msgs.Pose3d.position)
  return _msg;
}
inline void Pose3d::set_allocated_position(::dtproto::geometry_msgs::Point3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:dtproto.geometry_msgs.Pose3d.position)
}

// .dtproto.geometry_msgs.Quaternion orientation = 2;
inline bool Pose3d::_internal_has_orientation() const {
  return this != internal_default_instance() && _impl_.orientation_ != nullptr;
}
inline bool Pose3d::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::dtproto::geometry_msgs::Quaternion& Pose3d::_internal_orientation() const {
  const ::dtproto::geometry_msgs::Quaternion* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Quaternion&>(
      ::dtproto::geometry_msgs::_Quaternion_default_instance_);
}
inline const ::dtproto::geometry_msgs::Quaternion& Pose3d::orientation() const {
  // @@protoc_insertion_point(field_get:dtproto.geometry_msgs.Pose3d.orientation)
  return _internal_orientation();
}
inline void Pose3d::unsafe_arena_set_allocated_orientation(
    ::dtproto::geometry_msgs::Quaternion* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.geometry_msgs.Pose3d.orientation)
}
inline ::dtproto::geometry_msgs::Quaternion* Pose3d::release_orientation() {
  
  ::dtproto::geometry_msgs::Quaternion* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Quaternion* Pose3d::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:dtproto.geometry_msgs.Pose3d.orientation)
  
  ::dtproto::geometry_msgs::Quaternion* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Quaternion* Pose3d::_internal_mutable_orientation() {
  
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Quaternion>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::dtproto::geometry_msgs::Quaternion* Pose3d::mutable_orientation() {
  ::dtproto::geometry_msgs::Quaternion* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:dtproto.geometry_msgs.Pose3d.orientation)
  return _msg;
}
inline void Pose3d::set_allocated_orientation(::dtproto::geometry_msgs::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:dtproto.geometry_msgs.Pose3d.orientation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace geometry_msgs
}  // namespace dtproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dtProto_2fgeometry_5fmsgs_2fPose_2eproto
