// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtProto/geometry_msgs/Polygon.proto

#include "dtProto/geometry_msgs/Polygon.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dtproto {
namespace geometry_msgs {
PROTOBUF_CONSTEXPR Polygon2d::Polygon2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertex_)*/{}
  , /*decltype(_impl_.center_)*/nullptr
  , /*decltype(_impl_.normal_)*/nullptr
  , /*decltype(_impl_.vertex_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Polygon2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Polygon2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Polygon2dDefaultTypeInternal() {}
  union {
    Polygon2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Polygon2dDefaultTypeInternal _Polygon2d_default_instance_;
PROTOBUF_CONSTEXPR Polygon3d::Polygon3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertex_)*/{}
  , /*decltype(_impl_.center_)*/nullptr
  , /*decltype(_impl_.normal_)*/nullptr
  , /*decltype(_impl_.vertex_count_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Polygon3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Polygon3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Polygon3dDefaultTypeInternal() {}
  union {
    Polygon3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Polygon3dDefaultTypeInternal _Polygon3d_default_instance_;
}  // namespace geometry_msgs
}  // namespace dtproto
static ::_pb::Metadata file_level_metadata_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto = nullptr;

const uint32_t TableStruct_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Polygon2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Polygon2d, _impl_.center_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Polygon2d, _impl_.normal_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Polygon2d, _impl_.vertex_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Polygon2d, _impl_.vertex_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Polygon3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Polygon3d, _impl_.center_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Polygon3d, _impl_.normal_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Polygon3d, _impl_.vertex_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Polygon3d, _impl_.vertex_count_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dtproto::geometry_msgs::Polygon2d)},
  { 10, -1, -1, sizeof(::dtproto::geometry_msgs::Polygon3d)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dtproto::geometry_msgs::_Polygon2d_default_instance_._instance,
  &::dtproto::geometry_msgs::_Polygon3d_default_instance_._instance,
};

const char descriptor_table_protodef_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#dtProto/geometry_msgs/Polygon.proto\022\025d"
  "tproto.geometry_msgs\032!dtProto/geometry_m"
  "sgs/Point.proto\"\261\001\n\tPolygon2d\022.\n\006center\030"
  "\001 \001(\0132\036.dtproto.geometry_msgs.Point2d\022.\n"
  "\006normal\030\002 \001(\0132\036.dtproto.geometry_msgs.Po"
  "int2d\022.\n\006vertex\030\003 \003(\0132\036.dtproto.geometry"
  "_msgs.Point2d\022\024\n\014vertex_count\030\004 \001(\r\"\261\001\n\t"
  "Polygon3d\022.\n\006center\030\001 \001(\0132\036.dtproto.geom"
  "etry_msgs.Point3d\022.\n\006normal\030\002 \001(\0132\036.dtpr"
  "oto.geometry_msgs.Point3d\022.\n\006vertex\030\003 \003("
  "\0132\036.dtproto.geometry_msgs.Point3d\022\024\n\014ver"
  "tex_count\030\004 \001(\rb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto_deps[1] = {
  &::descriptor_table_dtProto_2fgeometry_5fmsgs_2fPoint_2eproto,
};
static ::_pbi::once_flag descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto = {
    false, false, 463, descriptor_table_protodef_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto,
    "dtProto/geometry_msgs/Polygon.proto",
    &descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto_once, descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto::offsets,
    file_level_metadata_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto, file_level_enum_descriptors_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto,
    file_level_service_descriptors_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto_getter() {
  return &descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto(&descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto);
namespace dtproto {
namespace geometry_msgs {

// ===================================================================

class Polygon2d::_Internal {
 public:
  static const ::dtproto::geometry_msgs::Point2d& center(const Polygon2d* msg);
  static const ::dtproto::geometry_msgs::Point2d& normal(const Polygon2d* msg);
};

const ::dtproto::geometry_msgs::Point2d&
Polygon2d::_Internal::center(const Polygon2d* msg) {
  return *msg->_impl_.center_;
}
const ::dtproto::geometry_msgs::Point2d&
Polygon2d::_Internal::normal(const Polygon2d* msg) {
  return *msg->_impl_.normal_;
}
void Polygon2d::clear_center() {
  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
}
void Polygon2d::clear_normal() {
  if (GetArenaForAllocation() == nullptr && _impl_.normal_ != nullptr) {
    delete _impl_.normal_;
  }
  _impl_.normal_ = nullptr;
}
void Polygon2d::clear_vertex() {
  _impl_.vertex_.Clear();
}
Polygon2d::Polygon2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Polygon2d)
}
Polygon2d::Polygon2d(const Polygon2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Polygon2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_){from._impl_.vertex_}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.normal_){nullptr}
    , decltype(_impl_.vertex_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    _this->_impl_.center_ = new ::dtproto::geometry_msgs::Point2d(*from._impl_.center_);
  }
  if (from._internal_has_normal()) {
    _this->_impl_.normal_ = new ::dtproto::geometry_msgs::Point2d(*from._impl_.normal_);
  }
  _this->_impl_.vertex_count_ = from._impl_.vertex_count_;
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Polygon2d)
}

inline void Polygon2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_){arena}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.normal_){nullptr}
    , decltype(_impl_.vertex_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Polygon2d::~Polygon2d() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Polygon2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Polygon2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertex_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.center_;
  if (this != internal_default_instance()) delete _impl_.normal_;
}

void Polygon2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Polygon2d::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Polygon2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertex_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.normal_ != nullptr) {
    delete _impl_.normal_;
  }
  _impl_.normal_ = nullptr;
  _impl_.vertex_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.geometry_msgs.Point2d center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point2d normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point2d vertex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 vertex_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Polygon2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Polygon2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.geometry_msgs.Point2d center = 1;
  if (this->_internal_has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point2d normal = 2;
  if (this->_internal_has_normal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::normal(this),
        _Internal::normal(this).GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point2d vertex = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertex_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertex(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 vertex_count = 4;
  if (this->_internal_vertex_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_vertex_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Polygon2d)
  return target;
}

size_t Polygon2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Polygon2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dtproto.geometry_msgs.Point2d vertex = 3;
  total_size += 1UL * this->_internal_vertex_size();
  for (const auto& msg : this->_impl_.vertex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dtproto.geometry_msgs.Point2d center = 1;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.center_);
  }

  // .dtproto.geometry_msgs.Point2d normal = 2;
  if (this->_internal_has_normal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.normal_);
  }

  // uint32 vertex_count = 4;
  if (this->_internal_vertex_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vertex_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polygon2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Polygon2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polygon2d::GetClassData() const { return &_class_data_; }


void Polygon2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Polygon2d*>(&to_msg);
  auto& from = static_cast<const Polygon2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Polygon2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertex_.MergeFrom(from._impl_.vertex_);
  if (from._internal_has_center()) {
    _this->_internal_mutable_center()->::dtproto::geometry_msgs::Point2d::MergeFrom(
        from._internal_center());
  }
  if (from._internal_has_normal()) {
    _this->_internal_mutable_normal()->::dtproto::geometry_msgs::Point2d::MergeFrom(
        from._internal_normal());
  }
  if (from._internal_vertex_count() != 0) {
    _this->_internal_set_vertex_count(from._internal_vertex_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polygon2d::CopyFrom(const Polygon2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Polygon2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon2d::IsInitialized() const {
  return true;
}

void Polygon2d::InternalSwap(Polygon2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertex_.InternalSwap(&other->_impl_.vertex_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Polygon2d, _impl_.vertex_count_)
      + sizeof(Polygon2d::_impl_.vertex_count_)
      - PROTOBUF_FIELD_OFFSET(Polygon2d, _impl_.center_)>(
          reinterpret_cast<char*>(&_impl_.center_),
          reinterpret_cast<char*>(&other->_impl_.center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto[0]);
}

// ===================================================================

class Polygon3d::_Internal {
 public:
  static const ::dtproto::geometry_msgs::Point3d& center(const Polygon3d* msg);
  static const ::dtproto::geometry_msgs::Point3d& normal(const Polygon3d* msg);
};

const ::dtproto::geometry_msgs::Point3d&
Polygon3d::_Internal::center(const Polygon3d* msg) {
  return *msg->_impl_.center_;
}
const ::dtproto::geometry_msgs::Point3d&
Polygon3d::_Internal::normal(const Polygon3d* msg) {
  return *msg->_impl_.normal_;
}
void Polygon3d::clear_center() {
  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
}
void Polygon3d::clear_normal() {
  if (GetArenaForAllocation() == nullptr && _impl_.normal_ != nullptr) {
    delete _impl_.normal_;
  }
  _impl_.normal_ = nullptr;
}
void Polygon3d::clear_vertex() {
  _impl_.vertex_.Clear();
}
Polygon3d::Polygon3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Polygon3d)
}
Polygon3d::Polygon3d(const Polygon3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Polygon3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_){from._impl_.vertex_}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.normal_){nullptr}
    , decltype(_impl_.vertex_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    _this->_impl_.center_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.center_);
  }
  if (from._internal_has_normal()) {
    _this->_impl_.normal_ = new ::dtproto::geometry_msgs::Point3d(*from._impl_.normal_);
  }
  _this->_impl_.vertex_count_ = from._impl_.vertex_count_;
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Polygon3d)
}

inline void Polygon3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_){arena}
    , decltype(_impl_.center_){nullptr}
    , decltype(_impl_.normal_){nullptr}
    , decltype(_impl_.vertex_count_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Polygon3d::~Polygon3d() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Polygon3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Polygon3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertex_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.center_;
  if (this != internal_default_instance()) delete _impl_.normal_;
}

void Polygon3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Polygon3d::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Polygon3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertex_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.center_ != nullptr) {
    delete _impl_.center_;
  }
  _impl_.center_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.normal_ != nullptr) {
    delete _impl_.normal_;
  }
  _impl_.normal_ = nullptr;
  _impl_.vertex_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .dtproto.geometry_msgs.Point3d center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .dtproto.geometry_msgs.Point3d normal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_normal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .dtproto.geometry_msgs.Point3d vertex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 vertex_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Polygon3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Polygon3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .dtproto.geometry_msgs.Point3d center = 1;
  if (this->_internal_has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // .dtproto.geometry_msgs.Point3d normal = 2;
  if (this->_internal_has_normal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::normal(this),
        _Internal::normal(this).GetCachedSize(), target, stream);
  }

  // repeated .dtproto.geometry_msgs.Point3d vertex = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertex_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertex(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint32 vertex_count = 4;
  if (this->_internal_vertex_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_vertex_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Polygon3d)
  return target;
}

size_t Polygon3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Polygon3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dtproto.geometry_msgs.Point3d vertex = 3;
  total_size += 1UL * this->_internal_vertex_size();
  for (const auto& msg : this->_impl_.vertex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .dtproto.geometry_msgs.Point3d center = 1;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.center_);
  }

  // .dtproto.geometry_msgs.Point3d normal = 2;
  if (this->_internal_has_normal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.normal_);
  }

  // uint32 vertex_count = 4;
  if (this->_internal_vertex_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_vertex_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Polygon3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Polygon3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Polygon3d::GetClassData() const { return &_class_data_; }


void Polygon3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Polygon3d*>(&to_msg);
  auto& from = static_cast<const Polygon3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Polygon3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertex_.MergeFrom(from._impl_.vertex_);
  if (from._internal_has_center()) {
    _this->_internal_mutable_center()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_center());
  }
  if (from._internal_has_normal()) {
    _this->_internal_mutable_normal()->::dtproto::geometry_msgs::Point3d::MergeFrom(
        from._internal_normal());
  }
  if (from._internal_vertex_count() != 0) {
    _this->_internal_set_vertex_count(from._internal_vertex_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Polygon3d::CopyFrom(const Polygon3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Polygon3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon3d::IsInitialized() const {
  return true;
}

void Polygon3d::InternalSwap(Polygon3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertex_.InternalSwap(&other->_impl_.vertex_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Polygon3d, _impl_.vertex_count_)
      + sizeof(Polygon3d::_impl_.vertex_count_)
      - PROTOBUF_FIELD_OFFSET(Polygon3d, _impl_.center_)>(
          reinterpret_cast<char*>(&_impl_.center_),
          reinterpret_cast<char*>(&other->_impl_.center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace geometry_msgs
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Polygon2d*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Polygon2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Polygon2d >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Polygon3d*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Polygon3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Polygon3d >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
