// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtProto/geometry_msgs/Matrix.proto

#include "dtProto/geometry_msgs/Matrix.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dtproto {
namespace geometry_msgs {
PROTOBUF_CONSTEXPR Matrix2d::Matrix2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a11_)*/0
  , /*decltype(_impl_.a12_)*/0
  , /*decltype(_impl_.a21_)*/0
  , /*decltype(_impl_.a22_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix2dDefaultTypeInternal() {}
  union {
    Matrix2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix2dDefaultTypeInternal _Matrix2d_default_instance_;
PROTOBUF_CONSTEXPR Matrix3d::Matrix3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a11_)*/0
  , /*decltype(_impl_.a12_)*/0
  , /*decltype(_impl_.a13_)*/0
  , /*decltype(_impl_.a21_)*/0
  , /*decltype(_impl_.a22_)*/0
  , /*decltype(_impl_.a23_)*/0
  , /*decltype(_impl_.a31_)*/0
  , /*decltype(_impl_.a32_)*/0
  , /*decltype(_impl_.a33_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix3dDefaultTypeInternal() {}
  union {
    Matrix3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix3dDefaultTypeInternal _Matrix3d_default_instance_;
PROTOBUF_CONSTEXPR Matrix4d::Matrix4d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a11_)*/0
  , /*decltype(_impl_.a12_)*/0
  , /*decltype(_impl_.a13_)*/0
  , /*decltype(_impl_.a14_)*/0
  , /*decltype(_impl_.a21_)*/0
  , /*decltype(_impl_.a22_)*/0
  , /*decltype(_impl_.a23_)*/0
  , /*decltype(_impl_.a24_)*/0
  , /*decltype(_impl_.a31_)*/0
  , /*decltype(_impl_.a32_)*/0
  , /*decltype(_impl_.a33_)*/0
  , /*decltype(_impl_.a34_)*/0
  , /*decltype(_impl_.a41_)*/0
  , /*decltype(_impl_.a42_)*/0
  , /*decltype(_impl_.a43_)*/0
  , /*decltype(_impl_.a44_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix4dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix4dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix4dDefaultTypeInternal() {}
  union {
    Matrix4d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix4dDefaultTypeInternal _Matrix4d_default_instance_;
PROTOBUF_CONSTEXPR Matrix6d::Matrix6d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a11_)*/0
  , /*decltype(_impl_.a12_)*/0
  , /*decltype(_impl_.a13_)*/0
  , /*decltype(_impl_.a14_)*/0
  , /*decltype(_impl_.a15_)*/0
  , /*decltype(_impl_.a16_)*/0
  , /*decltype(_impl_.a21_)*/0
  , /*decltype(_impl_.a22_)*/0
  , /*decltype(_impl_.a23_)*/0
  , /*decltype(_impl_.a24_)*/0
  , /*decltype(_impl_.a25_)*/0
  , /*decltype(_impl_.a26_)*/0
  , /*decltype(_impl_.a31_)*/0
  , /*decltype(_impl_.a32_)*/0
  , /*decltype(_impl_.a33_)*/0
  , /*decltype(_impl_.a34_)*/0
  , /*decltype(_impl_.a35_)*/0
  , /*decltype(_impl_.a36_)*/0
  , /*decltype(_impl_.a41_)*/0
  , /*decltype(_impl_.a42_)*/0
  , /*decltype(_impl_.a43_)*/0
  , /*decltype(_impl_.a44_)*/0
  , /*decltype(_impl_.a45_)*/0
  , /*decltype(_impl_.a46_)*/0
  , /*decltype(_impl_.a51_)*/0
  , /*decltype(_impl_.a52_)*/0
  , /*decltype(_impl_.a53_)*/0
  , /*decltype(_impl_.a54_)*/0
  , /*decltype(_impl_.a55_)*/0
  , /*decltype(_impl_.a56_)*/0
  , /*decltype(_impl_.a61_)*/0
  , /*decltype(_impl_.a62_)*/0
  , /*decltype(_impl_.a63_)*/0
  , /*decltype(_impl_.a64_)*/0
  , /*decltype(_impl_.a65_)*/0
  , /*decltype(_impl_.a66_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix6dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix6dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix6dDefaultTypeInternal() {}
  union {
    Matrix6d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix6dDefaultTypeInternal _Matrix6d_default_instance_;
PROTOBUF_CONSTEXPR Matrix2f::Matrix2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a11_)*/0
  , /*decltype(_impl_.a12_)*/0
  , /*decltype(_impl_.a21_)*/0
  , /*decltype(_impl_.a22_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix2fDefaultTypeInternal() {}
  union {
    Matrix2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix2fDefaultTypeInternal _Matrix2f_default_instance_;
PROTOBUF_CONSTEXPR Matrix3f::Matrix3f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a11_)*/0
  , /*decltype(_impl_.a12_)*/0
  , /*decltype(_impl_.a13_)*/0
  , /*decltype(_impl_.a21_)*/0
  , /*decltype(_impl_.a22_)*/0
  , /*decltype(_impl_.a23_)*/0
  , /*decltype(_impl_.a31_)*/0
  , /*decltype(_impl_.a32_)*/0
  , /*decltype(_impl_.a33_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix3fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix3fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix3fDefaultTypeInternal() {}
  union {
    Matrix3f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix3fDefaultTypeInternal _Matrix3f_default_instance_;
PROTOBUF_CONSTEXPR Matrix4f::Matrix4f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a11_)*/0
  , /*decltype(_impl_.a12_)*/0
  , /*decltype(_impl_.a13_)*/0
  , /*decltype(_impl_.a14_)*/0
  , /*decltype(_impl_.a21_)*/0
  , /*decltype(_impl_.a22_)*/0
  , /*decltype(_impl_.a23_)*/0
  , /*decltype(_impl_.a24_)*/0
  , /*decltype(_impl_.a31_)*/0
  , /*decltype(_impl_.a32_)*/0
  , /*decltype(_impl_.a33_)*/0
  , /*decltype(_impl_.a34_)*/0
  , /*decltype(_impl_.a41_)*/0
  , /*decltype(_impl_.a42_)*/0
  , /*decltype(_impl_.a43_)*/0
  , /*decltype(_impl_.a44_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix4fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix4fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix4fDefaultTypeInternal() {}
  union {
    Matrix4f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix4fDefaultTypeInternal _Matrix4f_default_instance_;
PROTOBUF_CONSTEXPR Matrix6f::Matrix6f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a11_)*/0
  , /*decltype(_impl_.a12_)*/0
  , /*decltype(_impl_.a13_)*/0
  , /*decltype(_impl_.a14_)*/0
  , /*decltype(_impl_.a15_)*/0
  , /*decltype(_impl_.a16_)*/0
  , /*decltype(_impl_.a21_)*/0
  , /*decltype(_impl_.a22_)*/0
  , /*decltype(_impl_.a23_)*/0
  , /*decltype(_impl_.a24_)*/0
  , /*decltype(_impl_.a25_)*/0
  , /*decltype(_impl_.a26_)*/0
  , /*decltype(_impl_.a31_)*/0
  , /*decltype(_impl_.a32_)*/0
  , /*decltype(_impl_.a33_)*/0
  , /*decltype(_impl_.a34_)*/0
  , /*decltype(_impl_.a35_)*/0
  , /*decltype(_impl_.a36_)*/0
  , /*decltype(_impl_.a41_)*/0
  , /*decltype(_impl_.a42_)*/0
  , /*decltype(_impl_.a43_)*/0
  , /*decltype(_impl_.a44_)*/0
  , /*decltype(_impl_.a45_)*/0
  , /*decltype(_impl_.a46_)*/0
  , /*decltype(_impl_.a51_)*/0
  , /*decltype(_impl_.a52_)*/0
  , /*decltype(_impl_.a53_)*/0
  , /*decltype(_impl_.a54_)*/0
  , /*decltype(_impl_.a55_)*/0
  , /*decltype(_impl_.a56_)*/0
  , /*decltype(_impl_.a61_)*/0
  , /*decltype(_impl_.a62_)*/0
  , /*decltype(_impl_.a63_)*/0
  , /*decltype(_impl_.a64_)*/0
  , /*decltype(_impl_.a65_)*/0
  , /*decltype(_impl_.a66_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Matrix6fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Matrix6fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Matrix6fDefaultTypeInternal() {}
  union {
    Matrix6f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Matrix6fDefaultTypeInternal _Matrix6f_default_instance_;
}  // namespace geometry_msgs
}  // namespace dtproto
static ::_pb::Metadata file_level_metadata_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto = nullptr;

const uint32_t TableStruct_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix2d, _impl_.a11_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix2d, _impl_.a12_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix2d, _impl_.a21_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix2d, _impl_.a22_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3d, _impl_.a11_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3d, _impl_.a12_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3d, _impl_.a13_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3d, _impl_.a21_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3d, _impl_.a22_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3d, _impl_.a23_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3d, _impl_.a31_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3d, _impl_.a32_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3d, _impl_.a33_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a11_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a12_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a13_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a14_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a21_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a22_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a23_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a24_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a31_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a32_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a33_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a34_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a41_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a42_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a43_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4d, _impl_.a44_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a11_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a12_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a13_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a14_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a15_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a16_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a21_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a22_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a23_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a24_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a25_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a26_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a31_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a32_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a33_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a34_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a35_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a36_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a41_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a42_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a43_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a44_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a45_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a46_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a51_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a52_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a53_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a54_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a55_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a56_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a61_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a62_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a63_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a64_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a65_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6d, _impl_.a66_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix2f, _impl_.a11_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix2f, _impl_.a12_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix2f, _impl_.a21_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix2f, _impl_.a22_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3f, _impl_.a11_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3f, _impl_.a12_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3f, _impl_.a13_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3f, _impl_.a21_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3f, _impl_.a22_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3f, _impl_.a23_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3f, _impl_.a31_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3f, _impl_.a32_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix3f, _impl_.a33_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a11_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a12_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a13_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a14_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a21_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a22_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a23_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a24_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a31_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a32_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a33_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a34_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a41_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a42_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a43_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix4f, _impl_.a44_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a11_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a12_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a13_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a14_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a15_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a16_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a21_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a22_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a23_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a24_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a25_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a26_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a31_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a32_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a33_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a34_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a35_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a36_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a41_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a42_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a43_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a44_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a45_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a46_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a51_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a52_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a53_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a54_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a55_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a56_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a61_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a62_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a63_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a64_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a65_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Matrix6f, _impl_.a66_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dtproto::geometry_msgs::Matrix2d)},
  { 10, -1, -1, sizeof(::dtproto::geometry_msgs::Matrix3d)},
  { 25, -1, -1, sizeof(::dtproto::geometry_msgs::Matrix4d)},
  { 47, -1, -1, sizeof(::dtproto::geometry_msgs::Matrix6d)},
  { 89, -1, -1, sizeof(::dtproto::geometry_msgs::Matrix2f)},
  { 99, -1, -1, sizeof(::dtproto::geometry_msgs::Matrix3f)},
  { 114, -1, -1, sizeof(::dtproto::geometry_msgs::Matrix4f)},
  { 136, -1, -1, sizeof(::dtproto::geometry_msgs::Matrix6f)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dtproto::geometry_msgs::_Matrix2d_default_instance_._instance,
  &::dtproto::geometry_msgs::_Matrix3d_default_instance_._instance,
  &::dtproto::geometry_msgs::_Matrix4d_default_instance_._instance,
  &::dtproto::geometry_msgs::_Matrix6d_default_instance_._instance,
  &::dtproto::geometry_msgs::_Matrix2f_default_instance_._instance,
  &::dtproto::geometry_msgs::_Matrix3f_default_instance_._instance,
  &::dtproto::geometry_msgs::_Matrix4f_default_instance_._instance,
  &::dtproto::geometry_msgs::_Matrix6f_default_instance_._instance,
};

const char descriptor_table_protodef_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"dtProto/geometry_msgs/Matrix.proto\022\025dt"
  "proto.geometry_msgs\">\n\010Matrix2d\022\013\n\003a11\030\001"
  " \001(\001\022\013\n\003a12\030\002 \001(\001\022\013\n\003a21\030\003 \001(\001\022\013\n\003a22\030\004 "
  "\001(\001\"\177\n\010Matrix3d\022\013\n\003a11\030\001 \001(\001\022\013\n\003a12\030\002 \001("
  "\001\022\013\n\003a13\030\003 \001(\001\022\013\n\003a21\030\004 \001(\001\022\013\n\003a22\030\005 \001(\001"
  "\022\013\n\003a23\030\006 \001(\001\022\013\n\003a31\030\007 \001(\001\022\013\n\003a32\030\010 \001(\001\022"
  "\013\n\003a33\030\t \001(\001\"\332\001\n\010Matrix4d\022\013\n\003a11\030\001 \001(\001\022\013"
  "\n\003a12\030\002 \001(\001\022\013\n\003a13\030\003 \001(\001\022\013\n\003a14\030\004 \001(\001\022\013\n"
  "\003a21\030\005 \001(\001\022\013\n\003a22\030\006 \001(\001\022\013\n\003a23\030\007 \001(\001\022\013\n\003"
  "a24\030\010 \001(\001\022\013\n\003a31\030\t \001(\001\022\013\n\003a32\030\n \001(\001\022\013\n\003a"
  "33\030\013 \001(\001\022\013\n\003a34\030\014 \001(\001\022\013\n\003a41\030\r \001(\001\022\013\n\003a4"
  "2\030\016 \001(\001\022\013\n\003a43\030\017 \001(\001\022\013\n\003a44\030\020 \001(\001\"\336\003\n\010Ma"
  "trix6d\022\013\n\003a11\030\001 \001(\001\022\013\n\003a12\030\002 \001(\001\022\013\n\003a13\030"
  "\003 \001(\001\022\013\n\003a14\030\004 \001(\001\022\013\n\003a15\030\005 \001(\001\022\013\n\003a16\030\006"
  " \001(\001\022\013\n\003a21\030\007 \001(\001\022\013\n\003a22\030\010 \001(\001\022\013\n\003a23\030\t "
  "\001(\001\022\013\n\003a24\030\n \001(\001\022\013\n\003a25\030\013 \001(\001\022\013\n\003a26\030\014 \001"
  "(\001\022\013\n\003a31\030\r \001(\001\022\013\n\003a32\030\016 \001(\001\022\013\n\003a33\030\017 \001("
  "\001\022\013\n\003a34\030\020 \001(\001\022\013\n\003a35\030\021 \001(\001\022\013\n\003a36\030\022 \001(\001"
  "\022\013\n\003a41\030\023 \001(\001\022\013\n\003a42\030\024 \001(\001\022\013\n\003a43\030\025 \001(\001\022"
  "\013\n\003a44\030\026 \001(\001\022\013\n\003a45\030\027 \001(\001\022\013\n\003a46\030\030 \001(\001\022\013"
  "\n\003a51\030\031 \001(\001\022\013\n\003a52\030\032 \001(\001\022\013\n\003a53\030\033 \001(\001\022\013\n"
  "\003a54\030\034 \001(\001\022\013\n\003a55\030\035 \001(\001\022\013\n\003a56\030\036 \001(\001\022\013\n\003"
  "a61\030\037 \001(\001\022\013\n\003a62\030  \001(\001\022\013\n\003a63\030! \001(\001\022\013\n\003a"
  "64\030\" \001(\001\022\013\n\003a65\030# \001(\001\022\013\n\003a66\030$ \001(\001\">\n\010Ma"
  "trix2f\022\013\n\003a11\030\001 \001(\002\022\013\n\003a12\030\002 \001(\002\022\013\n\003a21\030"
  "\003 \001(\002\022\013\n\003a22\030\004 \001(\002\"\177\n\010Matrix3f\022\013\n\003a11\030\001 "
  "\001(\002\022\013\n\003a12\030\002 \001(\002\022\013\n\003a13\030\003 \001(\002\022\013\n\003a21\030\004 \001"
  "(\002\022\013\n\003a22\030\005 \001(\002\022\013\n\003a23\030\006 \001(\002\022\013\n\003a31\030\007 \001("
  "\002\022\013\n\003a32\030\010 \001(\002\022\013\n\003a33\030\t \001(\002\"\332\001\n\010Matrix4f"
  "\022\013\n\003a11\030\001 \001(\002\022\013\n\003a12\030\002 \001(\002\022\013\n\003a13\030\003 \001(\002\022"
  "\013\n\003a14\030\004 \001(\002\022\013\n\003a21\030\005 \001(\002\022\013\n\003a22\030\006 \001(\002\022\013"
  "\n\003a23\030\007 \001(\002\022\013\n\003a24\030\010 \001(\002\022\013\n\003a31\030\t \001(\002\022\013\n"
  "\003a32\030\n \001(\002\022\013\n\003a33\030\013 \001(\002\022\013\n\003a34\030\014 \001(\002\022\013\n\003"
  "a41\030\r \001(\002\022\013\n\003a42\030\016 \001(\002\022\013\n\003a43\030\017 \001(\002\022\013\n\003a"
  "44\030\020 \001(\002\"\336\003\n\010Matrix6f\022\013\n\003a11\030\001 \001(\002\022\013\n\003a1"
  "2\030\002 \001(\002\022\013\n\003a13\030\003 \001(\002\022\013\n\003a14\030\004 \001(\002\022\013\n\003a15"
  "\030\005 \001(\002\022\013\n\003a16\030\006 \001(\002\022\013\n\003a21\030\007 \001(\002\022\013\n\003a22\030"
  "\010 \001(\002\022\013\n\003a23\030\t \001(\002\022\013\n\003a24\030\n \001(\002\022\013\n\003a25\030\013"
  " \001(\002\022\013\n\003a26\030\014 \001(\002\022\013\n\003a31\030\r \001(\002\022\013\n\003a32\030\016 "
  "\001(\002\022\013\n\003a33\030\017 \001(\002\022\013\n\003a34\030\020 \001(\002\022\013\n\003a35\030\021 \001"
  "(\002\022\013\n\003a36\030\022 \001(\002\022\013\n\003a41\030\023 \001(\002\022\013\n\003a42\030\024 \001("
  "\002\022\013\n\003a43\030\025 \001(\002\022\013\n\003a44\030\026 \001(\002\022\013\n\003a45\030\027 \001(\002"
  "\022\013\n\003a46\030\030 \001(\002\022\013\n\003a51\030\031 \001(\002\022\013\n\003a52\030\032 \001(\002\022"
  "\013\n\003a53\030\033 \001(\002\022\013\n\003a54\030\034 \001(\002\022\013\n\003a55\030\035 \001(\002\022\013"
  "\n\003a56\030\036 \001(\002\022\013\n\003a61\030\037 \001(\002\022\013\n\003a62\030  \001(\002\022\013\n"
  "\003a63\030! \001(\002\022\013\n\003a64\030\" \001(\002\022\013\n\003a65\030# \001(\002\022\013\n\003"
  "a66\030$ \001(\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto = {
    false, false, 1857, descriptor_table_protodef_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto,
    "dtProto/geometry_msgs/Matrix.proto",
    &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto::offsets,
    file_level_metadata_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto, file_level_enum_descriptors_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto,
    file_level_service_descriptors_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_getter() {
  return &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto(&descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto);
namespace dtproto {
namespace geometry_msgs {

// ===================================================================

class Matrix2d::_Internal {
 public:
};

Matrix2d::Matrix2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Matrix2d)
}
Matrix2d::Matrix2d(const Matrix2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){}
    , decltype(_impl_.a12_){}
    , decltype(_impl_.a21_){}
    , decltype(_impl_.a22_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a11_, &from._impl_.a11_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a22_) -
    reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a22_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Matrix2d)
}

inline void Matrix2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){0}
    , decltype(_impl_.a12_){0}
    , decltype(_impl_.a21_){0}
    , decltype(_impl_.a22_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix2d::~Matrix2d() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Matrix2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Matrix2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix2d::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Matrix2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a22_) -
      reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a22_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double a11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.a11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.a12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a21 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.a21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a22 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.a22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Matrix2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Matrix2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double a11 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = this->_internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_a11(), target);
  }

  // double a12 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = this->_internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_a12(), target);
  }

  // double a21 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = this->_internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_a21(), target);
  }

  // double a22 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = this->_internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_a22(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Matrix2d)
  return target;
}

size_t Matrix2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Matrix2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double a11 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = this->_internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    total_size += 1 + 8;
  }

  // double a12 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = this->_internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    total_size += 1 + 8;
  }

  // double a21 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = this->_internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    total_size += 1 + 8;
  }

  // double a22 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = this->_internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix2d::GetClassData() const { return &_class_data_; }


void Matrix2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix2d*>(&to_msg);
  auto& from = static_cast<const Matrix2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Matrix2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = from._internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    _this->_internal_set_a11(from._internal_a11());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = from._internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    _this->_internal_set_a12(from._internal_a12());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = from._internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    _this->_internal_set_a21(from._internal_a21());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = from._internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    _this->_internal_set_a22(from._internal_a22());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix2d::CopyFrom(const Matrix2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Matrix2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix2d::IsInitialized() const {
  return true;
}

void Matrix2d::InternalSwap(Matrix2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix2d, _impl_.a22_)
      + sizeof(Matrix2d::_impl_.a22_)
      - PROTOBUF_FIELD_OFFSET(Matrix2d, _impl_.a11_)>(
          reinterpret_cast<char*>(&_impl_.a11_),
          reinterpret_cast<char*>(&other->_impl_.a11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto[0]);
}

// ===================================================================

class Matrix3d::_Internal {
 public:
};

Matrix3d::Matrix3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Matrix3d)
}
Matrix3d::Matrix3d(const Matrix3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){}
    , decltype(_impl_.a12_){}
    , decltype(_impl_.a13_){}
    , decltype(_impl_.a21_){}
    , decltype(_impl_.a22_){}
    , decltype(_impl_.a23_){}
    , decltype(_impl_.a31_){}
    , decltype(_impl_.a32_){}
    , decltype(_impl_.a33_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a11_, &from._impl_.a11_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a33_) -
    reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a33_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Matrix3d)
}

inline void Matrix3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){0}
    , decltype(_impl_.a12_){0}
    , decltype(_impl_.a13_){0}
    , decltype(_impl_.a21_){0}
    , decltype(_impl_.a22_){0}
    , decltype(_impl_.a23_){0}
    , decltype(_impl_.a31_){0}
    , decltype(_impl_.a32_){0}
    , decltype(_impl_.a33_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix3d::~Matrix3d() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Matrix3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Matrix3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix3d::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Matrix3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a33_) -
      reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a33_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double a11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.a11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.a12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a13 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.a13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a21 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.a21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a22 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.a22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a23 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.a23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a31 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.a31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a32 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.a32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a33 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.a33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Matrix3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Matrix3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double a11 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = this->_internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_a11(), target);
  }

  // double a12 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = this->_internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_a12(), target);
  }

  // double a13 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a13 = this->_internal_a13();
  uint64_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_a13(), target);
  }

  // double a21 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = this->_internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_a21(), target);
  }

  // double a22 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = this->_internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_a22(), target);
  }

  // double a23 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a23 = this->_internal_a23();
  uint64_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_a23(), target);
  }

  // double a31 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a31 = this->_internal_a31();
  uint64_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_a31(), target);
  }

  // double a32 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a32 = this->_internal_a32();
  uint64_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_a32(), target);
  }

  // double a33 = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a33 = this->_internal_a33();
  uint64_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_a33(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Matrix3d)
  return target;
}

size_t Matrix3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Matrix3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double a11 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = this->_internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    total_size += 1 + 8;
  }

  // double a12 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = this->_internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    total_size += 1 + 8;
  }

  // double a13 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a13 = this->_internal_a13();
  uint64_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    total_size += 1 + 8;
  }

  // double a21 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = this->_internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    total_size += 1 + 8;
  }

  // double a22 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = this->_internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    total_size += 1 + 8;
  }

  // double a23 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a23 = this->_internal_a23();
  uint64_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    total_size += 1 + 8;
  }

  // double a31 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a31 = this->_internal_a31();
  uint64_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    total_size += 1 + 8;
  }

  // double a32 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a32 = this->_internal_a32();
  uint64_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    total_size += 1 + 8;
  }

  // double a33 = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a33 = this->_internal_a33();
  uint64_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix3d::GetClassData() const { return &_class_data_; }


void Matrix3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix3d*>(&to_msg);
  auto& from = static_cast<const Matrix3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Matrix3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = from._internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    _this->_internal_set_a11(from._internal_a11());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = from._internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    _this->_internal_set_a12(from._internal_a12());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a13 = from._internal_a13();
  uint64_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    _this->_internal_set_a13(from._internal_a13());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = from._internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    _this->_internal_set_a21(from._internal_a21());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = from._internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    _this->_internal_set_a22(from._internal_a22());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a23 = from._internal_a23();
  uint64_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    _this->_internal_set_a23(from._internal_a23());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a31 = from._internal_a31();
  uint64_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    _this->_internal_set_a31(from._internal_a31());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a32 = from._internal_a32();
  uint64_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    _this->_internal_set_a32(from._internal_a32());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a33 = from._internal_a33();
  uint64_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    _this->_internal_set_a33(from._internal_a33());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix3d::CopyFrom(const Matrix3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Matrix3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix3d::IsInitialized() const {
  return true;
}

void Matrix3d::InternalSwap(Matrix3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix3d, _impl_.a33_)
      + sizeof(Matrix3d::_impl_.a33_)
      - PROTOBUF_FIELD_OFFSET(Matrix3d, _impl_.a11_)>(
          reinterpret_cast<char*>(&_impl_.a11_),
          reinterpret_cast<char*>(&other->_impl_.a11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto[1]);
}

// ===================================================================

class Matrix4d::_Internal {
 public:
};

Matrix4d::Matrix4d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Matrix4d)
}
Matrix4d::Matrix4d(const Matrix4d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix4d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){}
    , decltype(_impl_.a12_){}
    , decltype(_impl_.a13_){}
    , decltype(_impl_.a14_){}
    , decltype(_impl_.a21_){}
    , decltype(_impl_.a22_){}
    , decltype(_impl_.a23_){}
    , decltype(_impl_.a24_){}
    , decltype(_impl_.a31_){}
    , decltype(_impl_.a32_){}
    , decltype(_impl_.a33_){}
    , decltype(_impl_.a34_){}
    , decltype(_impl_.a41_){}
    , decltype(_impl_.a42_){}
    , decltype(_impl_.a43_){}
    , decltype(_impl_.a44_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a11_, &from._impl_.a11_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a44_) -
    reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a44_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Matrix4d)
}

inline void Matrix4d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){0}
    , decltype(_impl_.a12_){0}
    , decltype(_impl_.a13_){0}
    , decltype(_impl_.a14_){0}
    , decltype(_impl_.a21_){0}
    , decltype(_impl_.a22_){0}
    , decltype(_impl_.a23_){0}
    , decltype(_impl_.a24_){0}
    , decltype(_impl_.a31_){0}
    , decltype(_impl_.a32_){0}
    , decltype(_impl_.a33_){0}
    , decltype(_impl_.a34_){0}
    , decltype(_impl_.a41_){0}
    , decltype(_impl_.a42_){0}
    , decltype(_impl_.a43_){0}
    , decltype(_impl_.a44_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix4d::~Matrix4d() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Matrix4d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix4d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Matrix4d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix4d::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Matrix4d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a44_) -
      reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a44_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix4d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double a11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.a11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.a12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a13 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.a13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a14 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.a14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a21 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.a21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a22 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.a22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a23 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.a23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a24 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.a24_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a31 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.a31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.a32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a33 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.a33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a34 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.a34_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a41 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.a41_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a42 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.a42_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a43 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.a43_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a44 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.a44_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Matrix4d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Matrix4d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double a11 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = this->_internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_a11(), target);
  }

  // double a12 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = this->_internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_a12(), target);
  }

  // double a13 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a13 = this->_internal_a13();
  uint64_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_a13(), target);
  }

  // double a14 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a14 = this->_internal_a14();
  uint64_t raw_a14;
  memcpy(&raw_a14, &tmp_a14, sizeof(tmp_a14));
  if (raw_a14 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_a14(), target);
  }

  // double a21 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = this->_internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_a21(), target);
  }

  // double a22 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = this->_internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_a22(), target);
  }

  // double a23 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a23 = this->_internal_a23();
  uint64_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_a23(), target);
  }

  // double a24 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a24 = this->_internal_a24();
  uint64_t raw_a24;
  memcpy(&raw_a24, &tmp_a24, sizeof(tmp_a24));
  if (raw_a24 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_a24(), target);
  }

  // double a31 = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a31 = this->_internal_a31();
  uint64_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_a31(), target);
  }

  // double a32 = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a32 = this->_internal_a32();
  uint64_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_a32(), target);
  }

  // double a33 = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a33 = this->_internal_a33();
  uint64_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_a33(), target);
  }

  // double a34 = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a34 = this->_internal_a34();
  uint64_t raw_a34;
  memcpy(&raw_a34, &tmp_a34, sizeof(tmp_a34));
  if (raw_a34 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_a34(), target);
  }

  // double a41 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a41 = this->_internal_a41();
  uint64_t raw_a41;
  memcpy(&raw_a41, &tmp_a41, sizeof(tmp_a41));
  if (raw_a41 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_a41(), target);
  }

  // double a42 = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a42 = this->_internal_a42();
  uint64_t raw_a42;
  memcpy(&raw_a42, &tmp_a42, sizeof(tmp_a42));
  if (raw_a42 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_a42(), target);
  }

  // double a43 = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a43 = this->_internal_a43();
  uint64_t raw_a43;
  memcpy(&raw_a43, &tmp_a43, sizeof(tmp_a43));
  if (raw_a43 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_a43(), target);
  }

  // double a44 = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a44 = this->_internal_a44();
  uint64_t raw_a44;
  memcpy(&raw_a44, &tmp_a44, sizeof(tmp_a44));
  if (raw_a44 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_a44(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Matrix4d)
  return target;
}

size_t Matrix4d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Matrix4d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double a11 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = this->_internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    total_size += 1 + 8;
  }

  // double a12 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = this->_internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    total_size += 1 + 8;
  }

  // double a13 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a13 = this->_internal_a13();
  uint64_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    total_size += 1 + 8;
  }

  // double a14 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a14 = this->_internal_a14();
  uint64_t raw_a14;
  memcpy(&raw_a14, &tmp_a14, sizeof(tmp_a14));
  if (raw_a14 != 0) {
    total_size += 1 + 8;
  }

  // double a21 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = this->_internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    total_size += 1 + 8;
  }

  // double a22 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = this->_internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    total_size += 1 + 8;
  }

  // double a23 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a23 = this->_internal_a23();
  uint64_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    total_size += 1 + 8;
  }

  // double a24 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a24 = this->_internal_a24();
  uint64_t raw_a24;
  memcpy(&raw_a24, &tmp_a24, sizeof(tmp_a24));
  if (raw_a24 != 0) {
    total_size += 1 + 8;
  }

  // double a31 = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a31 = this->_internal_a31();
  uint64_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    total_size += 1 + 8;
  }

  // double a32 = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a32 = this->_internal_a32();
  uint64_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    total_size += 1 + 8;
  }

  // double a33 = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a33 = this->_internal_a33();
  uint64_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    total_size += 1 + 8;
  }

  // double a34 = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a34 = this->_internal_a34();
  uint64_t raw_a34;
  memcpy(&raw_a34, &tmp_a34, sizeof(tmp_a34));
  if (raw_a34 != 0) {
    total_size += 1 + 8;
  }

  // double a41 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a41 = this->_internal_a41();
  uint64_t raw_a41;
  memcpy(&raw_a41, &tmp_a41, sizeof(tmp_a41));
  if (raw_a41 != 0) {
    total_size += 1 + 8;
  }

  // double a42 = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a42 = this->_internal_a42();
  uint64_t raw_a42;
  memcpy(&raw_a42, &tmp_a42, sizeof(tmp_a42));
  if (raw_a42 != 0) {
    total_size += 1 + 8;
  }

  // double a43 = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a43 = this->_internal_a43();
  uint64_t raw_a43;
  memcpy(&raw_a43, &tmp_a43, sizeof(tmp_a43));
  if (raw_a43 != 0) {
    total_size += 1 + 8;
  }

  // double a44 = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a44 = this->_internal_a44();
  uint64_t raw_a44;
  memcpy(&raw_a44, &tmp_a44, sizeof(tmp_a44));
  if (raw_a44 != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix4d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix4d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix4d::GetClassData() const { return &_class_data_; }


void Matrix4d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix4d*>(&to_msg);
  auto& from = static_cast<const Matrix4d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Matrix4d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = from._internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    _this->_internal_set_a11(from._internal_a11());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = from._internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    _this->_internal_set_a12(from._internal_a12());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a13 = from._internal_a13();
  uint64_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    _this->_internal_set_a13(from._internal_a13());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a14 = from._internal_a14();
  uint64_t raw_a14;
  memcpy(&raw_a14, &tmp_a14, sizeof(tmp_a14));
  if (raw_a14 != 0) {
    _this->_internal_set_a14(from._internal_a14());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = from._internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    _this->_internal_set_a21(from._internal_a21());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = from._internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    _this->_internal_set_a22(from._internal_a22());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a23 = from._internal_a23();
  uint64_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    _this->_internal_set_a23(from._internal_a23());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a24 = from._internal_a24();
  uint64_t raw_a24;
  memcpy(&raw_a24, &tmp_a24, sizeof(tmp_a24));
  if (raw_a24 != 0) {
    _this->_internal_set_a24(from._internal_a24());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a31 = from._internal_a31();
  uint64_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    _this->_internal_set_a31(from._internal_a31());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a32 = from._internal_a32();
  uint64_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    _this->_internal_set_a32(from._internal_a32());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a33 = from._internal_a33();
  uint64_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    _this->_internal_set_a33(from._internal_a33());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a34 = from._internal_a34();
  uint64_t raw_a34;
  memcpy(&raw_a34, &tmp_a34, sizeof(tmp_a34));
  if (raw_a34 != 0) {
    _this->_internal_set_a34(from._internal_a34());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a41 = from._internal_a41();
  uint64_t raw_a41;
  memcpy(&raw_a41, &tmp_a41, sizeof(tmp_a41));
  if (raw_a41 != 0) {
    _this->_internal_set_a41(from._internal_a41());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a42 = from._internal_a42();
  uint64_t raw_a42;
  memcpy(&raw_a42, &tmp_a42, sizeof(tmp_a42));
  if (raw_a42 != 0) {
    _this->_internal_set_a42(from._internal_a42());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a43 = from._internal_a43();
  uint64_t raw_a43;
  memcpy(&raw_a43, &tmp_a43, sizeof(tmp_a43));
  if (raw_a43 != 0) {
    _this->_internal_set_a43(from._internal_a43());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a44 = from._internal_a44();
  uint64_t raw_a44;
  memcpy(&raw_a44, &tmp_a44, sizeof(tmp_a44));
  if (raw_a44 != 0) {
    _this->_internal_set_a44(from._internal_a44());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix4d::CopyFrom(const Matrix4d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Matrix4d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix4d::IsInitialized() const {
  return true;
}

void Matrix4d::InternalSwap(Matrix4d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix4d, _impl_.a44_)
      + sizeof(Matrix4d::_impl_.a44_)
      - PROTOBUF_FIELD_OFFSET(Matrix4d, _impl_.a11_)>(
          reinterpret_cast<char*>(&_impl_.a11_),
          reinterpret_cast<char*>(&other->_impl_.a11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix4d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto[2]);
}

// ===================================================================

class Matrix6d::_Internal {
 public:
};

Matrix6d::Matrix6d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Matrix6d)
}
Matrix6d::Matrix6d(const Matrix6d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix6d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){}
    , decltype(_impl_.a12_){}
    , decltype(_impl_.a13_){}
    , decltype(_impl_.a14_){}
    , decltype(_impl_.a15_){}
    , decltype(_impl_.a16_){}
    , decltype(_impl_.a21_){}
    , decltype(_impl_.a22_){}
    , decltype(_impl_.a23_){}
    , decltype(_impl_.a24_){}
    , decltype(_impl_.a25_){}
    , decltype(_impl_.a26_){}
    , decltype(_impl_.a31_){}
    , decltype(_impl_.a32_){}
    , decltype(_impl_.a33_){}
    , decltype(_impl_.a34_){}
    , decltype(_impl_.a35_){}
    , decltype(_impl_.a36_){}
    , decltype(_impl_.a41_){}
    , decltype(_impl_.a42_){}
    , decltype(_impl_.a43_){}
    , decltype(_impl_.a44_){}
    , decltype(_impl_.a45_){}
    , decltype(_impl_.a46_){}
    , decltype(_impl_.a51_){}
    , decltype(_impl_.a52_){}
    , decltype(_impl_.a53_){}
    , decltype(_impl_.a54_){}
    , decltype(_impl_.a55_){}
    , decltype(_impl_.a56_){}
    , decltype(_impl_.a61_){}
    , decltype(_impl_.a62_){}
    , decltype(_impl_.a63_){}
    , decltype(_impl_.a64_){}
    , decltype(_impl_.a65_){}
    , decltype(_impl_.a66_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a11_, &from._impl_.a11_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a66_) -
    reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a66_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Matrix6d)
}

inline void Matrix6d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){0}
    , decltype(_impl_.a12_){0}
    , decltype(_impl_.a13_){0}
    , decltype(_impl_.a14_){0}
    , decltype(_impl_.a15_){0}
    , decltype(_impl_.a16_){0}
    , decltype(_impl_.a21_){0}
    , decltype(_impl_.a22_){0}
    , decltype(_impl_.a23_){0}
    , decltype(_impl_.a24_){0}
    , decltype(_impl_.a25_){0}
    , decltype(_impl_.a26_){0}
    , decltype(_impl_.a31_){0}
    , decltype(_impl_.a32_){0}
    , decltype(_impl_.a33_){0}
    , decltype(_impl_.a34_){0}
    , decltype(_impl_.a35_){0}
    , decltype(_impl_.a36_){0}
    , decltype(_impl_.a41_){0}
    , decltype(_impl_.a42_){0}
    , decltype(_impl_.a43_){0}
    , decltype(_impl_.a44_){0}
    , decltype(_impl_.a45_){0}
    , decltype(_impl_.a46_){0}
    , decltype(_impl_.a51_){0}
    , decltype(_impl_.a52_){0}
    , decltype(_impl_.a53_){0}
    , decltype(_impl_.a54_){0}
    , decltype(_impl_.a55_){0}
    , decltype(_impl_.a56_){0}
    , decltype(_impl_.a61_){0}
    , decltype(_impl_.a62_){0}
    , decltype(_impl_.a63_){0}
    , decltype(_impl_.a64_){0}
    , decltype(_impl_.a65_){0}
    , decltype(_impl_.a66_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix6d::~Matrix6d() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Matrix6d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix6d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Matrix6d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix6d::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Matrix6d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a66_) -
      reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a66_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix6d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double a11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.a11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.a12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a13 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.a13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a14 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.a14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a15 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.a15_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a16 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.a16_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a21 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.a21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a22 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.a22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a23 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.a23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a24 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _impl_.a24_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a25 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.a25_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a26 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.a26_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a31 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 105)) {
          _impl_.a31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a32 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          _impl_.a32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a33 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.a33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a34 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.a34_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a35 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _impl_.a35_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a36 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.a36_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a41 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _impl_.a41_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a42 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _impl_.a42_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a43 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          _impl_.a43_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a44 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 177)) {
          _impl_.a44_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a45 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 185)) {
          _impl_.a45_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a46 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 193)) {
          _impl_.a46_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a51 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 201)) {
          _impl_.a51_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a52 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 209)) {
          _impl_.a52_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a53 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 217)) {
          _impl_.a53_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a54 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 225)) {
          _impl_.a54_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a55 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 233)) {
          _impl_.a55_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a56 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 241)) {
          _impl_.a56_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a61 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 249)) {
          _impl_.a61_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a62 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 1)) {
          _impl_.a62_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a63 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.a63_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a64 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.a64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a65 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.a65_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a66 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.a66_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Matrix6d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Matrix6d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double a11 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = this->_internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_a11(), target);
  }

  // double a12 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = this->_internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_a12(), target);
  }

  // double a13 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a13 = this->_internal_a13();
  uint64_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_a13(), target);
  }

  // double a14 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a14 = this->_internal_a14();
  uint64_t raw_a14;
  memcpy(&raw_a14, &tmp_a14, sizeof(tmp_a14));
  if (raw_a14 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_a14(), target);
  }

  // double a15 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a15 = this->_internal_a15();
  uint64_t raw_a15;
  memcpy(&raw_a15, &tmp_a15, sizeof(tmp_a15));
  if (raw_a15 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_a15(), target);
  }

  // double a16 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a16 = this->_internal_a16();
  uint64_t raw_a16;
  memcpy(&raw_a16, &tmp_a16, sizeof(tmp_a16));
  if (raw_a16 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_a16(), target);
  }

  // double a21 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = this->_internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_a21(), target);
  }

  // double a22 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = this->_internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_a22(), target);
  }

  // double a23 = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a23 = this->_internal_a23();
  uint64_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_a23(), target);
  }

  // double a24 = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a24 = this->_internal_a24();
  uint64_t raw_a24;
  memcpy(&raw_a24, &tmp_a24, sizeof(tmp_a24));
  if (raw_a24 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_a24(), target);
  }

  // double a25 = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a25 = this->_internal_a25();
  uint64_t raw_a25;
  memcpy(&raw_a25, &tmp_a25, sizeof(tmp_a25));
  if (raw_a25 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_a25(), target);
  }

  // double a26 = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a26 = this->_internal_a26();
  uint64_t raw_a26;
  memcpy(&raw_a26, &tmp_a26, sizeof(tmp_a26));
  if (raw_a26 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_a26(), target);
  }

  // double a31 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a31 = this->_internal_a31();
  uint64_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(13, this->_internal_a31(), target);
  }

  // double a32 = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a32 = this->_internal_a32();
  uint64_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(14, this->_internal_a32(), target);
  }

  // double a33 = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a33 = this->_internal_a33();
  uint64_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_a33(), target);
  }

  // double a34 = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a34 = this->_internal_a34();
  uint64_t raw_a34;
  memcpy(&raw_a34, &tmp_a34, sizeof(tmp_a34));
  if (raw_a34 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_a34(), target);
  }

  // double a35 = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a35 = this->_internal_a35();
  uint64_t raw_a35;
  memcpy(&raw_a35, &tmp_a35, sizeof(tmp_a35));
  if (raw_a35 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_a35(), target);
  }

  // double a36 = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a36 = this->_internal_a36();
  uint64_t raw_a36;
  memcpy(&raw_a36, &tmp_a36, sizeof(tmp_a36));
  if (raw_a36 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_a36(), target);
  }

  // double a41 = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a41 = this->_internal_a41();
  uint64_t raw_a41;
  memcpy(&raw_a41, &tmp_a41, sizeof(tmp_a41));
  if (raw_a41 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_a41(), target);
  }

  // double a42 = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a42 = this->_internal_a42();
  uint64_t raw_a42;
  memcpy(&raw_a42, &tmp_a42, sizeof(tmp_a42));
  if (raw_a42 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_a42(), target);
  }

  // double a43 = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a43 = this->_internal_a43();
  uint64_t raw_a43;
  memcpy(&raw_a43, &tmp_a43, sizeof(tmp_a43));
  if (raw_a43 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(21, this->_internal_a43(), target);
  }

  // double a44 = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a44 = this->_internal_a44();
  uint64_t raw_a44;
  memcpy(&raw_a44, &tmp_a44, sizeof(tmp_a44));
  if (raw_a44 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(22, this->_internal_a44(), target);
  }

  // double a45 = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a45 = this->_internal_a45();
  uint64_t raw_a45;
  memcpy(&raw_a45, &tmp_a45, sizeof(tmp_a45));
  if (raw_a45 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(23, this->_internal_a45(), target);
  }

  // double a46 = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a46 = this->_internal_a46();
  uint64_t raw_a46;
  memcpy(&raw_a46, &tmp_a46, sizeof(tmp_a46));
  if (raw_a46 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(24, this->_internal_a46(), target);
  }

  // double a51 = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a51 = this->_internal_a51();
  uint64_t raw_a51;
  memcpy(&raw_a51, &tmp_a51, sizeof(tmp_a51));
  if (raw_a51 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(25, this->_internal_a51(), target);
  }

  // double a52 = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a52 = this->_internal_a52();
  uint64_t raw_a52;
  memcpy(&raw_a52, &tmp_a52, sizeof(tmp_a52));
  if (raw_a52 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(26, this->_internal_a52(), target);
  }

  // double a53 = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a53 = this->_internal_a53();
  uint64_t raw_a53;
  memcpy(&raw_a53, &tmp_a53, sizeof(tmp_a53));
  if (raw_a53 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(27, this->_internal_a53(), target);
  }

  // double a54 = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a54 = this->_internal_a54();
  uint64_t raw_a54;
  memcpy(&raw_a54, &tmp_a54, sizeof(tmp_a54));
  if (raw_a54 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(28, this->_internal_a54(), target);
  }

  // double a55 = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a55 = this->_internal_a55();
  uint64_t raw_a55;
  memcpy(&raw_a55, &tmp_a55, sizeof(tmp_a55));
  if (raw_a55 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(29, this->_internal_a55(), target);
  }

  // double a56 = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a56 = this->_internal_a56();
  uint64_t raw_a56;
  memcpy(&raw_a56, &tmp_a56, sizeof(tmp_a56));
  if (raw_a56 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(30, this->_internal_a56(), target);
  }

  // double a61 = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a61 = this->_internal_a61();
  uint64_t raw_a61;
  memcpy(&raw_a61, &tmp_a61, sizeof(tmp_a61));
  if (raw_a61 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(31, this->_internal_a61(), target);
  }

  // double a62 = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a62 = this->_internal_a62();
  uint64_t raw_a62;
  memcpy(&raw_a62, &tmp_a62, sizeof(tmp_a62));
  if (raw_a62 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(32, this->_internal_a62(), target);
  }

  // double a63 = 33;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a63 = this->_internal_a63();
  uint64_t raw_a63;
  memcpy(&raw_a63, &tmp_a63, sizeof(tmp_a63));
  if (raw_a63 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(33, this->_internal_a63(), target);
  }

  // double a64 = 34;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a64 = this->_internal_a64();
  uint64_t raw_a64;
  memcpy(&raw_a64, &tmp_a64, sizeof(tmp_a64));
  if (raw_a64 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(34, this->_internal_a64(), target);
  }

  // double a65 = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a65 = this->_internal_a65();
  uint64_t raw_a65;
  memcpy(&raw_a65, &tmp_a65, sizeof(tmp_a65));
  if (raw_a65 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(35, this->_internal_a65(), target);
  }

  // double a66 = 36;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a66 = this->_internal_a66();
  uint64_t raw_a66;
  memcpy(&raw_a66, &tmp_a66, sizeof(tmp_a66));
  if (raw_a66 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(36, this->_internal_a66(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Matrix6d)
  return target;
}

size_t Matrix6d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Matrix6d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double a11 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = this->_internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    total_size += 1 + 8;
  }

  // double a12 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = this->_internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    total_size += 1 + 8;
  }

  // double a13 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a13 = this->_internal_a13();
  uint64_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    total_size += 1 + 8;
  }

  // double a14 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a14 = this->_internal_a14();
  uint64_t raw_a14;
  memcpy(&raw_a14, &tmp_a14, sizeof(tmp_a14));
  if (raw_a14 != 0) {
    total_size += 1 + 8;
  }

  // double a15 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a15 = this->_internal_a15();
  uint64_t raw_a15;
  memcpy(&raw_a15, &tmp_a15, sizeof(tmp_a15));
  if (raw_a15 != 0) {
    total_size += 1 + 8;
  }

  // double a16 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a16 = this->_internal_a16();
  uint64_t raw_a16;
  memcpy(&raw_a16, &tmp_a16, sizeof(tmp_a16));
  if (raw_a16 != 0) {
    total_size += 1 + 8;
  }

  // double a21 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = this->_internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    total_size += 1 + 8;
  }

  // double a22 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = this->_internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    total_size += 1 + 8;
  }

  // double a23 = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a23 = this->_internal_a23();
  uint64_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    total_size += 1 + 8;
  }

  // double a24 = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a24 = this->_internal_a24();
  uint64_t raw_a24;
  memcpy(&raw_a24, &tmp_a24, sizeof(tmp_a24));
  if (raw_a24 != 0) {
    total_size += 1 + 8;
  }

  // double a25 = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a25 = this->_internal_a25();
  uint64_t raw_a25;
  memcpy(&raw_a25, &tmp_a25, sizeof(tmp_a25));
  if (raw_a25 != 0) {
    total_size += 1 + 8;
  }

  // double a26 = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a26 = this->_internal_a26();
  uint64_t raw_a26;
  memcpy(&raw_a26, &tmp_a26, sizeof(tmp_a26));
  if (raw_a26 != 0) {
    total_size += 1 + 8;
  }

  // double a31 = 13;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a31 = this->_internal_a31();
  uint64_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    total_size += 1 + 8;
  }

  // double a32 = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a32 = this->_internal_a32();
  uint64_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    total_size += 1 + 8;
  }

  // double a33 = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a33 = this->_internal_a33();
  uint64_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    total_size += 1 + 8;
  }

  // double a34 = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a34 = this->_internal_a34();
  uint64_t raw_a34;
  memcpy(&raw_a34, &tmp_a34, sizeof(tmp_a34));
  if (raw_a34 != 0) {
    total_size += 2 + 8;
  }

  // double a35 = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a35 = this->_internal_a35();
  uint64_t raw_a35;
  memcpy(&raw_a35, &tmp_a35, sizeof(tmp_a35));
  if (raw_a35 != 0) {
    total_size += 2 + 8;
  }

  // double a36 = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a36 = this->_internal_a36();
  uint64_t raw_a36;
  memcpy(&raw_a36, &tmp_a36, sizeof(tmp_a36));
  if (raw_a36 != 0) {
    total_size += 2 + 8;
  }

  // double a41 = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a41 = this->_internal_a41();
  uint64_t raw_a41;
  memcpy(&raw_a41, &tmp_a41, sizeof(tmp_a41));
  if (raw_a41 != 0) {
    total_size += 2 + 8;
  }

  // double a42 = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a42 = this->_internal_a42();
  uint64_t raw_a42;
  memcpy(&raw_a42, &tmp_a42, sizeof(tmp_a42));
  if (raw_a42 != 0) {
    total_size += 2 + 8;
  }

  // double a43 = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a43 = this->_internal_a43();
  uint64_t raw_a43;
  memcpy(&raw_a43, &tmp_a43, sizeof(tmp_a43));
  if (raw_a43 != 0) {
    total_size += 2 + 8;
  }

  // double a44 = 22;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a44 = this->_internal_a44();
  uint64_t raw_a44;
  memcpy(&raw_a44, &tmp_a44, sizeof(tmp_a44));
  if (raw_a44 != 0) {
    total_size += 2 + 8;
  }

  // double a45 = 23;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a45 = this->_internal_a45();
  uint64_t raw_a45;
  memcpy(&raw_a45, &tmp_a45, sizeof(tmp_a45));
  if (raw_a45 != 0) {
    total_size += 2 + 8;
  }

  // double a46 = 24;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a46 = this->_internal_a46();
  uint64_t raw_a46;
  memcpy(&raw_a46, &tmp_a46, sizeof(tmp_a46));
  if (raw_a46 != 0) {
    total_size += 2 + 8;
  }

  // double a51 = 25;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a51 = this->_internal_a51();
  uint64_t raw_a51;
  memcpy(&raw_a51, &tmp_a51, sizeof(tmp_a51));
  if (raw_a51 != 0) {
    total_size += 2 + 8;
  }

  // double a52 = 26;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a52 = this->_internal_a52();
  uint64_t raw_a52;
  memcpy(&raw_a52, &tmp_a52, sizeof(tmp_a52));
  if (raw_a52 != 0) {
    total_size += 2 + 8;
  }

  // double a53 = 27;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a53 = this->_internal_a53();
  uint64_t raw_a53;
  memcpy(&raw_a53, &tmp_a53, sizeof(tmp_a53));
  if (raw_a53 != 0) {
    total_size += 2 + 8;
  }

  // double a54 = 28;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a54 = this->_internal_a54();
  uint64_t raw_a54;
  memcpy(&raw_a54, &tmp_a54, sizeof(tmp_a54));
  if (raw_a54 != 0) {
    total_size += 2 + 8;
  }

  // double a55 = 29;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a55 = this->_internal_a55();
  uint64_t raw_a55;
  memcpy(&raw_a55, &tmp_a55, sizeof(tmp_a55));
  if (raw_a55 != 0) {
    total_size += 2 + 8;
  }

  // double a56 = 30;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a56 = this->_internal_a56();
  uint64_t raw_a56;
  memcpy(&raw_a56, &tmp_a56, sizeof(tmp_a56));
  if (raw_a56 != 0) {
    total_size += 2 + 8;
  }

  // double a61 = 31;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a61 = this->_internal_a61();
  uint64_t raw_a61;
  memcpy(&raw_a61, &tmp_a61, sizeof(tmp_a61));
  if (raw_a61 != 0) {
    total_size += 2 + 8;
  }

  // double a62 = 32;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a62 = this->_internal_a62();
  uint64_t raw_a62;
  memcpy(&raw_a62, &tmp_a62, sizeof(tmp_a62));
  if (raw_a62 != 0) {
    total_size += 2 + 8;
  }

  // double a63 = 33;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a63 = this->_internal_a63();
  uint64_t raw_a63;
  memcpy(&raw_a63, &tmp_a63, sizeof(tmp_a63));
  if (raw_a63 != 0) {
    total_size += 2 + 8;
  }

  // double a64 = 34;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a64 = this->_internal_a64();
  uint64_t raw_a64;
  memcpy(&raw_a64, &tmp_a64, sizeof(tmp_a64));
  if (raw_a64 != 0) {
    total_size += 2 + 8;
  }

  // double a65 = 35;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a65 = this->_internal_a65();
  uint64_t raw_a65;
  memcpy(&raw_a65, &tmp_a65, sizeof(tmp_a65));
  if (raw_a65 != 0) {
    total_size += 2 + 8;
  }

  // double a66 = 36;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a66 = this->_internal_a66();
  uint64_t raw_a66;
  memcpy(&raw_a66, &tmp_a66, sizeof(tmp_a66));
  if (raw_a66 != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix6d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix6d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix6d::GetClassData() const { return &_class_data_; }


void Matrix6d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix6d*>(&to_msg);
  auto& from = static_cast<const Matrix6d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Matrix6d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = from._internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    _this->_internal_set_a11(from._internal_a11());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = from._internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    _this->_internal_set_a12(from._internal_a12());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a13 = from._internal_a13();
  uint64_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    _this->_internal_set_a13(from._internal_a13());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a14 = from._internal_a14();
  uint64_t raw_a14;
  memcpy(&raw_a14, &tmp_a14, sizeof(tmp_a14));
  if (raw_a14 != 0) {
    _this->_internal_set_a14(from._internal_a14());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a15 = from._internal_a15();
  uint64_t raw_a15;
  memcpy(&raw_a15, &tmp_a15, sizeof(tmp_a15));
  if (raw_a15 != 0) {
    _this->_internal_set_a15(from._internal_a15());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a16 = from._internal_a16();
  uint64_t raw_a16;
  memcpy(&raw_a16, &tmp_a16, sizeof(tmp_a16));
  if (raw_a16 != 0) {
    _this->_internal_set_a16(from._internal_a16());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = from._internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    _this->_internal_set_a21(from._internal_a21());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = from._internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    _this->_internal_set_a22(from._internal_a22());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a23 = from._internal_a23();
  uint64_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    _this->_internal_set_a23(from._internal_a23());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a24 = from._internal_a24();
  uint64_t raw_a24;
  memcpy(&raw_a24, &tmp_a24, sizeof(tmp_a24));
  if (raw_a24 != 0) {
    _this->_internal_set_a24(from._internal_a24());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a25 = from._internal_a25();
  uint64_t raw_a25;
  memcpy(&raw_a25, &tmp_a25, sizeof(tmp_a25));
  if (raw_a25 != 0) {
    _this->_internal_set_a25(from._internal_a25());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a26 = from._internal_a26();
  uint64_t raw_a26;
  memcpy(&raw_a26, &tmp_a26, sizeof(tmp_a26));
  if (raw_a26 != 0) {
    _this->_internal_set_a26(from._internal_a26());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a31 = from._internal_a31();
  uint64_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    _this->_internal_set_a31(from._internal_a31());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a32 = from._internal_a32();
  uint64_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    _this->_internal_set_a32(from._internal_a32());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a33 = from._internal_a33();
  uint64_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    _this->_internal_set_a33(from._internal_a33());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a34 = from._internal_a34();
  uint64_t raw_a34;
  memcpy(&raw_a34, &tmp_a34, sizeof(tmp_a34));
  if (raw_a34 != 0) {
    _this->_internal_set_a34(from._internal_a34());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a35 = from._internal_a35();
  uint64_t raw_a35;
  memcpy(&raw_a35, &tmp_a35, sizeof(tmp_a35));
  if (raw_a35 != 0) {
    _this->_internal_set_a35(from._internal_a35());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a36 = from._internal_a36();
  uint64_t raw_a36;
  memcpy(&raw_a36, &tmp_a36, sizeof(tmp_a36));
  if (raw_a36 != 0) {
    _this->_internal_set_a36(from._internal_a36());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a41 = from._internal_a41();
  uint64_t raw_a41;
  memcpy(&raw_a41, &tmp_a41, sizeof(tmp_a41));
  if (raw_a41 != 0) {
    _this->_internal_set_a41(from._internal_a41());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a42 = from._internal_a42();
  uint64_t raw_a42;
  memcpy(&raw_a42, &tmp_a42, sizeof(tmp_a42));
  if (raw_a42 != 0) {
    _this->_internal_set_a42(from._internal_a42());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a43 = from._internal_a43();
  uint64_t raw_a43;
  memcpy(&raw_a43, &tmp_a43, sizeof(tmp_a43));
  if (raw_a43 != 0) {
    _this->_internal_set_a43(from._internal_a43());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a44 = from._internal_a44();
  uint64_t raw_a44;
  memcpy(&raw_a44, &tmp_a44, sizeof(tmp_a44));
  if (raw_a44 != 0) {
    _this->_internal_set_a44(from._internal_a44());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a45 = from._internal_a45();
  uint64_t raw_a45;
  memcpy(&raw_a45, &tmp_a45, sizeof(tmp_a45));
  if (raw_a45 != 0) {
    _this->_internal_set_a45(from._internal_a45());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a46 = from._internal_a46();
  uint64_t raw_a46;
  memcpy(&raw_a46, &tmp_a46, sizeof(tmp_a46));
  if (raw_a46 != 0) {
    _this->_internal_set_a46(from._internal_a46());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a51 = from._internal_a51();
  uint64_t raw_a51;
  memcpy(&raw_a51, &tmp_a51, sizeof(tmp_a51));
  if (raw_a51 != 0) {
    _this->_internal_set_a51(from._internal_a51());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a52 = from._internal_a52();
  uint64_t raw_a52;
  memcpy(&raw_a52, &tmp_a52, sizeof(tmp_a52));
  if (raw_a52 != 0) {
    _this->_internal_set_a52(from._internal_a52());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a53 = from._internal_a53();
  uint64_t raw_a53;
  memcpy(&raw_a53, &tmp_a53, sizeof(tmp_a53));
  if (raw_a53 != 0) {
    _this->_internal_set_a53(from._internal_a53());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a54 = from._internal_a54();
  uint64_t raw_a54;
  memcpy(&raw_a54, &tmp_a54, sizeof(tmp_a54));
  if (raw_a54 != 0) {
    _this->_internal_set_a54(from._internal_a54());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a55 = from._internal_a55();
  uint64_t raw_a55;
  memcpy(&raw_a55, &tmp_a55, sizeof(tmp_a55));
  if (raw_a55 != 0) {
    _this->_internal_set_a55(from._internal_a55());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a56 = from._internal_a56();
  uint64_t raw_a56;
  memcpy(&raw_a56, &tmp_a56, sizeof(tmp_a56));
  if (raw_a56 != 0) {
    _this->_internal_set_a56(from._internal_a56());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a61 = from._internal_a61();
  uint64_t raw_a61;
  memcpy(&raw_a61, &tmp_a61, sizeof(tmp_a61));
  if (raw_a61 != 0) {
    _this->_internal_set_a61(from._internal_a61());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a62 = from._internal_a62();
  uint64_t raw_a62;
  memcpy(&raw_a62, &tmp_a62, sizeof(tmp_a62));
  if (raw_a62 != 0) {
    _this->_internal_set_a62(from._internal_a62());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a63 = from._internal_a63();
  uint64_t raw_a63;
  memcpy(&raw_a63, &tmp_a63, sizeof(tmp_a63));
  if (raw_a63 != 0) {
    _this->_internal_set_a63(from._internal_a63());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a64 = from._internal_a64();
  uint64_t raw_a64;
  memcpy(&raw_a64, &tmp_a64, sizeof(tmp_a64));
  if (raw_a64 != 0) {
    _this->_internal_set_a64(from._internal_a64());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a65 = from._internal_a65();
  uint64_t raw_a65;
  memcpy(&raw_a65, &tmp_a65, sizeof(tmp_a65));
  if (raw_a65 != 0) {
    _this->_internal_set_a65(from._internal_a65());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a66 = from._internal_a66();
  uint64_t raw_a66;
  memcpy(&raw_a66, &tmp_a66, sizeof(tmp_a66));
  if (raw_a66 != 0) {
    _this->_internal_set_a66(from._internal_a66());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix6d::CopyFrom(const Matrix6d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Matrix6d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix6d::IsInitialized() const {
  return true;
}

void Matrix6d::InternalSwap(Matrix6d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix6d, _impl_.a66_)
      + sizeof(Matrix6d::_impl_.a66_)
      - PROTOBUF_FIELD_OFFSET(Matrix6d, _impl_.a11_)>(
          reinterpret_cast<char*>(&_impl_.a11_),
          reinterpret_cast<char*>(&other->_impl_.a11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix6d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto[3]);
}

// ===================================================================

class Matrix2f::_Internal {
 public:
};

Matrix2f::Matrix2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Matrix2f)
}
Matrix2f::Matrix2f(const Matrix2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){}
    , decltype(_impl_.a12_){}
    , decltype(_impl_.a21_){}
    , decltype(_impl_.a22_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a11_, &from._impl_.a11_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a22_) -
    reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a22_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Matrix2f)
}

inline void Matrix2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){0}
    , decltype(_impl_.a12_){0}
    , decltype(_impl_.a21_){0}
    , decltype(_impl_.a22_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix2f::~Matrix2f() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Matrix2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Matrix2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix2f::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Matrix2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a22_) -
      reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a22_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float a11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.a11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.a12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a21 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.a21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a22 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Matrix2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Matrix2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float a11 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a11 = this->_internal_a11();
  uint32_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_a11(), target);
  }

  // float a12 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a12 = this->_internal_a12();
  uint32_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_a12(), target);
  }

  // float a21 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a21 = this->_internal_a21();
  uint32_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_a21(), target);
  }

  // float a22 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a22 = this->_internal_a22();
  uint32_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a22(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Matrix2f)
  return target;
}

size_t Matrix2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Matrix2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float a11 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a11 = this->_internal_a11();
  uint32_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    total_size += 1 + 4;
  }

  // float a12 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a12 = this->_internal_a12();
  uint32_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    total_size += 1 + 4;
  }

  // float a21 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a21 = this->_internal_a21();
  uint32_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    total_size += 1 + 4;
  }

  // float a22 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a22 = this->_internal_a22();
  uint32_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix2f::GetClassData() const { return &_class_data_; }


void Matrix2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix2f*>(&to_msg);
  auto& from = static_cast<const Matrix2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Matrix2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a11 = from._internal_a11();
  uint32_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    _this->_internal_set_a11(from._internal_a11());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a12 = from._internal_a12();
  uint32_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    _this->_internal_set_a12(from._internal_a12());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a21 = from._internal_a21();
  uint32_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    _this->_internal_set_a21(from._internal_a21());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a22 = from._internal_a22();
  uint32_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    _this->_internal_set_a22(from._internal_a22());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix2f::CopyFrom(const Matrix2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Matrix2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix2f::IsInitialized() const {
  return true;
}

void Matrix2f::InternalSwap(Matrix2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix2f, _impl_.a22_)
      + sizeof(Matrix2f::_impl_.a22_)
      - PROTOBUF_FIELD_OFFSET(Matrix2f, _impl_.a11_)>(
          reinterpret_cast<char*>(&_impl_.a11_),
          reinterpret_cast<char*>(&other->_impl_.a11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto[4]);
}

// ===================================================================

class Matrix3f::_Internal {
 public:
};

Matrix3f::Matrix3f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Matrix3f)
}
Matrix3f::Matrix3f(const Matrix3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix3f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){}
    , decltype(_impl_.a12_){}
    , decltype(_impl_.a13_){}
    , decltype(_impl_.a21_){}
    , decltype(_impl_.a22_){}
    , decltype(_impl_.a23_){}
    , decltype(_impl_.a31_){}
    , decltype(_impl_.a32_){}
    , decltype(_impl_.a33_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a11_, &from._impl_.a11_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a33_) -
    reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a33_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Matrix3f)
}

inline void Matrix3f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){0}
    , decltype(_impl_.a12_){0}
    , decltype(_impl_.a13_){0}
    , decltype(_impl_.a21_){0}
    , decltype(_impl_.a22_){0}
    , decltype(_impl_.a23_){0}
    , decltype(_impl_.a31_){0}
    , decltype(_impl_.a32_){0}
    , decltype(_impl_.a33_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix3f::~Matrix3f() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Matrix3f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix3f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Matrix3f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix3f::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Matrix3f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a33_) -
      reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a33_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix3f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float a11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.a11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.a12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a13 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.a13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a21 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a22 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.a22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a23 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.a23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a31 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.a31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a32 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.a32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a33 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.a33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Matrix3f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Matrix3f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float a11 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a11 = this->_internal_a11();
  uint32_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_a11(), target);
  }

  // float a12 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a12 = this->_internal_a12();
  uint32_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_a12(), target);
  }

  // float a13 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a13 = this->_internal_a13();
  uint32_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_a13(), target);
  }

  // float a21 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a21 = this->_internal_a21();
  uint32_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a21(), target);
  }

  // float a22 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a22 = this->_internal_a22();
  uint32_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_a22(), target);
  }

  // float a23 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a23 = this->_internal_a23();
  uint32_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_a23(), target);
  }

  // float a31 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a31 = this->_internal_a31();
  uint32_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_a31(), target);
  }

  // float a32 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a32 = this->_internal_a32();
  uint32_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_a32(), target);
  }

  // float a33 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a33 = this->_internal_a33();
  uint32_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_a33(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Matrix3f)
  return target;
}

size_t Matrix3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Matrix3f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float a11 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a11 = this->_internal_a11();
  uint32_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    total_size += 1 + 4;
  }

  // float a12 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a12 = this->_internal_a12();
  uint32_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    total_size += 1 + 4;
  }

  // float a13 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a13 = this->_internal_a13();
  uint32_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    total_size += 1 + 4;
  }

  // float a21 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a21 = this->_internal_a21();
  uint32_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    total_size += 1 + 4;
  }

  // float a22 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a22 = this->_internal_a22();
  uint32_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    total_size += 1 + 4;
  }

  // float a23 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a23 = this->_internal_a23();
  uint32_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    total_size += 1 + 4;
  }

  // float a31 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a31 = this->_internal_a31();
  uint32_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    total_size += 1 + 4;
  }

  // float a32 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a32 = this->_internal_a32();
  uint32_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    total_size += 1 + 4;
  }

  // float a33 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a33 = this->_internal_a33();
  uint32_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix3f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix3f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix3f::GetClassData() const { return &_class_data_; }


void Matrix3f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix3f*>(&to_msg);
  auto& from = static_cast<const Matrix3f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Matrix3f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a11 = from._internal_a11();
  uint32_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    _this->_internal_set_a11(from._internal_a11());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a12 = from._internal_a12();
  uint32_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    _this->_internal_set_a12(from._internal_a12());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a13 = from._internal_a13();
  uint32_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    _this->_internal_set_a13(from._internal_a13());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a21 = from._internal_a21();
  uint32_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    _this->_internal_set_a21(from._internal_a21());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a22 = from._internal_a22();
  uint32_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    _this->_internal_set_a22(from._internal_a22());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a23 = from._internal_a23();
  uint32_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    _this->_internal_set_a23(from._internal_a23());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a31 = from._internal_a31();
  uint32_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    _this->_internal_set_a31(from._internal_a31());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a32 = from._internal_a32();
  uint32_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    _this->_internal_set_a32(from._internal_a32());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a33 = from._internal_a33();
  uint32_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    _this->_internal_set_a33(from._internal_a33());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix3f::CopyFrom(const Matrix3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Matrix3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix3f::IsInitialized() const {
  return true;
}

void Matrix3f::InternalSwap(Matrix3f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix3f, _impl_.a33_)
      + sizeof(Matrix3f::_impl_.a33_)
      - PROTOBUF_FIELD_OFFSET(Matrix3f, _impl_.a11_)>(
          reinterpret_cast<char*>(&_impl_.a11_),
          reinterpret_cast<char*>(&other->_impl_.a11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix3f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto[5]);
}

// ===================================================================

class Matrix4f::_Internal {
 public:
};

Matrix4f::Matrix4f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Matrix4f)
}
Matrix4f::Matrix4f(const Matrix4f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix4f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){}
    , decltype(_impl_.a12_){}
    , decltype(_impl_.a13_){}
    , decltype(_impl_.a14_){}
    , decltype(_impl_.a21_){}
    , decltype(_impl_.a22_){}
    , decltype(_impl_.a23_){}
    , decltype(_impl_.a24_){}
    , decltype(_impl_.a31_){}
    , decltype(_impl_.a32_){}
    , decltype(_impl_.a33_){}
    , decltype(_impl_.a34_){}
    , decltype(_impl_.a41_){}
    , decltype(_impl_.a42_){}
    , decltype(_impl_.a43_){}
    , decltype(_impl_.a44_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a11_, &from._impl_.a11_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a44_) -
    reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a44_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Matrix4f)
}

inline void Matrix4f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){0}
    , decltype(_impl_.a12_){0}
    , decltype(_impl_.a13_){0}
    , decltype(_impl_.a14_){0}
    , decltype(_impl_.a21_){0}
    , decltype(_impl_.a22_){0}
    , decltype(_impl_.a23_){0}
    , decltype(_impl_.a24_){0}
    , decltype(_impl_.a31_){0}
    , decltype(_impl_.a32_){0}
    , decltype(_impl_.a33_){0}
    , decltype(_impl_.a34_){0}
    , decltype(_impl_.a41_){0}
    , decltype(_impl_.a42_){0}
    , decltype(_impl_.a43_){0}
    , decltype(_impl_.a44_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix4f::~Matrix4f() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Matrix4f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix4f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Matrix4f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix4f::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Matrix4f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a44_) -
      reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a44_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix4f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float a11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.a11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.a12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a13 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.a13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a14 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a21 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.a21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a22 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.a22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a23 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.a23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a24 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.a24_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a31 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.a31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a32 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.a32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a33 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.a33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a34 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.a34_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a41 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.a41_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a42 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.a42_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a43 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.a43_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a44 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.a44_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Matrix4f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Matrix4f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float a11 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a11 = this->_internal_a11();
  uint32_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_a11(), target);
  }

  // float a12 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a12 = this->_internal_a12();
  uint32_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_a12(), target);
  }

  // float a13 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a13 = this->_internal_a13();
  uint32_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_a13(), target);
  }

  // float a14 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a14 = this->_internal_a14();
  uint32_t raw_a14;
  memcpy(&raw_a14, &tmp_a14, sizeof(tmp_a14));
  if (raw_a14 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a14(), target);
  }

  // float a21 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a21 = this->_internal_a21();
  uint32_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_a21(), target);
  }

  // float a22 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a22 = this->_internal_a22();
  uint32_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_a22(), target);
  }

  // float a23 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a23 = this->_internal_a23();
  uint32_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_a23(), target);
  }

  // float a24 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a24 = this->_internal_a24();
  uint32_t raw_a24;
  memcpy(&raw_a24, &tmp_a24, sizeof(tmp_a24));
  if (raw_a24 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_a24(), target);
  }

  // float a31 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a31 = this->_internal_a31();
  uint32_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_a31(), target);
  }

  // float a32 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a32 = this->_internal_a32();
  uint32_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_a32(), target);
  }

  // float a33 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a33 = this->_internal_a33();
  uint32_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_a33(), target);
  }

  // float a34 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a34 = this->_internal_a34();
  uint32_t raw_a34;
  memcpy(&raw_a34, &tmp_a34, sizeof(tmp_a34));
  if (raw_a34 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_a34(), target);
  }

  // float a41 = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a41 = this->_internal_a41();
  uint32_t raw_a41;
  memcpy(&raw_a41, &tmp_a41, sizeof(tmp_a41));
  if (raw_a41 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_a41(), target);
  }

  // float a42 = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a42 = this->_internal_a42();
  uint32_t raw_a42;
  memcpy(&raw_a42, &tmp_a42, sizeof(tmp_a42));
  if (raw_a42 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_a42(), target);
  }

  // float a43 = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a43 = this->_internal_a43();
  uint32_t raw_a43;
  memcpy(&raw_a43, &tmp_a43, sizeof(tmp_a43));
  if (raw_a43 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_a43(), target);
  }

  // float a44 = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a44 = this->_internal_a44();
  uint32_t raw_a44;
  memcpy(&raw_a44, &tmp_a44, sizeof(tmp_a44));
  if (raw_a44 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_a44(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Matrix4f)
  return target;
}

size_t Matrix4f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Matrix4f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float a11 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a11 = this->_internal_a11();
  uint32_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    total_size += 1 + 4;
  }

  // float a12 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a12 = this->_internal_a12();
  uint32_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    total_size += 1 + 4;
  }

  // float a13 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a13 = this->_internal_a13();
  uint32_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    total_size += 1 + 4;
  }

  // float a14 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a14 = this->_internal_a14();
  uint32_t raw_a14;
  memcpy(&raw_a14, &tmp_a14, sizeof(tmp_a14));
  if (raw_a14 != 0) {
    total_size += 1 + 4;
  }

  // float a21 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a21 = this->_internal_a21();
  uint32_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    total_size += 1 + 4;
  }

  // float a22 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a22 = this->_internal_a22();
  uint32_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    total_size += 1 + 4;
  }

  // float a23 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a23 = this->_internal_a23();
  uint32_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    total_size += 1 + 4;
  }

  // float a24 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a24 = this->_internal_a24();
  uint32_t raw_a24;
  memcpy(&raw_a24, &tmp_a24, sizeof(tmp_a24));
  if (raw_a24 != 0) {
    total_size += 1 + 4;
  }

  // float a31 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a31 = this->_internal_a31();
  uint32_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    total_size += 1 + 4;
  }

  // float a32 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a32 = this->_internal_a32();
  uint32_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    total_size += 1 + 4;
  }

  // float a33 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a33 = this->_internal_a33();
  uint32_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    total_size += 1 + 4;
  }

  // float a34 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a34 = this->_internal_a34();
  uint32_t raw_a34;
  memcpy(&raw_a34, &tmp_a34, sizeof(tmp_a34));
  if (raw_a34 != 0) {
    total_size += 1 + 4;
  }

  // float a41 = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a41 = this->_internal_a41();
  uint32_t raw_a41;
  memcpy(&raw_a41, &tmp_a41, sizeof(tmp_a41));
  if (raw_a41 != 0) {
    total_size += 1 + 4;
  }

  // float a42 = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a42 = this->_internal_a42();
  uint32_t raw_a42;
  memcpy(&raw_a42, &tmp_a42, sizeof(tmp_a42));
  if (raw_a42 != 0) {
    total_size += 1 + 4;
  }

  // float a43 = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a43 = this->_internal_a43();
  uint32_t raw_a43;
  memcpy(&raw_a43, &tmp_a43, sizeof(tmp_a43));
  if (raw_a43 != 0) {
    total_size += 1 + 4;
  }

  // float a44 = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a44 = this->_internal_a44();
  uint32_t raw_a44;
  memcpy(&raw_a44, &tmp_a44, sizeof(tmp_a44));
  if (raw_a44 != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix4f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix4f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix4f::GetClassData() const { return &_class_data_; }


void Matrix4f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix4f*>(&to_msg);
  auto& from = static_cast<const Matrix4f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Matrix4f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a11 = from._internal_a11();
  uint32_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    _this->_internal_set_a11(from._internal_a11());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a12 = from._internal_a12();
  uint32_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    _this->_internal_set_a12(from._internal_a12());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a13 = from._internal_a13();
  uint32_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    _this->_internal_set_a13(from._internal_a13());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a14 = from._internal_a14();
  uint32_t raw_a14;
  memcpy(&raw_a14, &tmp_a14, sizeof(tmp_a14));
  if (raw_a14 != 0) {
    _this->_internal_set_a14(from._internal_a14());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a21 = from._internal_a21();
  uint32_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    _this->_internal_set_a21(from._internal_a21());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a22 = from._internal_a22();
  uint32_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    _this->_internal_set_a22(from._internal_a22());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a23 = from._internal_a23();
  uint32_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    _this->_internal_set_a23(from._internal_a23());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a24 = from._internal_a24();
  uint32_t raw_a24;
  memcpy(&raw_a24, &tmp_a24, sizeof(tmp_a24));
  if (raw_a24 != 0) {
    _this->_internal_set_a24(from._internal_a24());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a31 = from._internal_a31();
  uint32_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    _this->_internal_set_a31(from._internal_a31());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a32 = from._internal_a32();
  uint32_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    _this->_internal_set_a32(from._internal_a32());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a33 = from._internal_a33();
  uint32_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    _this->_internal_set_a33(from._internal_a33());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a34 = from._internal_a34();
  uint32_t raw_a34;
  memcpy(&raw_a34, &tmp_a34, sizeof(tmp_a34));
  if (raw_a34 != 0) {
    _this->_internal_set_a34(from._internal_a34());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a41 = from._internal_a41();
  uint32_t raw_a41;
  memcpy(&raw_a41, &tmp_a41, sizeof(tmp_a41));
  if (raw_a41 != 0) {
    _this->_internal_set_a41(from._internal_a41());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a42 = from._internal_a42();
  uint32_t raw_a42;
  memcpy(&raw_a42, &tmp_a42, sizeof(tmp_a42));
  if (raw_a42 != 0) {
    _this->_internal_set_a42(from._internal_a42());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a43 = from._internal_a43();
  uint32_t raw_a43;
  memcpy(&raw_a43, &tmp_a43, sizeof(tmp_a43));
  if (raw_a43 != 0) {
    _this->_internal_set_a43(from._internal_a43());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a44 = from._internal_a44();
  uint32_t raw_a44;
  memcpy(&raw_a44, &tmp_a44, sizeof(tmp_a44));
  if (raw_a44 != 0) {
    _this->_internal_set_a44(from._internal_a44());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix4f::CopyFrom(const Matrix4f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Matrix4f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix4f::IsInitialized() const {
  return true;
}

void Matrix4f::InternalSwap(Matrix4f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix4f, _impl_.a44_)
      + sizeof(Matrix4f::_impl_.a44_)
      - PROTOBUF_FIELD_OFFSET(Matrix4f, _impl_.a11_)>(
          reinterpret_cast<char*>(&_impl_.a11_),
          reinterpret_cast<char*>(&other->_impl_.a11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix4f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto[6]);
}

// ===================================================================

class Matrix6f::_Internal {
 public:
};

Matrix6f::Matrix6f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Matrix6f)
}
Matrix6f::Matrix6f(const Matrix6f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Matrix6f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){}
    , decltype(_impl_.a12_){}
    , decltype(_impl_.a13_){}
    , decltype(_impl_.a14_){}
    , decltype(_impl_.a15_){}
    , decltype(_impl_.a16_){}
    , decltype(_impl_.a21_){}
    , decltype(_impl_.a22_){}
    , decltype(_impl_.a23_){}
    , decltype(_impl_.a24_){}
    , decltype(_impl_.a25_){}
    , decltype(_impl_.a26_){}
    , decltype(_impl_.a31_){}
    , decltype(_impl_.a32_){}
    , decltype(_impl_.a33_){}
    , decltype(_impl_.a34_){}
    , decltype(_impl_.a35_){}
    , decltype(_impl_.a36_){}
    , decltype(_impl_.a41_){}
    , decltype(_impl_.a42_){}
    , decltype(_impl_.a43_){}
    , decltype(_impl_.a44_){}
    , decltype(_impl_.a45_){}
    , decltype(_impl_.a46_){}
    , decltype(_impl_.a51_){}
    , decltype(_impl_.a52_){}
    , decltype(_impl_.a53_){}
    , decltype(_impl_.a54_){}
    , decltype(_impl_.a55_){}
    , decltype(_impl_.a56_){}
    , decltype(_impl_.a61_){}
    , decltype(_impl_.a62_){}
    , decltype(_impl_.a63_){}
    , decltype(_impl_.a64_){}
    , decltype(_impl_.a65_){}
    , decltype(_impl_.a66_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a11_, &from._impl_.a11_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a66_) -
    reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a66_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Matrix6f)
}

inline void Matrix6f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){0}
    , decltype(_impl_.a12_){0}
    , decltype(_impl_.a13_){0}
    , decltype(_impl_.a14_){0}
    , decltype(_impl_.a15_){0}
    , decltype(_impl_.a16_){0}
    , decltype(_impl_.a21_){0}
    , decltype(_impl_.a22_){0}
    , decltype(_impl_.a23_){0}
    , decltype(_impl_.a24_){0}
    , decltype(_impl_.a25_){0}
    , decltype(_impl_.a26_){0}
    , decltype(_impl_.a31_){0}
    , decltype(_impl_.a32_){0}
    , decltype(_impl_.a33_){0}
    , decltype(_impl_.a34_){0}
    , decltype(_impl_.a35_){0}
    , decltype(_impl_.a36_){0}
    , decltype(_impl_.a41_){0}
    , decltype(_impl_.a42_){0}
    , decltype(_impl_.a43_){0}
    , decltype(_impl_.a44_){0}
    , decltype(_impl_.a45_){0}
    , decltype(_impl_.a46_){0}
    , decltype(_impl_.a51_){0}
    , decltype(_impl_.a52_){0}
    , decltype(_impl_.a53_){0}
    , decltype(_impl_.a54_){0}
    , decltype(_impl_.a55_){0}
    , decltype(_impl_.a56_){0}
    , decltype(_impl_.a61_){0}
    , decltype(_impl_.a62_){0}
    , decltype(_impl_.a63_){0}
    , decltype(_impl_.a64_){0}
    , decltype(_impl_.a65_){0}
    , decltype(_impl_.a66_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Matrix6f::~Matrix6f() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Matrix6f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Matrix6f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Matrix6f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Matrix6f::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Matrix6f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a66_) -
      reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a66_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix6f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float a11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.a11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.a12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a13 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.a13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a14 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a14_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a15 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.a15_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a16 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.a16_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a21 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.a21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a22 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.a22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a23 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.a23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a24 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.a24_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a25 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _impl_.a25_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a26 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.a26_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a31 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.a31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a32 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.a32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a33 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.a33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a34 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.a34_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a35 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.a35_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a36 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _impl_.a36_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a41 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _impl_.a41_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a42 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _impl_.a42_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a43 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _impl_.a43_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a44 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _impl_.a44_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a45 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _impl_.a45_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a46 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _impl_.a46_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a51 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _impl_.a51_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a52 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _impl_.a52_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a53 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _impl_.a53_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a54 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _impl_.a54_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a55 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          _impl_.a55_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a56 = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 245)) {
          _impl_.a56_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a61 = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _impl_.a61_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a62 = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _impl_.a62_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a63 = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.a63_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a64 = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.a64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a65 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.a65_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a66 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a66_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Matrix6f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Matrix6f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float a11 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a11 = this->_internal_a11();
  uint32_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_a11(), target);
  }

  // float a12 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a12 = this->_internal_a12();
  uint32_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_a12(), target);
  }

  // float a13 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a13 = this->_internal_a13();
  uint32_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_a13(), target);
  }

  // float a14 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a14 = this->_internal_a14();
  uint32_t raw_a14;
  memcpy(&raw_a14, &tmp_a14, sizeof(tmp_a14));
  if (raw_a14 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a14(), target);
  }

  // float a15 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a15 = this->_internal_a15();
  uint32_t raw_a15;
  memcpy(&raw_a15, &tmp_a15, sizeof(tmp_a15));
  if (raw_a15 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_a15(), target);
  }

  // float a16 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a16 = this->_internal_a16();
  uint32_t raw_a16;
  memcpy(&raw_a16, &tmp_a16, sizeof(tmp_a16));
  if (raw_a16 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_a16(), target);
  }

  // float a21 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a21 = this->_internal_a21();
  uint32_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_a21(), target);
  }

  // float a22 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a22 = this->_internal_a22();
  uint32_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_a22(), target);
  }

  // float a23 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a23 = this->_internal_a23();
  uint32_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_a23(), target);
  }

  // float a24 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a24 = this->_internal_a24();
  uint32_t raw_a24;
  memcpy(&raw_a24, &tmp_a24, sizeof(tmp_a24));
  if (raw_a24 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_a24(), target);
  }

  // float a25 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a25 = this->_internal_a25();
  uint32_t raw_a25;
  memcpy(&raw_a25, &tmp_a25, sizeof(tmp_a25));
  if (raw_a25 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_a25(), target);
  }

  // float a26 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a26 = this->_internal_a26();
  uint32_t raw_a26;
  memcpy(&raw_a26, &tmp_a26, sizeof(tmp_a26));
  if (raw_a26 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_a26(), target);
  }

  // float a31 = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a31 = this->_internal_a31();
  uint32_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_a31(), target);
  }

  // float a32 = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a32 = this->_internal_a32();
  uint32_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_a32(), target);
  }

  // float a33 = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a33 = this->_internal_a33();
  uint32_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_a33(), target);
  }

  // float a34 = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a34 = this->_internal_a34();
  uint32_t raw_a34;
  memcpy(&raw_a34, &tmp_a34, sizeof(tmp_a34));
  if (raw_a34 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_a34(), target);
  }

  // float a35 = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a35 = this->_internal_a35();
  uint32_t raw_a35;
  memcpy(&raw_a35, &tmp_a35, sizeof(tmp_a35));
  if (raw_a35 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_a35(), target);
  }

  // float a36 = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a36 = this->_internal_a36();
  uint32_t raw_a36;
  memcpy(&raw_a36, &tmp_a36, sizeof(tmp_a36));
  if (raw_a36 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_a36(), target);
  }

  // float a41 = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a41 = this->_internal_a41();
  uint32_t raw_a41;
  memcpy(&raw_a41, &tmp_a41, sizeof(tmp_a41));
  if (raw_a41 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_a41(), target);
  }

  // float a42 = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a42 = this->_internal_a42();
  uint32_t raw_a42;
  memcpy(&raw_a42, &tmp_a42, sizeof(tmp_a42));
  if (raw_a42 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_a42(), target);
  }

  // float a43 = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a43 = this->_internal_a43();
  uint32_t raw_a43;
  memcpy(&raw_a43, &tmp_a43, sizeof(tmp_a43));
  if (raw_a43 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_a43(), target);
  }

  // float a44 = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a44 = this->_internal_a44();
  uint32_t raw_a44;
  memcpy(&raw_a44, &tmp_a44, sizeof(tmp_a44));
  if (raw_a44 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_a44(), target);
  }

  // float a45 = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a45 = this->_internal_a45();
  uint32_t raw_a45;
  memcpy(&raw_a45, &tmp_a45, sizeof(tmp_a45));
  if (raw_a45 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_a45(), target);
  }

  // float a46 = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a46 = this->_internal_a46();
  uint32_t raw_a46;
  memcpy(&raw_a46, &tmp_a46, sizeof(tmp_a46));
  if (raw_a46 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_a46(), target);
  }

  // float a51 = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a51 = this->_internal_a51();
  uint32_t raw_a51;
  memcpy(&raw_a51, &tmp_a51, sizeof(tmp_a51));
  if (raw_a51 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_a51(), target);
  }

  // float a52 = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a52 = this->_internal_a52();
  uint32_t raw_a52;
  memcpy(&raw_a52, &tmp_a52, sizeof(tmp_a52));
  if (raw_a52 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(26, this->_internal_a52(), target);
  }

  // float a53 = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a53 = this->_internal_a53();
  uint32_t raw_a53;
  memcpy(&raw_a53, &tmp_a53, sizeof(tmp_a53));
  if (raw_a53 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_a53(), target);
  }

  // float a54 = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a54 = this->_internal_a54();
  uint32_t raw_a54;
  memcpy(&raw_a54, &tmp_a54, sizeof(tmp_a54));
  if (raw_a54 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_a54(), target);
  }

  // float a55 = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a55 = this->_internal_a55();
  uint32_t raw_a55;
  memcpy(&raw_a55, &tmp_a55, sizeof(tmp_a55));
  if (raw_a55 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(29, this->_internal_a55(), target);
  }

  // float a56 = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a56 = this->_internal_a56();
  uint32_t raw_a56;
  memcpy(&raw_a56, &tmp_a56, sizeof(tmp_a56));
  if (raw_a56 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(30, this->_internal_a56(), target);
  }

  // float a61 = 31;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a61 = this->_internal_a61();
  uint32_t raw_a61;
  memcpy(&raw_a61, &tmp_a61, sizeof(tmp_a61));
  if (raw_a61 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(31, this->_internal_a61(), target);
  }

  // float a62 = 32;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a62 = this->_internal_a62();
  uint32_t raw_a62;
  memcpy(&raw_a62, &tmp_a62, sizeof(tmp_a62));
  if (raw_a62 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(32, this->_internal_a62(), target);
  }

  // float a63 = 33;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a63 = this->_internal_a63();
  uint32_t raw_a63;
  memcpy(&raw_a63, &tmp_a63, sizeof(tmp_a63));
  if (raw_a63 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(33, this->_internal_a63(), target);
  }

  // float a64 = 34;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a64 = this->_internal_a64();
  uint32_t raw_a64;
  memcpy(&raw_a64, &tmp_a64, sizeof(tmp_a64));
  if (raw_a64 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(34, this->_internal_a64(), target);
  }

  // float a65 = 35;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a65 = this->_internal_a65();
  uint32_t raw_a65;
  memcpy(&raw_a65, &tmp_a65, sizeof(tmp_a65));
  if (raw_a65 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_a65(), target);
  }

  // float a66 = 36;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a66 = this->_internal_a66();
  uint32_t raw_a66;
  memcpy(&raw_a66, &tmp_a66, sizeof(tmp_a66));
  if (raw_a66 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(36, this->_internal_a66(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Matrix6f)
  return target;
}

size_t Matrix6f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Matrix6f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float a11 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a11 = this->_internal_a11();
  uint32_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    total_size += 1 + 4;
  }

  // float a12 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a12 = this->_internal_a12();
  uint32_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    total_size += 1 + 4;
  }

  // float a13 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a13 = this->_internal_a13();
  uint32_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    total_size += 1 + 4;
  }

  // float a14 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a14 = this->_internal_a14();
  uint32_t raw_a14;
  memcpy(&raw_a14, &tmp_a14, sizeof(tmp_a14));
  if (raw_a14 != 0) {
    total_size += 1 + 4;
  }

  // float a15 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a15 = this->_internal_a15();
  uint32_t raw_a15;
  memcpy(&raw_a15, &tmp_a15, sizeof(tmp_a15));
  if (raw_a15 != 0) {
    total_size += 1 + 4;
  }

  // float a16 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a16 = this->_internal_a16();
  uint32_t raw_a16;
  memcpy(&raw_a16, &tmp_a16, sizeof(tmp_a16));
  if (raw_a16 != 0) {
    total_size += 1 + 4;
  }

  // float a21 = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a21 = this->_internal_a21();
  uint32_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    total_size += 1 + 4;
  }

  // float a22 = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a22 = this->_internal_a22();
  uint32_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    total_size += 1 + 4;
  }

  // float a23 = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a23 = this->_internal_a23();
  uint32_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    total_size += 1 + 4;
  }

  // float a24 = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a24 = this->_internal_a24();
  uint32_t raw_a24;
  memcpy(&raw_a24, &tmp_a24, sizeof(tmp_a24));
  if (raw_a24 != 0) {
    total_size += 1 + 4;
  }

  // float a25 = 11;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a25 = this->_internal_a25();
  uint32_t raw_a25;
  memcpy(&raw_a25, &tmp_a25, sizeof(tmp_a25));
  if (raw_a25 != 0) {
    total_size += 1 + 4;
  }

  // float a26 = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a26 = this->_internal_a26();
  uint32_t raw_a26;
  memcpy(&raw_a26, &tmp_a26, sizeof(tmp_a26));
  if (raw_a26 != 0) {
    total_size += 1 + 4;
  }

  // float a31 = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a31 = this->_internal_a31();
  uint32_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    total_size += 1 + 4;
  }

  // float a32 = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a32 = this->_internal_a32();
  uint32_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    total_size += 1 + 4;
  }

  // float a33 = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a33 = this->_internal_a33();
  uint32_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    total_size += 1 + 4;
  }

  // float a34 = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a34 = this->_internal_a34();
  uint32_t raw_a34;
  memcpy(&raw_a34, &tmp_a34, sizeof(tmp_a34));
  if (raw_a34 != 0) {
    total_size += 2 + 4;
  }

  // float a35 = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a35 = this->_internal_a35();
  uint32_t raw_a35;
  memcpy(&raw_a35, &tmp_a35, sizeof(tmp_a35));
  if (raw_a35 != 0) {
    total_size += 2 + 4;
  }

  // float a36 = 18;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a36 = this->_internal_a36();
  uint32_t raw_a36;
  memcpy(&raw_a36, &tmp_a36, sizeof(tmp_a36));
  if (raw_a36 != 0) {
    total_size += 2 + 4;
  }

  // float a41 = 19;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a41 = this->_internal_a41();
  uint32_t raw_a41;
  memcpy(&raw_a41, &tmp_a41, sizeof(tmp_a41));
  if (raw_a41 != 0) {
    total_size += 2 + 4;
  }

  // float a42 = 20;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a42 = this->_internal_a42();
  uint32_t raw_a42;
  memcpy(&raw_a42, &tmp_a42, sizeof(tmp_a42));
  if (raw_a42 != 0) {
    total_size += 2 + 4;
  }

  // float a43 = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a43 = this->_internal_a43();
  uint32_t raw_a43;
  memcpy(&raw_a43, &tmp_a43, sizeof(tmp_a43));
  if (raw_a43 != 0) {
    total_size += 2 + 4;
  }

  // float a44 = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a44 = this->_internal_a44();
  uint32_t raw_a44;
  memcpy(&raw_a44, &tmp_a44, sizeof(tmp_a44));
  if (raw_a44 != 0) {
    total_size += 2 + 4;
  }

  // float a45 = 23;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a45 = this->_internal_a45();
  uint32_t raw_a45;
  memcpy(&raw_a45, &tmp_a45, sizeof(tmp_a45));
  if (raw_a45 != 0) {
    total_size += 2 + 4;
  }

  // float a46 = 24;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a46 = this->_internal_a46();
  uint32_t raw_a46;
  memcpy(&raw_a46, &tmp_a46, sizeof(tmp_a46));
  if (raw_a46 != 0) {
    total_size += 2 + 4;
  }

  // float a51 = 25;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a51 = this->_internal_a51();
  uint32_t raw_a51;
  memcpy(&raw_a51, &tmp_a51, sizeof(tmp_a51));
  if (raw_a51 != 0) {
    total_size += 2 + 4;
  }

  // float a52 = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a52 = this->_internal_a52();
  uint32_t raw_a52;
  memcpy(&raw_a52, &tmp_a52, sizeof(tmp_a52));
  if (raw_a52 != 0) {
    total_size += 2 + 4;
  }

  // float a53 = 27;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a53 = this->_internal_a53();
  uint32_t raw_a53;
  memcpy(&raw_a53, &tmp_a53, sizeof(tmp_a53));
  if (raw_a53 != 0) {
    total_size += 2 + 4;
  }

  // float a54 = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a54 = this->_internal_a54();
  uint32_t raw_a54;
  memcpy(&raw_a54, &tmp_a54, sizeof(tmp_a54));
  if (raw_a54 != 0) {
    total_size += 2 + 4;
  }

  // float a55 = 29;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a55 = this->_internal_a55();
  uint32_t raw_a55;
  memcpy(&raw_a55, &tmp_a55, sizeof(tmp_a55));
  if (raw_a55 != 0) {
    total_size += 2 + 4;
  }

  // float a56 = 30;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a56 = this->_internal_a56();
  uint32_t raw_a56;
  memcpy(&raw_a56, &tmp_a56, sizeof(tmp_a56));
  if (raw_a56 != 0) {
    total_size += 2 + 4;
  }

  // float a61 = 31;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a61 = this->_internal_a61();
  uint32_t raw_a61;
  memcpy(&raw_a61, &tmp_a61, sizeof(tmp_a61));
  if (raw_a61 != 0) {
    total_size += 2 + 4;
  }

  // float a62 = 32;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a62 = this->_internal_a62();
  uint32_t raw_a62;
  memcpy(&raw_a62, &tmp_a62, sizeof(tmp_a62));
  if (raw_a62 != 0) {
    total_size += 2 + 4;
  }

  // float a63 = 33;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a63 = this->_internal_a63();
  uint32_t raw_a63;
  memcpy(&raw_a63, &tmp_a63, sizeof(tmp_a63));
  if (raw_a63 != 0) {
    total_size += 2 + 4;
  }

  // float a64 = 34;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a64 = this->_internal_a64();
  uint32_t raw_a64;
  memcpy(&raw_a64, &tmp_a64, sizeof(tmp_a64));
  if (raw_a64 != 0) {
    total_size += 2 + 4;
  }

  // float a65 = 35;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a65 = this->_internal_a65();
  uint32_t raw_a65;
  memcpy(&raw_a65, &tmp_a65, sizeof(tmp_a65));
  if (raw_a65 != 0) {
    total_size += 2 + 4;
  }

  // float a66 = 36;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a66 = this->_internal_a66();
  uint32_t raw_a66;
  memcpy(&raw_a66, &tmp_a66, sizeof(tmp_a66));
  if (raw_a66 != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Matrix6f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Matrix6f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Matrix6f::GetClassData() const { return &_class_data_; }


void Matrix6f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Matrix6f*>(&to_msg);
  auto& from = static_cast<const Matrix6f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Matrix6f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a11 = from._internal_a11();
  uint32_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    _this->_internal_set_a11(from._internal_a11());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a12 = from._internal_a12();
  uint32_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    _this->_internal_set_a12(from._internal_a12());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a13 = from._internal_a13();
  uint32_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    _this->_internal_set_a13(from._internal_a13());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a14 = from._internal_a14();
  uint32_t raw_a14;
  memcpy(&raw_a14, &tmp_a14, sizeof(tmp_a14));
  if (raw_a14 != 0) {
    _this->_internal_set_a14(from._internal_a14());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a15 = from._internal_a15();
  uint32_t raw_a15;
  memcpy(&raw_a15, &tmp_a15, sizeof(tmp_a15));
  if (raw_a15 != 0) {
    _this->_internal_set_a15(from._internal_a15());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a16 = from._internal_a16();
  uint32_t raw_a16;
  memcpy(&raw_a16, &tmp_a16, sizeof(tmp_a16));
  if (raw_a16 != 0) {
    _this->_internal_set_a16(from._internal_a16());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a21 = from._internal_a21();
  uint32_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    _this->_internal_set_a21(from._internal_a21());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a22 = from._internal_a22();
  uint32_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    _this->_internal_set_a22(from._internal_a22());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a23 = from._internal_a23();
  uint32_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    _this->_internal_set_a23(from._internal_a23());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a24 = from._internal_a24();
  uint32_t raw_a24;
  memcpy(&raw_a24, &tmp_a24, sizeof(tmp_a24));
  if (raw_a24 != 0) {
    _this->_internal_set_a24(from._internal_a24());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a25 = from._internal_a25();
  uint32_t raw_a25;
  memcpy(&raw_a25, &tmp_a25, sizeof(tmp_a25));
  if (raw_a25 != 0) {
    _this->_internal_set_a25(from._internal_a25());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a26 = from._internal_a26();
  uint32_t raw_a26;
  memcpy(&raw_a26, &tmp_a26, sizeof(tmp_a26));
  if (raw_a26 != 0) {
    _this->_internal_set_a26(from._internal_a26());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a31 = from._internal_a31();
  uint32_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    _this->_internal_set_a31(from._internal_a31());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a32 = from._internal_a32();
  uint32_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    _this->_internal_set_a32(from._internal_a32());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a33 = from._internal_a33();
  uint32_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    _this->_internal_set_a33(from._internal_a33());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a34 = from._internal_a34();
  uint32_t raw_a34;
  memcpy(&raw_a34, &tmp_a34, sizeof(tmp_a34));
  if (raw_a34 != 0) {
    _this->_internal_set_a34(from._internal_a34());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a35 = from._internal_a35();
  uint32_t raw_a35;
  memcpy(&raw_a35, &tmp_a35, sizeof(tmp_a35));
  if (raw_a35 != 0) {
    _this->_internal_set_a35(from._internal_a35());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a36 = from._internal_a36();
  uint32_t raw_a36;
  memcpy(&raw_a36, &tmp_a36, sizeof(tmp_a36));
  if (raw_a36 != 0) {
    _this->_internal_set_a36(from._internal_a36());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a41 = from._internal_a41();
  uint32_t raw_a41;
  memcpy(&raw_a41, &tmp_a41, sizeof(tmp_a41));
  if (raw_a41 != 0) {
    _this->_internal_set_a41(from._internal_a41());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a42 = from._internal_a42();
  uint32_t raw_a42;
  memcpy(&raw_a42, &tmp_a42, sizeof(tmp_a42));
  if (raw_a42 != 0) {
    _this->_internal_set_a42(from._internal_a42());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a43 = from._internal_a43();
  uint32_t raw_a43;
  memcpy(&raw_a43, &tmp_a43, sizeof(tmp_a43));
  if (raw_a43 != 0) {
    _this->_internal_set_a43(from._internal_a43());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a44 = from._internal_a44();
  uint32_t raw_a44;
  memcpy(&raw_a44, &tmp_a44, sizeof(tmp_a44));
  if (raw_a44 != 0) {
    _this->_internal_set_a44(from._internal_a44());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a45 = from._internal_a45();
  uint32_t raw_a45;
  memcpy(&raw_a45, &tmp_a45, sizeof(tmp_a45));
  if (raw_a45 != 0) {
    _this->_internal_set_a45(from._internal_a45());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a46 = from._internal_a46();
  uint32_t raw_a46;
  memcpy(&raw_a46, &tmp_a46, sizeof(tmp_a46));
  if (raw_a46 != 0) {
    _this->_internal_set_a46(from._internal_a46());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a51 = from._internal_a51();
  uint32_t raw_a51;
  memcpy(&raw_a51, &tmp_a51, sizeof(tmp_a51));
  if (raw_a51 != 0) {
    _this->_internal_set_a51(from._internal_a51());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a52 = from._internal_a52();
  uint32_t raw_a52;
  memcpy(&raw_a52, &tmp_a52, sizeof(tmp_a52));
  if (raw_a52 != 0) {
    _this->_internal_set_a52(from._internal_a52());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a53 = from._internal_a53();
  uint32_t raw_a53;
  memcpy(&raw_a53, &tmp_a53, sizeof(tmp_a53));
  if (raw_a53 != 0) {
    _this->_internal_set_a53(from._internal_a53());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a54 = from._internal_a54();
  uint32_t raw_a54;
  memcpy(&raw_a54, &tmp_a54, sizeof(tmp_a54));
  if (raw_a54 != 0) {
    _this->_internal_set_a54(from._internal_a54());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a55 = from._internal_a55();
  uint32_t raw_a55;
  memcpy(&raw_a55, &tmp_a55, sizeof(tmp_a55));
  if (raw_a55 != 0) {
    _this->_internal_set_a55(from._internal_a55());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a56 = from._internal_a56();
  uint32_t raw_a56;
  memcpy(&raw_a56, &tmp_a56, sizeof(tmp_a56));
  if (raw_a56 != 0) {
    _this->_internal_set_a56(from._internal_a56());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a61 = from._internal_a61();
  uint32_t raw_a61;
  memcpy(&raw_a61, &tmp_a61, sizeof(tmp_a61));
  if (raw_a61 != 0) {
    _this->_internal_set_a61(from._internal_a61());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a62 = from._internal_a62();
  uint32_t raw_a62;
  memcpy(&raw_a62, &tmp_a62, sizeof(tmp_a62));
  if (raw_a62 != 0) {
    _this->_internal_set_a62(from._internal_a62());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a63 = from._internal_a63();
  uint32_t raw_a63;
  memcpy(&raw_a63, &tmp_a63, sizeof(tmp_a63));
  if (raw_a63 != 0) {
    _this->_internal_set_a63(from._internal_a63());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a64 = from._internal_a64();
  uint32_t raw_a64;
  memcpy(&raw_a64, &tmp_a64, sizeof(tmp_a64));
  if (raw_a64 != 0) {
    _this->_internal_set_a64(from._internal_a64());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a65 = from._internal_a65();
  uint32_t raw_a65;
  memcpy(&raw_a65, &tmp_a65, sizeof(tmp_a65));
  if (raw_a65 != 0) {
    _this->_internal_set_a65(from._internal_a65());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a66 = from._internal_a66();
  uint32_t raw_a66;
  memcpy(&raw_a66, &tmp_a66, sizeof(tmp_a66));
  if (raw_a66 != 0) {
    _this->_internal_set_a66(from._internal_a66());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Matrix6f::CopyFrom(const Matrix6f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Matrix6f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix6f::IsInitialized() const {
  return true;
}

void Matrix6f::InternalSwap(Matrix6f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix6f, _impl_.a66_)
      + sizeof(Matrix6f::_impl_.a66_)
      - PROTOBUF_FIELD_OFFSET(Matrix6f, _impl_.a11_)>(
          reinterpret_cast<char*>(&_impl_.a11_),
          reinterpret_cast<char*>(&other->_impl_.a11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix6f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fMatrix_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace geometry_msgs
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Matrix2d*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Matrix2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Matrix2d >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Matrix3d*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Matrix3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Matrix3d >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Matrix4d*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Matrix4d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Matrix4d >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Matrix6d*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Matrix6d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Matrix6d >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Matrix2f*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Matrix2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Matrix2f >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Matrix3f*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Matrix3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Matrix3f >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Matrix4f*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Matrix4f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Matrix4f >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Matrix6f*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Matrix6f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Matrix6f >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
