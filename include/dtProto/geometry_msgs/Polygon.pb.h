// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtProto/geometry_msgs/Polygon.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "dtProto/geometry_msgs/Point.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto;
namespace dtproto {
namespace geometry_msgs {
class Polygon2d;
struct Polygon2dDefaultTypeInternal;
extern Polygon2dDefaultTypeInternal _Polygon2d_default_instance_;
class Polygon3d;
struct Polygon3dDefaultTypeInternal;
extern Polygon3dDefaultTypeInternal _Polygon3d_default_instance_;
}  // namespace geometry_msgs
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> ::dtproto::geometry_msgs::Polygon2d* Arena::CreateMaybeMessage<::dtproto::geometry_msgs::Polygon2d>(Arena*);
template<> ::dtproto::geometry_msgs::Polygon3d* Arena::CreateMaybeMessage<::dtproto::geometry_msgs::Polygon3d>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dtproto {
namespace geometry_msgs {

// ===================================================================

class Polygon2d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.geometry_msgs.Polygon2d) */ {
 public:
  inline Polygon2d() : Polygon2d(nullptr) {}
  ~Polygon2d() override;
  explicit PROTOBUF_CONSTEXPR Polygon2d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon2d(const Polygon2d& from);
  Polygon2d(Polygon2d&& from) noexcept
    : Polygon2d() {
    *this = ::std::move(from);
  }

  inline Polygon2d& operator=(const Polygon2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon2d& operator=(Polygon2d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polygon2d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon2d* internal_default_instance() {
    return reinterpret_cast<const Polygon2d*>(
               &_Polygon2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Polygon2d& a, Polygon2d& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon2d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polygon2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Polygon2d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Polygon2d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Polygon2d& from) {
    Polygon2d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon2d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.geometry_msgs.Polygon2d";
  }
  protected:
  explicit Polygon2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexFieldNumber = 3,
    kCenterFieldNumber = 1,
    kNormalFieldNumber = 2,
    kVertexCountFieldNumber = 4,
  };
  // repeated .dtproto.geometry_msgs.Point2d vertex = 3;
  int vertex_size() const;
  private:
  int _internal_vertex_size() const;
  public:
  void clear_vertex();
  ::dtproto::geometry_msgs::Point2d* mutable_vertex(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point2d >*
      mutable_vertex();
  private:
  const ::dtproto::geometry_msgs::Point2d& _internal_vertex(int index) const;
  ::dtproto::geometry_msgs::Point2d* _internal_add_vertex();
  public:
  const ::dtproto::geometry_msgs::Point2d& vertex(int index) const;
  ::dtproto::geometry_msgs::Point2d* add_vertex();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point2d >&
      vertex() const;

  // .dtproto.geometry_msgs.Point2d center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::dtproto::geometry_msgs::Point2d& center() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point2d* release_center();
  ::dtproto::geometry_msgs::Point2d* mutable_center();
  void set_allocated_center(::dtproto::geometry_msgs::Point2d* center);
  private:
  const ::dtproto::geometry_msgs::Point2d& _internal_center() const;
  ::dtproto::geometry_msgs::Point2d* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::dtproto::geometry_msgs::Point2d* center);
  ::dtproto::geometry_msgs::Point2d* unsafe_arena_release_center();

  // .dtproto.geometry_msgs.Point2d normal = 2;
  bool has_normal() const;
  private:
  bool _internal_has_normal() const;
  public:
  void clear_normal();
  const ::dtproto::geometry_msgs::Point2d& normal() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point2d* release_normal();
  ::dtproto::geometry_msgs::Point2d* mutable_normal();
  void set_allocated_normal(::dtproto::geometry_msgs::Point2d* normal);
  private:
  const ::dtproto::geometry_msgs::Point2d& _internal_normal() const;
  ::dtproto::geometry_msgs::Point2d* _internal_mutable_normal();
  public:
  void unsafe_arena_set_allocated_normal(
      ::dtproto::geometry_msgs::Point2d* normal);
  ::dtproto::geometry_msgs::Point2d* unsafe_arena_release_normal();

  // uint32 vertex_count = 4;
  void clear_vertex_count();
  uint32_t vertex_count() const;
  void set_vertex_count(uint32_t value);
  private:
  uint32_t _internal_vertex_count() const;
  void _internal_set_vertex_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.geometry_msgs.Polygon2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point2d > vertex_;
    ::dtproto::geometry_msgs::Point2d* center_;
    ::dtproto::geometry_msgs::Point2d* normal_;
    uint32_t vertex_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto;
};
// -------------------------------------------------------------------

class Polygon3d final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.geometry_msgs.Polygon3d) */ {
 public:
  inline Polygon3d() : Polygon3d(nullptr) {}
  ~Polygon3d() override;
  explicit PROTOBUF_CONSTEXPR Polygon3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Polygon3d(const Polygon3d& from);
  Polygon3d(Polygon3d&& from) noexcept
    : Polygon3d() {
    *this = ::std::move(from);
  }

  inline Polygon3d& operator=(const Polygon3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon3d& operator=(Polygon3d&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Polygon3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Polygon3d* internal_default_instance() {
    return reinterpret_cast<const Polygon3d*>(
               &_Polygon3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Polygon3d& a, Polygon3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon3d* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Polygon3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Polygon3d>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Polygon3d& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Polygon3d& from) {
    Polygon3d::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon3d* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.geometry_msgs.Polygon3d";
  }
  protected:
  explicit Polygon3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexFieldNumber = 3,
    kCenterFieldNumber = 1,
    kNormalFieldNumber = 2,
    kVertexCountFieldNumber = 4,
  };
  // repeated .dtproto.geometry_msgs.Point3d vertex = 3;
  int vertex_size() const;
  private:
  int _internal_vertex_size() const;
  public:
  void clear_vertex();
  ::dtproto::geometry_msgs::Point3d* mutable_vertex(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
      mutable_vertex();
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_vertex(int index) const;
  ::dtproto::geometry_msgs::Point3d* _internal_add_vertex();
  public:
  const ::dtproto::geometry_msgs::Point3d& vertex(int index) const;
  ::dtproto::geometry_msgs::Point3d* add_vertex();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
      vertex() const;

  // .dtproto.geometry_msgs.Point3d center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::dtproto::geometry_msgs::Point3d& center() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_center();
  ::dtproto::geometry_msgs::Point3d* mutable_center();
  void set_allocated_center(::dtproto::geometry_msgs::Point3d* center);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_center() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::dtproto::geometry_msgs::Point3d* center);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_center();

  // .dtproto.geometry_msgs.Point3d normal = 2;
  bool has_normal() const;
  private:
  bool _internal_has_normal() const;
  public:
  void clear_normal();
  const ::dtproto::geometry_msgs::Point3d& normal() const;
  PROTOBUF_NODISCARD ::dtproto::geometry_msgs::Point3d* release_normal();
  ::dtproto::geometry_msgs::Point3d* mutable_normal();
  void set_allocated_normal(::dtproto::geometry_msgs::Point3d* normal);
  private:
  const ::dtproto::geometry_msgs::Point3d& _internal_normal() const;
  ::dtproto::geometry_msgs::Point3d* _internal_mutable_normal();
  public:
  void unsafe_arena_set_allocated_normal(
      ::dtproto::geometry_msgs::Point3d* normal);
  ::dtproto::geometry_msgs::Point3d* unsafe_arena_release_normal();

  // uint32 vertex_count = 4;
  void clear_vertex_count();
  uint32_t vertex_count() const;
  void set_vertex_count(uint32_t value);
  private:
  uint32_t _internal_vertex_count() const;
  void _internal_set_vertex_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.geometry_msgs.Polygon3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d > vertex_;
    ::dtproto::geometry_msgs::Point3d* center_;
    ::dtproto::geometry_msgs::Point3d* normal_;
    uint32_t vertex_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Polygon2d

// .dtproto.geometry_msgs.Point2d center = 1;
inline bool Polygon2d::_internal_has_center() const {
  return this != internal_default_instance() && _impl_.center_ != nullptr;
}
inline bool Polygon2d::has_center() const {
  return _internal_has_center();
}
inline const ::dtproto::geometry_msgs::Point2d& Polygon2d::_internal_center() const {
  const ::dtproto::geometry_msgs::Point2d* p = _impl_.center_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point2d&>(
      ::dtproto::geometry_msgs::_Point2d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point2d& Polygon2d::center() const {
  // @@protoc_insertion_point(field_get:dtproto.geometry_msgs.Polygon2d.center)
  return _internal_center();
}
inline void Polygon2d::unsafe_arena_set_allocated_center(
    ::dtproto::geometry_msgs::Point2d* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  _impl_.center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.geometry_msgs.Polygon2d.center)
}
inline ::dtproto::geometry_msgs::Point2d* Polygon2d::release_center() {
  
  ::dtproto::geometry_msgs::Point2d* temp = _impl_.center_;
  _impl_.center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point2d* Polygon2d::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:dtproto.geometry_msgs.Polygon2d.center)
  
  ::dtproto::geometry_msgs::Point2d* temp = _impl_.center_;
  _impl_.center_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point2d* Polygon2d::_internal_mutable_center() {
  
  if (_impl_.center_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point2d>(GetArenaForAllocation());
    _impl_.center_ = p;
  }
  return _impl_.center_;
}
inline ::dtproto::geometry_msgs::Point2d* Polygon2d::mutable_center() {
  ::dtproto::geometry_msgs::Point2d* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:dtproto.geometry_msgs.Polygon2d.center)
  return _msg;
}
inline void Polygon2d::set_allocated_center(::dtproto::geometry_msgs::Point2d* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center));
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.center_ = center;
  // @@protoc_insertion_point(field_set_allocated:dtproto.geometry_msgs.Polygon2d.center)
}

// .dtproto.geometry_msgs.Point2d normal = 2;
inline bool Polygon2d::_internal_has_normal() const {
  return this != internal_default_instance() && _impl_.normal_ != nullptr;
}
inline bool Polygon2d::has_normal() const {
  return _internal_has_normal();
}
inline const ::dtproto::geometry_msgs::Point2d& Polygon2d::_internal_normal() const {
  const ::dtproto::geometry_msgs::Point2d* p = _impl_.normal_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point2d&>(
      ::dtproto::geometry_msgs::_Point2d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point2d& Polygon2d::normal() const {
  // @@protoc_insertion_point(field_get:dtproto.geometry_msgs.Polygon2d.normal)
  return _internal_normal();
}
inline void Polygon2d::unsafe_arena_set_allocated_normal(
    ::dtproto::geometry_msgs::Point2d* normal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normal_);
  }
  _impl_.normal_ = normal;
  if (normal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.geometry_msgs.Polygon2d.normal)
}
inline ::dtproto::geometry_msgs::Point2d* Polygon2d::release_normal() {
  
  ::dtproto::geometry_msgs::Point2d* temp = _impl_.normal_;
  _impl_.normal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point2d* Polygon2d::unsafe_arena_release_normal() {
  // @@protoc_insertion_point(field_release:dtproto.geometry_msgs.Polygon2d.normal)
  
  ::dtproto::geometry_msgs::Point2d* temp = _impl_.normal_;
  _impl_.normal_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point2d* Polygon2d::_internal_mutable_normal() {
  
  if (_impl_.normal_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point2d>(GetArenaForAllocation());
    _impl_.normal_ = p;
  }
  return _impl_.normal_;
}
inline ::dtproto::geometry_msgs::Point2d* Polygon2d::mutable_normal() {
  ::dtproto::geometry_msgs::Point2d* _msg = _internal_mutable_normal();
  // @@protoc_insertion_point(field_mutable:dtproto.geometry_msgs.Polygon2d.normal)
  return _msg;
}
inline void Polygon2d::set_allocated_normal(::dtproto::geometry_msgs::Point2d* normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normal_);
  }
  if (normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normal));
    if (message_arena != submessage_arena) {
      normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:dtproto.geometry_msgs.Polygon2d.normal)
}

// repeated .dtproto.geometry_msgs.Point2d vertex = 3;
inline int Polygon2d::_internal_vertex_size() const {
  return _impl_.vertex_.size();
}
inline int Polygon2d::vertex_size() const {
  return _internal_vertex_size();
}
inline ::dtproto::geometry_msgs::Point2d* Polygon2d::mutable_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.geometry_msgs.Polygon2d.vertex)
  return _impl_.vertex_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point2d >*
Polygon2d::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.geometry_msgs.Polygon2d.vertex)
  return &_impl_.vertex_;
}
inline const ::dtproto::geometry_msgs::Point2d& Polygon2d::_internal_vertex(int index) const {
  return _impl_.vertex_.Get(index);
}
inline const ::dtproto::geometry_msgs::Point2d& Polygon2d::vertex(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.geometry_msgs.Polygon2d.vertex)
  return _internal_vertex(index);
}
inline ::dtproto::geometry_msgs::Point2d* Polygon2d::_internal_add_vertex() {
  return _impl_.vertex_.Add();
}
inline ::dtproto::geometry_msgs::Point2d* Polygon2d::add_vertex() {
  ::dtproto::geometry_msgs::Point2d* _add = _internal_add_vertex();
  // @@protoc_insertion_point(field_add:dtproto.geometry_msgs.Polygon2d.vertex)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point2d >&
Polygon2d::vertex() const {
  // @@protoc_insertion_point(field_list:dtproto.geometry_msgs.Polygon2d.vertex)
  return _impl_.vertex_;
}

// uint32 vertex_count = 4;
inline void Polygon2d::clear_vertex_count() {
  _impl_.vertex_count_ = 0u;
}
inline uint32_t Polygon2d::_internal_vertex_count() const {
  return _impl_.vertex_count_;
}
inline uint32_t Polygon2d::vertex_count() const {
  // @@protoc_insertion_point(field_get:dtproto.geometry_msgs.Polygon2d.vertex_count)
  return _internal_vertex_count();
}
inline void Polygon2d::_internal_set_vertex_count(uint32_t value) {
  
  _impl_.vertex_count_ = value;
}
inline void Polygon2d::set_vertex_count(uint32_t value) {
  _internal_set_vertex_count(value);
  // @@protoc_insertion_point(field_set:dtproto.geometry_msgs.Polygon2d.vertex_count)
}

// -------------------------------------------------------------------

// Polygon3d

// .dtproto.geometry_msgs.Point3d center = 1;
inline bool Polygon3d::_internal_has_center() const {
  return this != internal_default_instance() && _impl_.center_ != nullptr;
}
inline bool Polygon3d::has_center() const {
  return _internal_has_center();
}
inline const ::dtproto::geometry_msgs::Point3d& Polygon3d::_internal_center() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.center_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& Polygon3d::center() const {
  // @@protoc_insertion_point(field_get:dtproto.geometry_msgs.Polygon3d.center)
  return _internal_center();
}
inline void Polygon3d::unsafe_arena_set_allocated_center(
    ::dtproto::geometry_msgs::Point3d* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  _impl_.center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.geometry_msgs.Polygon3d.center)
}
inline ::dtproto::geometry_msgs::Point3d* Polygon3d::release_center() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.center_;
  _impl_.center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* Polygon3d::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:dtproto.geometry_msgs.Polygon3d.center)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.center_;
  _impl_.center_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* Polygon3d::_internal_mutable_center() {
  
  if (_impl_.center_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.center_ = p;
  }
  return _impl_.center_;
}
inline ::dtproto::geometry_msgs::Point3d* Polygon3d::mutable_center() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:dtproto.geometry_msgs.Polygon3d.center)
  return _msg;
}
inline void Polygon3d::set_allocated_center(::dtproto::geometry_msgs::Point3d* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.center_);
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center));
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.center_ = center;
  // @@protoc_insertion_point(field_set_allocated:dtproto.geometry_msgs.Polygon3d.center)
}

// .dtproto.geometry_msgs.Point3d normal = 2;
inline bool Polygon3d::_internal_has_normal() const {
  return this != internal_default_instance() && _impl_.normal_ != nullptr;
}
inline bool Polygon3d::has_normal() const {
  return _internal_has_normal();
}
inline const ::dtproto::geometry_msgs::Point3d& Polygon3d::_internal_normal() const {
  const ::dtproto::geometry_msgs::Point3d* p = _impl_.normal_;
  return p != nullptr ? *p : reinterpret_cast<const ::dtproto::geometry_msgs::Point3d&>(
      ::dtproto::geometry_msgs::_Point3d_default_instance_);
}
inline const ::dtproto::geometry_msgs::Point3d& Polygon3d::normal() const {
  // @@protoc_insertion_point(field_get:dtproto.geometry_msgs.Polygon3d.normal)
  return _internal_normal();
}
inline void Polygon3d::unsafe_arena_set_allocated_normal(
    ::dtproto::geometry_msgs::Point3d* normal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normal_);
  }
  _impl_.normal_ = normal;
  if (normal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dtproto.geometry_msgs.Polygon3d.normal)
}
inline ::dtproto::geometry_msgs::Point3d* Polygon3d::release_normal() {
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.normal_;
  _impl_.normal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* Polygon3d::unsafe_arena_release_normal() {
  // @@protoc_insertion_point(field_release:dtproto.geometry_msgs.Polygon3d.normal)
  
  ::dtproto::geometry_msgs::Point3d* temp = _impl_.normal_;
  _impl_.normal_ = nullptr;
  return temp;
}
inline ::dtproto::geometry_msgs::Point3d* Polygon3d::_internal_mutable_normal() {
  
  if (_impl_.normal_ == nullptr) {
    auto* p = CreateMaybeMessage<::dtproto::geometry_msgs::Point3d>(GetArenaForAllocation());
    _impl_.normal_ = p;
  }
  return _impl_.normal_;
}
inline ::dtproto::geometry_msgs::Point3d* Polygon3d::mutable_normal() {
  ::dtproto::geometry_msgs::Point3d* _msg = _internal_mutable_normal();
  // @@protoc_insertion_point(field_mutable:dtproto.geometry_msgs.Polygon3d.normal)
  return _msg;
}
inline void Polygon3d::set_allocated_normal(::dtproto::geometry_msgs::Point3d* normal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.normal_);
  }
  if (normal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(normal));
    if (message_arena != submessage_arena) {
      normal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:dtproto.geometry_msgs.Polygon3d.normal)
}

// repeated .dtproto.geometry_msgs.Point3d vertex = 3;
inline int Polygon3d::_internal_vertex_size() const {
  return _impl_.vertex_.size();
}
inline int Polygon3d::vertex_size() const {
  return _internal_vertex_size();
}
inline ::dtproto::geometry_msgs::Point3d* Polygon3d::mutable_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:dtproto.geometry_msgs.Polygon3d.vertex)
  return _impl_.vertex_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >*
Polygon3d::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.geometry_msgs.Polygon3d.vertex)
  return &_impl_.vertex_;
}
inline const ::dtproto::geometry_msgs::Point3d& Polygon3d::_internal_vertex(int index) const {
  return _impl_.vertex_.Get(index);
}
inline const ::dtproto::geometry_msgs::Point3d& Polygon3d::vertex(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.geometry_msgs.Polygon3d.vertex)
  return _internal_vertex(index);
}
inline ::dtproto::geometry_msgs::Point3d* Polygon3d::_internal_add_vertex() {
  return _impl_.vertex_.Add();
}
inline ::dtproto::geometry_msgs::Point3d* Polygon3d::add_vertex() {
  ::dtproto::geometry_msgs::Point3d* _add = _internal_add_vertex();
  // @@protoc_insertion_point(field_add:dtproto.geometry_msgs.Polygon3d.vertex)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dtproto::geometry_msgs::Point3d >&
Polygon3d::vertex() const {
  // @@protoc_insertion_point(field_list:dtproto.geometry_msgs.Polygon3d.vertex)
  return _impl_.vertex_;
}

// uint32 vertex_count = 4;
inline void Polygon3d::clear_vertex_count() {
  _impl_.vertex_count_ = 0u;
}
inline uint32_t Polygon3d::_internal_vertex_count() const {
  return _impl_.vertex_count_;
}
inline uint32_t Polygon3d::vertex_count() const {
  // @@protoc_insertion_point(field_get:dtproto.geometry_msgs.Polygon3d.vertex_count)
  return _internal_vertex_count();
}
inline void Polygon3d::_internal_set_vertex_count(uint32_t value) {
  
  _impl_.vertex_count_ = value;
}
inline void Polygon3d::set_vertex_count(uint32_t value) {
  _internal_set_vertex_count(value);
  // @@protoc_insertion_point(field_set:dtproto.geometry_msgs.Polygon3d.vertex_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace geometry_msgs
}  // namespace dtproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dtProto_2fgeometry_5fmsgs_2fPolygon_2eproto
