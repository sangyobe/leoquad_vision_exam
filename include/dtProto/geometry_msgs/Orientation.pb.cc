// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtProto/geometry_msgs/Orientation.proto

#include "dtProto/geometry_msgs/Orientation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dtproto {
namespace geometry_msgs {
PROTOBUF_CONSTEXPR Euler::Euler(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.r_)*/0
  , /*decltype(_impl_.p_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EulerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EulerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EulerDefaultTypeInternal() {}
  union {
    Euler _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EulerDefaultTypeInternal _Euler_default_instance_;
PROTOBUF_CONSTEXPR Quaternion::Quaternion(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuaternionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuaternionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuaternionDefaultTypeInternal _Quaternion_default_instance_;
PROTOBUF_CONSTEXPR Rotation::Rotation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a11_)*/0
  , /*decltype(_impl_.a12_)*/0
  , /*decltype(_impl_.a13_)*/0
  , /*decltype(_impl_.a21_)*/0
  , /*decltype(_impl_.a22_)*/0
  , /*decltype(_impl_.a23_)*/0
  , /*decltype(_impl_.a31_)*/0
  , /*decltype(_impl_.a32_)*/0
  , /*decltype(_impl_.a33_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotationDefaultTypeInternal() {}
  union {
    Rotation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotationDefaultTypeInternal _Rotation_default_instance_;
}  // namespace geometry_msgs
}  // namespace dtproto
static ::_pb::Metadata file_level_metadata_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto = nullptr;

const uint32_t TableStruct_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Euler, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Euler, _impl_.r_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Euler, _impl_.p_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Euler, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Quaternion, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Quaternion, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Quaternion, _impl_.z_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Quaternion, _impl_.w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Rotation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Rotation, _impl_.a11_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Rotation, _impl_.a12_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Rotation, _impl_.a13_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Rotation, _impl_.a21_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Rotation, _impl_.a22_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Rotation, _impl_.a23_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Rotation, _impl_.a31_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Rotation, _impl_.a32_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Rotation, _impl_.a33_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dtproto::geometry_msgs::Euler)},
  { 9, -1, -1, sizeof(::dtproto::geometry_msgs::Quaternion)},
  { 19, -1, -1, sizeof(::dtproto::geometry_msgs::Rotation)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dtproto::geometry_msgs::_Euler_default_instance_._instance,
  &::dtproto::geometry_msgs::_Quaternion_default_instance_._instance,
  &::dtproto::geometry_msgs::_Rotation_default_instance_._instance,
};

const char descriptor_table_protodef_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'dtProto/geometry_msgs/Orientation.prot"
  "o\022\025dtproto.geometry_msgs\"(\n\005Euler\022\t\n\001r\030\001"
  " \001(\001\022\t\n\001p\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\"8\n\nQuaternion"
  "\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001w\030\004"
  " \001(\001\"\177\n\010Rotation\022\013\n\003a11\030\001 \001(\001\022\013\n\003a12\030\002 \001"
  "(\001\022\013\n\003a13\030\003 \001(\001\022\013\n\003a21\030\004 \001(\001\022\013\n\003a22\030\005 \001("
  "\001\022\013\n\003a23\030\006 \001(\001\022\013\n\003a31\030\007 \001(\001\022\013\n\003a32\030\010 \001(\001"
  "\022\013\n\003a33\030\t \001(\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto = {
    false, false, 301, descriptor_table_protodef_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto,
    "dtProto/geometry_msgs/Orientation.proto",
    &descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto::offsets,
    file_level_metadata_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto, file_level_enum_descriptors_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto,
    file_level_service_descriptors_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto_getter() {
  return &descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto(&descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto);
namespace dtproto {
namespace geometry_msgs {

// ===================================================================

class Euler::_Internal {
 public:
};

Euler::Euler(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Euler)
}
Euler::Euler(const Euler& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Euler* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){}
    , decltype(_impl_.p_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.r_, &from._impl_.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Euler)
}

inline void Euler::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.r_){0}
    , decltype(_impl_.p_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Euler::~Euler() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Euler)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Euler::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Euler::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Euler::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Euler)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.r_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Euler::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double p = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Euler::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Euler)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double r = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_r = this->_internal_r();
  uint64_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_r(), target);
  }

  // double p = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_p = this->_internal_p();
  uint64_t raw_p;
  memcpy(&raw_p, &tmp_p, sizeof(tmp_p));
  if (raw_p != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_p(), target);
  }

  // double y = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Euler)
  return target;
}

size_t Euler::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Euler)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double r = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_r = this->_internal_r();
  uint64_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    total_size += 1 + 8;
  }

  // double p = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_p = this->_internal_p();
  uint64_t raw_p;
  memcpy(&raw_p, &tmp_p, sizeof(tmp_p));
  if (raw_p != 0) {
    total_size += 1 + 8;
  }

  // double y = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Euler::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Euler::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Euler::GetClassData() const { return &_class_data_; }


void Euler::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Euler*>(&to_msg);
  auto& from = static_cast<const Euler&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Euler)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_r = from._internal_r();
  uint64_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    _this->_internal_set_r(from._internal_r());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_p = from._internal_p();
  uint64_t raw_p;
  memcpy(&raw_p, &tmp_p, sizeof(tmp_p));
  if (raw_p != 0) {
    _this->_internal_set_p(from._internal_p());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Euler::CopyFrom(const Euler& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Euler)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Euler::IsInitialized() const {
  return true;
}

void Euler::InternalSwap(Euler* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Euler, _impl_.y_)
      + sizeof(Euler::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Euler, _impl_.r_)>(
          reinterpret_cast<char*>(&_impl_.r_),
          reinterpret_cast<char*>(&other->_impl_.r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Euler::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto[0]);
}

// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Quaternion* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , decltype(_impl_.w_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.w_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Quaternion)
}

inline void Quaternion::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , decltype(_impl_.w_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Quaternion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Quaternion::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Quaternion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.w_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Quaternion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Quaternion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double w = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_w = this->_internal_w();
  uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Quaternion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double w = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_w = this->_internal_w();
  uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quaternion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Quaternion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quaternion::GetClassData() const { return &_class_data_; }


void Quaternion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Quaternion*>(&to_msg);
  auto& from = static_cast<const Quaternion&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Quaternion)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_w = from._internal_w();
  uint64_t raw_w;
  memcpy(&raw_w, &tmp_w, sizeof(tmp_w));
  if (raw_w != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.w_)
      + sizeof(Quaternion::_impl_.w_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto[1]);
}

// ===================================================================

class Rotation::_Internal {
 public:
};

Rotation::Rotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Rotation)
}
Rotation::Rotation(const Rotation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rotation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){}
    , decltype(_impl_.a12_){}
    , decltype(_impl_.a13_){}
    , decltype(_impl_.a21_){}
    , decltype(_impl_.a22_){}
    , decltype(_impl_.a23_){}
    , decltype(_impl_.a31_){}
    , decltype(_impl_.a32_){}
    , decltype(_impl_.a33_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a11_, &from._impl_.a11_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a33_) -
    reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a33_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Rotation)
}

inline void Rotation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a11_){0}
    , decltype(_impl_.a12_){0}
    , decltype(_impl_.a13_){0}
    , decltype(_impl_.a21_){0}
    , decltype(_impl_.a22_){0}
    , decltype(_impl_.a23_){0}
    , decltype(_impl_.a31_){0}
    , decltype(_impl_.a32_){0}
    , decltype(_impl_.a33_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rotation::~Rotation() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Rotation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rotation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rotation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Rotation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a33_) -
      reinterpret_cast<char*>(&_impl_.a11_)) + sizeof(_impl_.a33_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rotation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double a11 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.a11_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a12 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.a12_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a13 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.a13_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a21 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.a21_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a22 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.a22_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a23 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.a23_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a31 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.a31_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a32 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.a32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a33 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.a33_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rotation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Rotation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double a11 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = this->_internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_a11(), target);
  }

  // double a12 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = this->_internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_a12(), target);
  }

  // double a13 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a13 = this->_internal_a13();
  uint64_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_a13(), target);
  }

  // double a21 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = this->_internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_a21(), target);
  }

  // double a22 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = this->_internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_a22(), target);
  }

  // double a23 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a23 = this->_internal_a23();
  uint64_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_a23(), target);
  }

  // double a31 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a31 = this->_internal_a31();
  uint64_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_a31(), target);
  }

  // double a32 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a32 = this->_internal_a32();
  uint64_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_a32(), target);
  }

  // double a33 = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a33 = this->_internal_a33();
  uint64_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_a33(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Rotation)
  return target;
}

size_t Rotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Rotation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double a11 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = this->_internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    total_size += 1 + 8;
  }

  // double a12 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = this->_internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    total_size += 1 + 8;
  }

  // double a13 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a13 = this->_internal_a13();
  uint64_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    total_size += 1 + 8;
  }

  // double a21 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = this->_internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    total_size += 1 + 8;
  }

  // double a22 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = this->_internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    total_size += 1 + 8;
  }

  // double a23 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a23 = this->_internal_a23();
  uint64_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    total_size += 1 + 8;
  }

  // double a31 = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a31 = this->_internal_a31();
  uint64_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    total_size += 1 + 8;
  }

  // double a32 = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a32 = this->_internal_a32();
  uint64_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    total_size += 1 + 8;
  }

  // double a33 = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a33 = this->_internal_a33();
  uint64_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rotation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rotation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rotation::GetClassData() const { return &_class_data_; }


void Rotation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rotation*>(&to_msg);
  auto& from = static_cast<const Rotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Rotation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a11 = from._internal_a11();
  uint64_t raw_a11;
  memcpy(&raw_a11, &tmp_a11, sizeof(tmp_a11));
  if (raw_a11 != 0) {
    _this->_internal_set_a11(from._internal_a11());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a12 = from._internal_a12();
  uint64_t raw_a12;
  memcpy(&raw_a12, &tmp_a12, sizeof(tmp_a12));
  if (raw_a12 != 0) {
    _this->_internal_set_a12(from._internal_a12());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a13 = from._internal_a13();
  uint64_t raw_a13;
  memcpy(&raw_a13, &tmp_a13, sizeof(tmp_a13));
  if (raw_a13 != 0) {
    _this->_internal_set_a13(from._internal_a13());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a21 = from._internal_a21();
  uint64_t raw_a21;
  memcpy(&raw_a21, &tmp_a21, sizeof(tmp_a21));
  if (raw_a21 != 0) {
    _this->_internal_set_a21(from._internal_a21());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a22 = from._internal_a22();
  uint64_t raw_a22;
  memcpy(&raw_a22, &tmp_a22, sizeof(tmp_a22));
  if (raw_a22 != 0) {
    _this->_internal_set_a22(from._internal_a22());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a23 = from._internal_a23();
  uint64_t raw_a23;
  memcpy(&raw_a23, &tmp_a23, sizeof(tmp_a23));
  if (raw_a23 != 0) {
    _this->_internal_set_a23(from._internal_a23());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a31 = from._internal_a31();
  uint64_t raw_a31;
  memcpy(&raw_a31, &tmp_a31, sizeof(tmp_a31));
  if (raw_a31 != 0) {
    _this->_internal_set_a31(from._internal_a31());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a32 = from._internal_a32();
  uint64_t raw_a32;
  memcpy(&raw_a32, &tmp_a32, sizeof(tmp_a32));
  if (raw_a32 != 0) {
    _this->_internal_set_a32(from._internal_a32());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a33 = from._internal_a33();
  uint64_t raw_a33;
  memcpy(&raw_a33, &tmp_a33, sizeof(tmp_a33));
  if (raw_a33 != 0) {
    _this->_internal_set_a33(from._internal_a33());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rotation::CopyFrom(const Rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rotation::IsInitialized() const {
  return true;
}

void Rotation::InternalSwap(Rotation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rotation, _impl_.a33_)
      + sizeof(Rotation::_impl_.a33_)
      - PROTOBUF_FIELD_OFFSET(Rotation, _impl_.a11_)>(
          reinterpret_cast<char*>(&_impl_.a11_),
          reinterpret_cast<char*>(&other->_impl_.a11_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fOrientation_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace geometry_msgs
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Euler*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Euler >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Euler >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Quaternion*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Rotation*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Rotation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Rotation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
