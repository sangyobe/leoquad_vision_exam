// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtProto/geometry_msgs/Vector.proto

#include "dtProto/geometry_msgs/Vector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dtproto {
namespace geometry_msgs {
PROTOBUF_CONSTEXPR VectorXd::VectorXd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.val_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorXdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorXdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorXdDefaultTypeInternal() {}
  union {
    VectorXd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorXdDefaultTypeInternal _VectorXd_default_instance_;
PROTOBUF_CONSTEXPR Vector2d::Vector2d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector2dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2dDefaultTypeInternal() {}
  union {
    Vector2d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2dDefaultTypeInternal _Vector2d_default_instance_;
PROTOBUF_CONSTEXPR Vector3d::Vector3d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_.a3_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3dDefaultTypeInternal() {}
  union {
    Vector3d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3dDefaultTypeInternal _Vector3d_default_instance_;
PROTOBUF_CONSTEXPR Vector4d::Vector4d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_.a3_)*/0
  , /*decltype(_impl_.a4_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector4dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector4dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector4dDefaultTypeInternal() {}
  union {
    Vector4d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector4dDefaultTypeInternal _Vector4d_default_instance_;
PROTOBUF_CONSTEXPR Vector6d::Vector6d(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_.a3_)*/0
  , /*decltype(_impl_.a4_)*/0
  , /*decltype(_impl_.a5_)*/0
  , /*decltype(_impl_.a6_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector6dDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector6dDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector6dDefaultTypeInternal() {}
  union {
    Vector6d _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector6dDefaultTypeInternal _Vector6d_default_instance_;
PROTOBUF_CONSTEXPR VectorXf::VectorXf(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.val_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorXfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorXfDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorXfDefaultTypeInternal() {}
  union {
    VectorXf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorXfDefaultTypeInternal _VectorXf_default_instance_;
PROTOBUF_CONSTEXPR Vector2f::Vector2f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector2fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2fDefaultTypeInternal() {}
  union {
    Vector2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2fDefaultTypeInternal _Vector2f_default_instance_;
PROTOBUF_CONSTEXPR Vector3f::Vector3f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_.a3_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3fDefaultTypeInternal() {}
  union {
    Vector3f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3fDefaultTypeInternal _Vector3f_default_instance_;
PROTOBUF_CONSTEXPR Vector4f::Vector4f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_.a3_)*/0
  , /*decltype(_impl_.a4_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector4fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector4fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector4fDefaultTypeInternal() {}
  union {
    Vector4f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector4fDefaultTypeInternal _Vector4f_default_instance_;
PROTOBUF_CONSTEXPR Vector6f::Vector6f(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_.a3_)*/0
  , /*decltype(_impl_.a4_)*/0
  , /*decltype(_impl_.a5_)*/0
  , /*decltype(_impl_.a6_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector6fDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector6fDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector6fDefaultTypeInternal() {}
  union {
    Vector6f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector6fDefaultTypeInternal _Vector6f_default_instance_;
PROTOBUF_CONSTEXPR VectorXui32::VectorXui32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.val_)*/{}
  , /*decltype(_impl_._val_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorXui32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorXui32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorXui32DefaultTypeInternal() {}
  union {
    VectorXui32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorXui32DefaultTypeInternal _VectorXui32_default_instance_;
PROTOBUF_CONSTEXPR Vector2ui32::Vector2ui32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0u
  , /*decltype(_impl_.a2_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector2ui32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2ui32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2ui32DefaultTypeInternal() {}
  union {
    Vector2ui32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2ui32DefaultTypeInternal _Vector2ui32_default_instance_;
PROTOBUF_CONSTEXPR Vector3ui32::Vector3ui32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0u
  , /*decltype(_impl_.a2_)*/0u
  , /*decltype(_impl_.a3_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3ui32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3ui32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3ui32DefaultTypeInternal() {}
  union {
    Vector3ui32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3ui32DefaultTypeInternal _Vector3ui32_default_instance_;
PROTOBUF_CONSTEXPR Vector4ui32::Vector4ui32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0u
  , /*decltype(_impl_.a2_)*/0u
  , /*decltype(_impl_.a3_)*/0u
  , /*decltype(_impl_.a4_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector4ui32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector4ui32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector4ui32DefaultTypeInternal() {}
  union {
    Vector4ui32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector4ui32DefaultTypeInternal _Vector4ui32_default_instance_;
PROTOBUF_CONSTEXPR Vector6ui32::Vector6ui32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0u
  , /*decltype(_impl_.a2_)*/0u
  , /*decltype(_impl_.a3_)*/0u
  , /*decltype(_impl_.a4_)*/0u
  , /*decltype(_impl_.a5_)*/0u
  , /*decltype(_impl_.a6_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector6ui32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector6ui32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector6ui32DefaultTypeInternal() {}
  union {
    Vector6ui32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector6ui32DefaultTypeInternal _Vector6ui32_default_instance_;
PROTOBUF_CONSTEXPR VectorXi32::VectorXi32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.val_)*/{}
  , /*decltype(_impl_._val_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorXi32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorXi32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorXi32DefaultTypeInternal() {}
  union {
    VectorXi32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorXi32DefaultTypeInternal _VectorXi32_default_instance_;
PROTOBUF_CONSTEXPR Vector2i32::Vector2i32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector2i32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2i32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2i32DefaultTypeInternal() {}
  union {
    Vector2i32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2i32DefaultTypeInternal _Vector2i32_default_instance_;
PROTOBUF_CONSTEXPR Vector3i32::Vector3i32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_.a3_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3i32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3i32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3i32DefaultTypeInternal() {}
  union {
    Vector3i32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3i32DefaultTypeInternal _Vector3i32_default_instance_;
PROTOBUF_CONSTEXPR Vector4i32::Vector4i32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_.a3_)*/0
  , /*decltype(_impl_.a4_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector4i32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector4i32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector4i32DefaultTypeInternal() {}
  union {
    Vector4i32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector4i32DefaultTypeInternal _Vector4i32_default_instance_;
PROTOBUF_CONSTEXPR Vector6i32::Vector6i32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/0
  , /*decltype(_impl_.a2_)*/0
  , /*decltype(_impl_.a3_)*/0
  , /*decltype(_impl_.a4_)*/0
  , /*decltype(_impl_.a5_)*/0
  , /*decltype(_impl_.a6_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector6i32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector6i32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector6i32DefaultTypeInternal() {}
  union {
    Vector6i32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector6i32DefaultTypeInternal _Vector6i32_default_instance_;
PROTOBUF_CONSTEXPR VectorXb::VectorXb(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.val_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorXbDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorXbDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorXbDefaultTypeInternal() {}
  union {
    VectorXb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorXbDefaultTypeInternal _VectorXb_default_instance_;
PROTOBUF_CONSTEXPR Vector2b::Vector2b(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/false
  , /*decltype(_impl_.a2_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector2bDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector2bDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector2bDefaultTypeInternal() {}
  union {
    Vector2b _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector2bDefaultTypeInternal _Vector2b_default_instance_;
PROTOBUF_CONSTEXPR Vector3b::Vector3b(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/false
  , /*decltype(_impl_.a2_)*/false
  , /*decltype(_impl_.a3_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3bDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3bDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3bDefaultTypeInternal() {}
  union {
    Vector3b _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3bDefaultTypeInternal _Vector3b_default_instance_;
PROTOBUF_CONSTEXPR Vector4b::Vector4b(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/false
  , /*decltype(_impl_.a2_)*/false
  , /*decltype(_impl_.a3_)*/false
  , /*decltype(_impl_.a4_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector4bDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector4bDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector4bDefaultTypeInternal() {}
  union {
    Vector4b _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector4bDefaultTypeInternal _Vector4b_default_instance_;
PROTOBUF_CONSTEXPR Vector6b::Vector6b(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a1_)*/false
  , /*decltype(_impl_.a2_)*/false
  , /*decltype(_impl_.a3_)*/false
  , /*decltype(_impl_.a4_)*/false
  , /*decltype(_impl_.a5_)*/false
  , /*decltype(_impl_.a6_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector6bDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector6bDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector6bDefaultTypeInternal() {}
  union {
    Vector6b _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector6bDefaultTypeInternal _Vector6b_default_instance_;
}  // namespace geometry_msgs
}  // namespace dtproto
static ::_pb::Metadata file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[25];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dtProto_2fgeometry_5fmsgs_2fVector_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dtProto_2fgeometry_5fmsgs_2fVector_2eproto = nullptr;

const uint32_t TableStruct_dtProto_2fgeometry_5fmsgs_2fVector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::VectorXd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::VectorXd, _impl_.val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2d, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2d, _impl_.a2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3d, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3d, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3d, _impl_.a3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4d, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4d, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4d, _impl_.a3_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4d, _impl_.a4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6d, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6d, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6d, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6d, _impl_.a3_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6d, _impl_.a4_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6d, _impl_.a5_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6d, _impl_.a6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::VectorXf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::VectorXf, _impl_.val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2f, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2f, _impl_.a2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3f, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3f, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3f, _impl_.a3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4f, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4f, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4f, _impl_.a3_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4f, _impl_.a4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6f, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6f, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6f, _impl_.a3_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6f, _impl_.a4_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6f, _impl_.a5_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6f, _impl_.a6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::VectorXui32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::VectorXui32, _impl_.val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2ui32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2ui32, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2ui32, _impl_.a2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3ui32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3ui32, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3ui32, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3ui32, _impl_.a3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4ui32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4ui32, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4ui32, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4ui32, _impl_.a3_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4ui32, _impl_.a4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6ui32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6ui32, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6ui32, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6ui32, _impl_.a3_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6ui32, _impl_.a4_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6ui32, _impl_.a5_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6ui32, _impl_.a6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::VectorXi32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::VectorXi32, _impl_.val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2i32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2i32, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2i32, _impl_.a2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3i32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3i32, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3i32, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3i32, _impl_.a3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4i32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4i32, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4i32, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4i32, _impl_.a3_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4i32, _impl_.a4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6i32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6i32, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6i32, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6i32, _impl_.a3_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6i32, _impl_.a4_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6i32, _impl_.a5_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6i32, _impl_.a6_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::VectorXb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::VectorXb, _impl_.val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2b, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2b, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector2b, _impl_.a2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3b, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3b, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3b, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector3b, _impl_.a3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4b, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4b, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4b, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4b, _impl_.a3_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector4b, _impl_.a4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6b, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6b, _impl_.a1_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6b, _impl_.a2_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6b, _impl_.a3_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6b, _impl_.a4_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6b, _impl_.a5_),
  PROTOBUF_FIELD_OFFSET(::dtproto::geometry_msgs::Vector6b, _impl_.a6_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dtproto::geometry_msgs::VectorXd)},
  { 7, -1, -1, sizeof(::dtproto::geometry_msgs::Vector2d)},
  { 15, -1, -1, sizeof(::dtproto::geometry_msgs::Vector3d)},
  { 24, -1, -1, sizeof(::dtproto::geometry_msgs::Vector4d)},
  { 34, -1, -1, sizeof(::dtproto::geometry_msgs::Vector6d)},
  { 46, -1, -1, sizeof(::dtproto::geometry_msgs::VectorXf)},
  { 53, -1, -1, sizeof(::dtproto::geometry_msgs::Vector2f)},
  { 61, -1, -1, sizeof(::dtproto::geometry_msgs::Vector3f)},
  { 70, -1, -1, sizeof(::dtproto::geometry_msgs::Vector4f)},
  { 80, -1, -1, sizeof(::dtproto::geometry_msgs::Vector6f)},
  { 92, -1, -1, sizeof(::dtproto::geometry_msgs::VectorXui32)},
  { 99, -1, -1, sizeof(::dtproto::geometry_msgs::Vector2ui32)},
  { 107, -1, -1, sizeof(::dtproto::geometry_msgs::Vector3ui32)},
  { 116, -1, -1, sizeof(::dtproto::geometry_msgs::Vector4ui32)},
  { 126, -1, -1, sizeof(::dtproto::geometry_msgs::Vector6ui32)},
  { 138, -1, -1, sizeof(::dtproto::geometry_msgs::VectorXi32)},
  { 145, -1, -1, sizeof(::dtproto::geometry_msgs::Vector2i32)},
  { 153, -1, -1, sizeof(::dtproto::geometry_msgs::Vector3i32)},
  { 162, -1, -1, sizeof(::dtproto::geometry_msgs::Vector4i32)},
  { 172, -1, -1, sizeof(::dtproto::geometry_msgs::Vector6i32)},
  { 184, -1, -1, sizeof(::dtproto::geometry_msgs::VectorXb)},
  { 191, -1, -1, sizeof(::dtproto::geometry_msgs::Vector2b)},
  { 199, -1, -1, sizeof(::dtproto::geometry_msgs::Vector3b)},
  { 208, -1, -1, sizeof(::dtproto::geometry_msgs::Vector4b)},
  { 218, -1, -1, sizeof(::dtproto::geometry_msgs::Vector6b)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dtproto::geometry_msgs::_VectorXd_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector2d_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector3d_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector4d_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector6d_default_instance_._instance,
  &::dtproto::geometry_msgs::_VectorXf_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector2f_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector3f_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector4f_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector6f_default_instance_._instance,
  &::dtproto::geometry_msgs::_VectorXui32_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector2ui32_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector3ui32_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector4ui32_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector6ui32_default_instance_._instance,
  &::dtproto::geometry_msgs::_VectorXi32_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector2i32_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector3i32_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector4i32_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector6i32_default_instance_._instance,
  &::dtproto::geometry_msgs::_VectorXb_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector2b_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector3b_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector4b_default_instance_._instance,
  &::dtproto::geometry_msgs::_Vector6b_default_instance_._instance,
};

const char descriptor_table_protodef_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"dtProto/geometry_msgs/Vector.proto\022\025dt"
  "proto.geometry_msgs\"\027\n\010VectorXd\022\013\n\003val\030\001"
  " \003(\001\"\"\n\010Vector2d\022\n\n\002a1\030\001 \001(\001\022\n\n\002a2\030\002 \001(\001"
  "\".\n\010Vector3d\022\n\n\002a1\030\001 \001(\001\022\n\n\002a2\030\002 \001(\001\022\n\n\002"
  "a3\030\003 \001(\001\":\n\010Vector4d\022\n\n\002a1\030\001 \001(\001\022\n\n\002a2\030\002"
  " \001(\001\022\n\n\002a3\030\003 \001(\001\022\n\n\002a4\030\004 \001(\001\"R\n\010Vector6d"
  "\022\n\n\002a1\030\001 \001(\001\022\n\n\002a2\030\002 \001(\001\022\n\n\002a3\030\003 \001(\001\022\n\n\002"
  "a4\030\004 \001(\001\022\n\n\002a5\030\005 \001(\001\022\n\n\002a6\030\006 \001(\001\"\027\n\010Vect"
  "orXf\022\013\n\003val\030\001 \003(\002\"\"\n\010Vector2f\022\n\n\002a1\030\001 \001("
  "\002\022\n\n\002a2\030\002 \001(\002\".\n\010Vector3f\022\n\n\002a1\030\001 \001(\002\022\n\n"
  "\002a2\030\002 \001(\002\022\n\n\002a3\030\003 \001(\002\":\n\010Vector4f\022\n\n\002a1\030"
  "\001 \001(\002\022\n\n\002a2\030\002 \001(\002\022\n\n\002a3\030\003 \001(\002\022\n\n\002a4\030\004 \001("
  "\002\"R\n\010Vector6f\022\n\n\002a1\030\001 \001(\002\022\n\n\002a2\030\002 \001(\002\022\n\n"
  "\002a3\030\003 \001(\002\022\n\n\002a4\030\004 \001(\002\022\n\n\002a5\030\005 \001(\002\022\n\n\002a6\030"
  "\006 \001(\002\"\032\n\013VectorXui32\022\013\n\003val\030\001 \003(\r\"%\n\013Vec"
  "tor2ui32\022\n\n\002a1\030\001 \001(\r\022\n\n\002a2\030\002 \001(\r\"1\n\013Vect"
  "or3ui32\022\n\n\002a1\030\001 \001(\r\022\n\n\002a2\030\002 \001(\r\022\n\n\002a3\030\003 "
  "\001(\r\"=\n\013Vector4ui32\022\n\n\002a1\030\001 \001(\r\022\n\n\002a2\030\002 \001"
  "(\r\022\n\n\002a3\030\003 \001(\r\022\n\n\002a4\030\004 \001(\r\"U\n\013Vector6ui3"
  "2\022\n\n\002a1\030\001 \001(\r\022\n\n\002a2\030\002 \001(\r\022\n\n\002a3\030\003 \001(\r\022\n\n"
  "\002a4\030\004 \001(\r\022\n\n\002a5\030\005 \001(\r\022\n\n\002a6\030\006 \001(\r\"\031\n\nVec"
  "torXi32\022\013\n\003val\030\001 \003(\005\"$\n\nVector2i32\022\n\n\002a1"
  "\030\001 \001(\005\022\n\n\002a2\030\002 \001(\005\"0\n\nVector3i32\022\n\n\002a1\030\001"
  " \001(\005\022\n\n\002a2\030\002 \001(\005\022\n\n\002a3\030\003 \001(\005\"<\n\nVector4i"
  "32\022\n\n\002a1\030\001 \001(\005\022\n\n\002a2\030\002 \001(\005\022\n\n\002a3\030\003 \001(\005\022\n"
  "\n\002a4\030\004 \001(\005\"T\n\nVector6i32\022\n\n\002a1\030\001 \001(\005\022\n\n\002"
  "a2\030\002 \001(\005\022\n\n\002a3\030\003 \001(\005\022\n\n\002a4\030\004 \001(\005\022\n\n\002a5\030\005"
  " \001(\005\022\n\n\002a6\030\006 \001(\005\"\027\n\010VectorXb\022\013\n\003val\030\001 \003("
  "\010\"\"\n\010Vector2b\022\n\n\002a1\030\001 \001(\010\022\n\n\002a2\030\002 \001(\010\".\n"
  "\010Vector3b\022\n\n\002a1\030\001 \001(\010\022\n\n\002a2\030\002 \001(\010\022\n\n\002a3\030"
  "\003 \001(\010\":\n\010Vector4b\022\n\n\002a1\030\001 \001(\010\022\n\n\002a2\030\002 \001("
  "\010\022\n\n\002a3\030\003 \001(\010\022\n\n\002a4\030\004 \001(\010\"R\n\010Vector6b\022\n\n"
  "\002a1\030\001 \001(\010\022\n\n\002a2\030\002 \001(\010\022\n\n\002a3\030\003 \001(\010\022\n\n\002a4\030"
  "\004 \001(\010\022\n\n\002a5\030\005 \001(\010\022\n\n\002a6\030\006 \001(\010b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto = {
    false, false, 1357, descriptor_table_protodef_dtProto_2fgeometry_5fmsgs_2fVector_2eproto,
    "dtProto/geometry_msgs/Vector.proto",
    &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once, nullptr, 0, 25,
    schemas, file_default_instances, TableStruct_dtProto_2fgeometry_5fmsgs_2fVector_2eproto::offsets,
    file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto, file_level_enum_descriptors_dtProto_2fgeometry_5fmsgs_2fVector_2eproto,
    file_level_service_descriptors_dtProto_2fgeometry_5fmsgs_2fVector_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter() {
  return &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dtProto_2fgeometry_5fmsgs_2fVector_2eproto(&descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto);
namespace dtproto {
namespace geometry_msgs {

// ===================================================================

class VectorXd::_Internal {
 public:
};

VectorXd::VectorXd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.VectorXd)
}
VectorXd::VectorXd(const VectorXd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorXd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){from._impl_.val_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.VectorXd)
}

inline void VectorXd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VectorXd::~VectorXd() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.VectorXd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorXd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.val_.~RepeatedField();
}

void VectorXd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorXd::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.VectorXd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.val_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorXd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorXd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.VectorXd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double val = 1;
  if (this->_internal_val_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.VectorXd)
  return target;
}

size_t VectorXd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.VectorXd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double val = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorXd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorXd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorXd::GetClassData() const { return &_class_data_; }


void VectorXd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorXd*>(&to_msg);
  auto& from = static_cast<const VectorXd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.VectorXd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.val_.MergeFrom(from._impl_.val_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorXd::CopyFrom(const VectorXd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.VectorXd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorXd::IsInitialized() const {
  return true;
}

void VectorXd::InternalSwap(VectorXd* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.val_.InternalSwap(&other->_impl_.val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorXd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[0]);
}

// ===================================================================

class Vector2d::_Internal {
 public:
};

Vector2d::Vector2d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector2d)
}
Vector2d::Vector2d(const Vector2d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector2d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a2_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a2_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector2d)
}

inline void Vector2d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector2d::~Vector2d() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector2d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2d::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector2d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a2_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector2d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double a1 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a1 = this->_internal_a1();
  uint64_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_a1(), target);
  }

  // double a2 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a2 = this->_internal_a2();
  uint64_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_a2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector2d)
  return target;
}

size_t Vector2d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector2d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double a1 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a1 = this->_internal_a1();
  uint64_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    total_size += 1 + 8;
  }

  // double a2 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a2 = this->_internal_a2();
  uint64_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector2d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2d::GetClassData() const { return &_class_data_; }


void Vector2d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector2d*>(&to_msg);
  auto& from = static_cast<const Vector2d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector2d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a1 = from._internal_a1();
  uint64_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a2 = from._internal_a2();
  uint64_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2d::CopyFrom(const Vector2d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector2d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2d::IsInitialized() const {
  return true;
}

void Vector2d::InternalSwap(Vector2d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2d, _impl_.a2_)
      + sizeof(Vector2d::_impl_.a2_)
      - PROTOBUF_FIELD_OFFSET(Vector2d, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[1]);
}

// ===================================================================

class Vector3d::_Internal {
 public:
};

Vector3d::Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector3d)
}
Vector3d::Vector3d(const Vector3d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a3_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a3_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector3d)
}

inline void Vector3d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , decltype(_impl_.a3_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3d::~Vector3d() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector3d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3d::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector3d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a3_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector3d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double a1 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a1 = this->_internal_a1();
  uint64_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_a1(), target);
  }

  // double a2 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a2 = this->_internal_a2();
  uint64_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_a2(), target);
  }

  // double a3 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a3 = this->_internal_a3();
  uint64_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_a3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector3d)
  return target;
}

size_t Vector3d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector3d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double a1 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a1 = this->_internal_a1();
  uint64_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    total_size += 1 + 8;
  }

  // double a2 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a2 = this->_internal_a2();
  uint64_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    total_size += 1 + 8;
  }

  // double a3 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a3 = this->_internal_a3();
  uint64_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3d::GetClassData() const { return &_class_data_; }


void Vector3d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3d*>(&to_msg);
  auto& from = static_cast<const Vector3d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector3d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a1 = from._internal_a1();
  uint64_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a2 = from._internal_a2();
  uint64_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a3 = from._internal_a3();
  uint64_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3d::CopyFrom(const Vector3d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector3d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {
  return true;
}

void Vector3d::InternalSwap(Vector3d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3d, _impl_.a3_)
      + sizeof(Vector3d::_impl_.a3_)
      - PROTOBUF_FIELD_OFFSET(Vector3d, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[2]);
}

// ===================================================================

class Vector4d::_Internal {
 public:
};

Vector4d::Vector4d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector4d)
}
Vector4d::Vector4d(const Vector4d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector4d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.a4_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a4_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a4_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector4d)
}

inline void Vector4d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , decltype(_impl_.a3_){0}
    , decltype(_impl_.a4_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector4d::~Vector4d() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector4d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector4d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector4d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector4d::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector4d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a4_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector4d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.a4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector4d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector4d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double a1 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a1 = this->_internal_a1();
  uint64_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_a1(), target);
  }

  // double a2 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a2 = this->_internal_a2();
  uint64_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_a2(), target);
  }

  // double a3 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a3 = this->_internal_a3();
  uint64_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_a3(), target);
  }

  // double a4 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a4 = this->_internal_a4();
  uint64_t raw_a4;
  memcpy(&raw_a4, &tmp_a4, sizeof(tmp_a4));
  if (raw_a4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_a4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector4d)
  return target;
}

size_t Vector4d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector4d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double a1 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a1 = this->_internal_a1();
  uint64_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    total_size += 1 + 8;
  }

  // double a2 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a2 = this->_internal_a2();
  uint64_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    total_size += 1 + 8;
  }

  // double a3 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a3 = this->_internal_a3();
  uint64_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    total_size += 1 + 8;
  }

  // double a4 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a4 = this->_internal_a4();
  uint64_t raw_a4;
  memcpy(&raw_a4, &tmp_a4, sizeof(tmp_a4));
  if (raw_a4 != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector4d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector4d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector4d::GetClassData() const { return &_class_data_; }


void Vector4d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector4d*>(&to_msg);
  auto& from = static_cast<const Vector4d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector4d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a1 = from._internal_a1();
  uint64_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a2 = from._internal_a2();
  uint64_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a3 = from._internal_a3();
  uint64_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a4 = from._internal_a4();
  uint64_t raw_a4;
  memcpy(&raw_a4, &tmp_a4, sizeof(tmp_a4));
  if (raw_a4 != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector4d::CopyFrom(const Vector4d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector4d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4d::IsInitialized() const {
  return true;
}

void Vector4d::InternalSwap(Vector4d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector4d, _impl_.a4_)
      + sizeof(Vector4d::_impl_.a4_)
      - PROTOBUF_FIELD_OFFSET(Vector4d, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector4d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[3]);
}

// ===================================================================

class Vector6d::_Internal {
 public:
};

Vector6d::Vector6d(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector6d)
}
Vector6d::Vector6d(const Vector6d& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector6d* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.a4_){}
    , decltype(_impl_.a5_){}
    , decltype(_impl_.a6_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a6_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a6_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector6d)
}

inline void Vector6d::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , decltype(_impl_.a3_){0}
    , decltype(_impl_.a4_){0}
    , decltype(_impl_.a5_){0}
    , decltype(_impl_.a6_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector6d::~Vector6d() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector6d)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector6d::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector6d::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector6d::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector6d)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a6_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a6_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector6d::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.a4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.a5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double a6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.a6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector6d::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector6d)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double a1 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a1 = this->_internal_a1();
  uint64_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_a1(), target);
  }

  // double a2 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a2 = this->_internal_a2();
  uint64_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_a2(), target);
  }

  // double a3 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a3 = this->_internal_a3();
  uint64_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_a3(), target);
  }

  // double a4 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a4 = this->_internal_a4();
  uint64_t raw_a4;
  memcpy(&raw_a4, &tmp_a4, sizeof(tmp_a4));
  if (raw_a4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_a4(), target);
  }

  // double a5 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a5 = this->_internal_a5();
  uint64_t raw_a5;
  memcpy(&raw_a5, &tmp_a5, sizeof(tmp_a5));
  if (raw_a5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_a5(), target);
  }

  // double a6 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a6 = this->_internal_a6();
  uint64_t raw_a6;
  memcpy(&raw_a6, &tmp_a6, sizeof(tmp_a6));
  if (raw_a6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_a6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector6d)
  return target;
}

size_t Vector6d::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector6d)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double a1 = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a1 = this->_internal_a1();
  uint64_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    total_size += 1 + 8;
  }

  // double a2 = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a2 = this->_internal_a2();
  uint64_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    total_size += 1 + 8;
  }

  // double a3 = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a3 = this->_internal_a3();
  uint64_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    total_size += 1 + 8;
  }

  // double a4 = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a4 = this->_internal_a4();
  uint64_t raw_a4;
  memcpy(&raw_a4, &tmp_a4, sizeof(tmp_a4));
  if (raw_a4 != 0) {
    total_size += 1 + 8;
  }

  // double a5 = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a5 = this->_internal_a5();
  uint64_t raw_a5;
  memcpy(&raw_a5, &tmp_a5, sizeof(tmp_a5));
  if (raw_a5 != 0) {
    total_size += 1 + 8;
  }

  // double a6 = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a6 = this->_internal_a6();
  uint64_t raw_a6;
  memcpy(&raw_a6, &tmp_a6, sizeof(tmp_a6));
  if (raw_a6 != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector6d::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector6d::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector6d::GetClassData() const { return &_class_data_; }


void Vector6d::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector6d*>(&to_msg);
  auto& from = static_cast<const Vector6d&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector6d)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a1 = from._internal_a1();
  uint64_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a2 = from._internal_a2();
  uint64_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a3 = from._internal_a3();
  uint64_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a4 = from._internal_a4();
  uint64_t raw_a4;
  memcpy(&raw_a4, &tmp_a4, sizeof(tmp_a4));
  if (raw_a4 != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a5 = from._internal_a5();
  uint64_t raw_a5;
  memcpy(&raw_a5, &tmp_a5, sizeof(tmp_a5));
  if (raw_a5 != 0) {
    _this->_internal_set_a5(from._internal_a5());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_a6 = from._internal_a6();
  uint64_t raw_a6;
  memcpy(&raw_a6, &tmp_a6, sizeof(tmp_a6));
  if (raw_a6 != 0) {
    _this->_internal_set_a6(from._internal_a6());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector6d::CopyFrom(const Vector6d& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector6d)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector6d::IsInitialized() const {
  return true;
}

void Vector6d::InternalSwap(Vector6d* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector6d, _impl_.a6_)
      + sizeof(Vector6d::_impl_.a6_)
      - PROTOBUF_FIELD_OFFSET(Vector6d, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector6d::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[4]);
}

// ===================================================================

class VectorXf::_Internal {
 public:
};

VectorXf::VectorXf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.VectorXf)
}
VectorXf::VectorXf(const VectorXf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorXf* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){from._impl_.val_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.VectorXf)
}

inline void VectorXf::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VectorXf::~VectorXf() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.VectorXf)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorXf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.val_.~RepeatedField();
}

void VectorXf::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorXf::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.VectorXf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.val_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorXf::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorXf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.VectorXf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float val = 1;
  if (this->_internal_val_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.VectorXf)
  return target;
}

size_t VectorXf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.VectorXf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float val = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorXf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorXf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorXf::GetClassData() const { return &_class_data_; }


void VectorXf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorXf*>(&to_msg);
  auto& from = static_cast<const VectorXf&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.VectorXf)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.val_.MergeFrom(from._impl_.val_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorXf::CopyFrom(const VectorXf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.VectorXf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorXf::IsInitialized() const {
  return true;
}

void VectorXf::InternalSwap(VectorXf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.val_.InternalSwap(&other->_impl_.val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorXf::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[5]);
}

// ===================================================================

class Vector2f::_Internal {
 public:
};

Vector2f::Vector2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector2f)
}
Vector2f::Vector2f(const Vector2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector2f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a2_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a2_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector2f)
}

inline void Vector2f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector2f::~Vector2f() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector2f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2f::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a2_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float a1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = this->_internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_a1(), target);
  }

  // float a2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = this->_internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_a2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector2f)
  return target;
}

size_t Vector2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float a1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = this->_internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    total_size += 1 + 4;
  }

  // float a2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = this->_internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2f::GetClassData() const { return &_class_data_; }


void Vector2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector2f*>(&to_msg);
  auto& from = static_cast<const Vector2f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector2f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = from._internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = from._internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2f::CopyFrom(const Vector2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2f::IsInitialized() const {
  return true;
}

void Vector2f::InternalSwap(Vector2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.a2_)
      + sizeof(Vector2f::_impl_.a2_)
      - PROTOBUF_FIELD_OFFSET(Vector2f, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[6]);
}

// ===================================================================

class Vector3f::_Internal {
 public:
};

Vector3f::Vector3f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector3f)
}
Vector3f::Vector3f(const Vector3f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a3_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a3_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector3f)
}

inline void Vector3f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , decltype(_impl_.a3_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3f::~Vector3f() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector3f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3f::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector3f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a3_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector3f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float a1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = this->_internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_a1(), target);
  }

  // float a2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = this->_internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_a2(), target);
  }

  // float a3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a3 = this->_internal_a3();
  uint32_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_a3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector3f)
  return target;
}

size_t Vector3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector3f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float a1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = this->_internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    total_size += 1 + 4;
  }

  // float a2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = this->_internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    total_size += 1 + 4;
  }

  // float a3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a3 = this->_internal_a3();
  uint32_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3f::GetClassData() const { return &_class_data_; }


void Vector3f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3f*>(&to_msg);
  auto& from = static_cast<const Vector3f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector3f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = from._internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = from._internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a3 = from._internal_a3();
  uint32_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3f::CopyFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3f::IsInitialized() const {
  return true;
}

void Vector3f::InternalSwap(Vector3f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3f, _impl_.a3_)
      + sizeof(Vector3f::_impl_.a3_)
      - PROTOBUF_FIELD_OFFSET(Vector3f, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[7]);
}

// ===================================================================

class Vector4f::_Internal {
 public:
};

Vector4f::Vector4f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector4f)
}
Vector4f::Vector4f(const Vector4f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector4f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.a4_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a4_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a4_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector4f)
}

inline void Vector4f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , decltype(_impl_.a3_){0}
    , decltype(_impl_.a4_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector4f::~Vector4f() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector4f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector4f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector4f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector4f::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector4f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a4_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector4f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector4f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector4f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float a1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = this->_internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_a1(), target);
  }

  // float a2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = this->_internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_a2(), target);
  }

  // float a3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a3 = this->_internal_a3();
  uint32_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_a3(), target);
  }

  // float a4 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a4 = this->_internal_a4();
  uint32_t raw_a4;
  memcpy(&raw_a4, &tmp_a4, sizeof(tmp_a4));
  if (raw_a4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector4f)
  return target;
}

size_t Vector4f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector4f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float a1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = this->_internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    total_size += 1 + 4;
  }

  // float a2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = this->_internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    total_size += 1 + 4;
  }

  // float a3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a3 = this->_internal_a3();
  uint32_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    total_size += 1 + 4;
  }

  // float a4 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a4 = this->_internal_a4();
  uint32_t raw_a4;
  memcpy(&raw_a4, &tmp_a4, sizeof(tmp_a4));
  if (raw_a4 != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector4f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector4f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector4f::GetClassData() const { return &_class_data_; }


void Vector4f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector4f*>(&to_msg);
  auto& from = static_cast<const Vector4f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector4f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = from._internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = from._internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a3 = from._internal_a3();
  uint32_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a4 = from._internal_a4();
  uint32_t raw_a4;
  memcpy(&raw_a4, &tmp_a4, sizeof(tmp_a4));
  if (raw_a4 != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector4f::CopyFrom(const Vector4f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector4f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4f::IsInitialized() const {
  return true;
}

void Vector4f::InternalSwap(Vector4f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector4f, _impl_.a4_)
      + sizeof(Vector4f::_impl_.a4_)
      - PROTOBUF_FIELD_OFFSET(Vector4f, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector4f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[8]);
}

// ===================================================================

class Vector6f::_Internal {
 public:
};

Vector6f::Vector6f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector6f)
}
Vector6f::Vector6f(const Vector6f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector6f* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.a4_){}
    , decltype(_impl_.a5_){}
    , decltype(_impl_.a6_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a6_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a6_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector6f)
}

inline void Vector6f::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , decltype(_impl_.a3_){0}
    , decltype(_impl_.a4_){0}
    , decltype(_impl_.a5_){0}
    , decltype(_impl_.a6_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector6f::~Vector6f() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector6f)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector6f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector6f::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector6f::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector6f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a6_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a6_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector6f::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.a4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.a5_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.a6_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector6f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector6f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float a1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = this->_internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_a1(), target);
  }

  // float a2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = this->_internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_a2(), target);
  }

  // float a3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a3 = this->_internal_a3();
  uint32_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_a3(), target);
  }

  // float a4 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a4 = this->_internal_a4();
  uint32_t raw_a4;
  memcpy(&raw_a4, &tmp_a4, sizeof(tmp_a4));
  if (raw_a4 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a4(), target);
  }

  // float a5 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a5 = this->_internal_a5();
  uint32_t raw_a5;
  memcpy(&raw_a5, &tmp_a5, sizeof(tmp_a5));
  if (raw_a5 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_a5(), target);
  }

  // float a6 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a6 = this->_internal_a6();
  uint32_t raw_a6;
  memcpy(&raw_a6, &tmp_a6, sizeof(tmp_a6));
  if (raw_a6 != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_a6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector6f)
  return target;
}

size_t Vector6f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector6f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float a1 = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = this->_internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    total_size += 1 + 4;
  }

  // float a2 = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = this->_internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    total_size += 1 + 4;
  }

  // float a3 = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a3 = this->_internal_a3();
  uint32_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    total_size += 1 + 4;
  }

  // float a4 = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a4 = this->_internal_a4();
  uint32_t raw_a4;
  memcpy(&raw_a4, &tmp_a4, sizeof(tmp_a4));
  if (raw_a4 != 0) {
    total_size += 1 + 4;
  }

  // float a5 = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a5 = this->_internal_a5();
  uint32_t raw_a5;
  memcpy(&raw_a5, &tmp_a5, sizeof(tmp_a5));
  if (raw_a5 != 0) {
    total_size += 1 + 4;
  }

  // float a6 = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a6 = this->_internal_a6();
  uint32_t raw_a6;
  memcpy(&raw_a6, &tmp_a6, sizeof(tmp_a6));
  if (raw_a6 != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector6f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector6f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector6f::GetClassData() const { return &_class_data_; }


void Vector6f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector6f*>(&to_msg);
  auto& from = static_cast<const Vector6f&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector6f)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a1 = from._internal_a1();
  uint32_t raw_a1;
  memcpy(&raw_a1, &tmp_a1, sizeof(tmp_a1));
  if (raw_a1 != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a2 = from._internal_a2();
  uint32_t raw_a2;
  memcpy(&raw_a2, &tmp_a2, sizeof(tmp_a2));
  if (raw_a2 != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a3 = from._internal_a3();
  uint32_t raw_a3;
  memcpy(&raw_a3, &tmp_a3, sizeof(tmp_a3));
  if (raw_a3 != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a4 = from._internal_a4();
  uint32_t raw_a4;
  memcpy(&raw_a4, &tmp_a4, sizeof(tmp_a4));
  if (raw_a4 != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a5 = from._internal_a5();
  uint32_t raw_a5;
  memcpy(&raw_a5, &tmp_a5, sizeof(tmp_a5));
  if (raw_a5 != 0) {
    _this->_internal_set_a5(from._internal_a5());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a6 = from._internal_a6();
  uint32_t raw_a6;
  memcpy(&raw_a6, &tmp_a6, sizeof(tmp_a6));
  if (raw_a6 != 0) {
    _this->_internal_set_a6(from._internal_a6());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector6f::CopyFrom(const Vector6f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector6f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector6f::IsInitialized() const {
  return true;
}

void Vector6f::InternalSwap(Vector6f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector6f, _impl_.a6_)
      + sizeof(Vector6f::_impl_.a6_)
      - PROTOBUF_FIELD_OFFSET(Vector6f, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector6f::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[9]);
}

// ===================================================================

class VectorXui32::_Internal {
 public:
};

VectorXui32::VectorXui32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.VectorXui32)
}
VectorXui32::VectorXui32(const VectorXui32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorXui32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){from._impl_.val_}
    , /*decltype(_impl_._val_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.VectorXui32)
}

inline void VectorXui32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){arena}
    , /*decltype(_impl_._val_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VectorXui32::~VectorXui32() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.VectorXui32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorXui32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.val_.~RepeatedField();
}

void VectorXui32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorXui32::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.VectorXui32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.val_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorXui32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorXui32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.VectorXui32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 val = 1;
  {
    int byte_size = _impl_._val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_val(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.VectorXui32)
  return target;
}

size_t VectorXui32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.VectorXui32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 val = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.val_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorXui32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorXui32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorXui32::GetClassData() const { return &_class_data_; }


void VectorXui32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorXui32*>(&to_msg);
  auto& from = static_cast<const VectorXui32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.VectorXui32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.val_.MergeFrom(from._impl_.val_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorXui32::CopyFrom(const VectorXui32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.VectorXui32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorXui32::IsInitialized() const {
  return true;
}

void VectorXui32::InternalSwap(VectorXui32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.val_.InternalSwap(&other->_impl_.val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorXui32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[10]);
}

// ===================================================================

class Vector2ui32::_Internal {
 public:
};

Vector2ui32::Vector2ui32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector2ui32)
}
Vector2ui32::Vector2ui32(const Vector2ui32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector2ui32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a2_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a2_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector2ui32)
}

inline void Vector2ui32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0u}
    , decltype(_impl_.a2_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector2ui32::~Vector2ui32() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector2ui32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2ui32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2ui32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2ui32::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector2ui32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a2_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2ui32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2ui32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector2ui32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 a1 = 1;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a1(), target);
  }

  // uint32 a2 = 2;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_a2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector2ui32)
  return target;
}

size_t Vector2ui32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector2ui32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 a1 = 1;
  if (this->_internal_a1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a1());
  }

  // uint32 a2 = 2;
  if (this->_internal_a2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2ui32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector2ui32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2ui32::GetClassData() const { return &_class_data_; }


void Vector2ui32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector2ui32*>(&to_msg);
  auto& from = static_cast<const Vector2ui32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector2ui32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2ui32::CopyFrom(const Vector2ui32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector2ui32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2ui32::IsInitialized() const {
  return true;
}

void Vector2ui32::InternalSwap(Vector2ui32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2ui32, _impl_.a2_)
      + sizeof(Vector2ui32::_impl_.a2_)
      - PROTOBUF_FIELD_OFFSET(Vector2ui32, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2ui32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[11]);
}

// ===================================================================

class Vector3ui32::_Internal {
 public:
};

Vector3ui32::Vector3ui32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector3ui32)
}
Vector3ui32::Vector3ui32(const Vector3ui32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3ui32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a3_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a3_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector3ui32)
}

inline void Vector3ui32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0u}
    , decltype(_impl_.a2_){0u}
    , decltype(_impl_.a3_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3ui32::~Vector3ui32() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector3ui32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3ui32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3ui32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3ui32::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector3ui32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a3_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3ui32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3ui32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector3ui32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 a1 = 1;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a1(), target);
  }

  // uint32 a2 = 2;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_a2(), target);
  }

  // uint32 a3 = 3;
  if (this->_internal_a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_a3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector3ui32)
  return target;
}

size_t Vector3ui32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector3ui32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 a1 = 1;
  if (this->_internal_a1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a1());
  }

  // uint32 a2 = 2;
  if (this->_internal_a2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a2());
  }

  // uint32 a3 = 3;
  if (this->_internal_a3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3ui32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3ui32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3ui32::GetClassData() const { return &_class_data_; }


void Vector3ui32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3ui32*>(&to_msg);
  auto& from = static_cast<const Vector3ui32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector3ui32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  if (from._internal_a3() != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3ui32::CopyFrom(const Vector3ui32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector3ui32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3ui32::IsInitialized() const {
  return true;
}

void Vector3ui32::InternalSwap(Vector3ui32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3ui32, _impl_.a3_)
      + sizeof(Vector3ui32::_impl_.a3_)
      - PROTOBUF_FIELD_OFFSET(Vector3ui32, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3ui32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[12]);
}

// ===================================================================

class Vector4ui32::_Internal {
 public:
};

Vector4ui32::Vector4ui32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector4ui32)
}
Vector4ui32::Vector4ui32(const Vector4ui32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector4ui32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.a4_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a4_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a4_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector4ui32)
}

inline void Vector4ui32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0u}
    , decltype(_impl_.a2_){0u}
    , decltype(_impl_.a3_){0u}
    , decltype(_impl_.a4_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector4ui32::~Vector4ui32() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector4ui32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector4ui32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector4ui32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector4ui32::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector4ui32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a4_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector4ui32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 a4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.a4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector4ui32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector4ui32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 a1 = 1;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a1(), target);
  }

  // uint32 a2 = 2;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_a2(), target);
  }

  // uint32 a3 = 3;
  if (this->_internal_a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_a3(), target);
  }

  // uint32 a4 = 4;
  if (this->_internal_a4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_a4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector4ui32)
  return target;
}

size_t Vector4ui32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector4ui32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 a1 = 1;
  if (this->_internal_a1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a1());
  }

  // uint32 a2 = 2;
  if (this->_internal_a2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a2());
  }

  // uint32 a3 = 3;
  if (this->_internal_a3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a3());
  }

  // uint32 a4 = 4;
  if (this->_internal_a4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector4ui32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector4ui32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector4ui32::GetClassData() const { return &_class_data_; }


void Vector4ui32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector4ui32*>(&to_msg);
  auto& from = static_cast<const Vector4ui32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector4ui32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  if (from._internal_a3() != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  if (from._internal_a4() != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector4ui32::CopyFrom(const Vector4ui32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector4ui32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4ui32::IsInitialized() const {
  return true;
}

void Vector4ui32::InternalSwap(Vector4ui32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector4ui32, _impl_.a4_)
      + sizeof(Vector4ui32::_impl_.a4_)
      - PROTOBUF_FIELD_OFFSET(Vector4ui32, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector4ui32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[13]);
}

// ===================================================================

class Vector6ui32::_Internal {
 public:
};

Vector6ui32::Vector6ui32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector6ui32)
}
Vector6ui32::Vector6ui32(const Vector6ui32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector6ui32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.a4_){}
    , decltype(_impl_.a5_){}
    , decltype(_impl_.a6_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a6_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a6_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector6ui32)
}

inline void Vector6ui32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0u}
    , decltype(_impl_.a2_){0u}
    , decltype(_impl_.a3_){0u}
    , decltype(_impl_.a4_){0u}
    , decltype(_impl_.a5_){0u}
    , decltype(_impl_.a6_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector6ui32::~Vector6ui32() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector6ui32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector6ui32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector6ui32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector6ui32::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector6ui32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a6_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a6_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector6ui32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 a4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.a4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 a5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.a5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 a6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.a6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector6ui32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector6ui32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 a1 = 1;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_a1(), target);
  }

  // uint32 a2 = 2;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_a2(), target);
  }

  // uint32 a3 = 3;
  if (this->_internal_a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_a3(), target);
  }

  // uint32 a4 = 4;
  if (this->_internal_a4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_a4(), target);
  }

  // uint32 a5 = 5;
  if (this->_internal_a5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_a5(), target);
  }

  // uint32 a6 = 6;
  if (this->_internal_a6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_a6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector6ui32)
  return target;
}

size_t Vector6ui32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector6ui32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 a1 = 1;
  if (this->_internal_a1() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a1());
  }

  // uint32 a2 = 2;
  if (this->_internal_a2() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a2());
  }

  // uint32 a3 = 3;
  if (this->_internal_a3() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a3());
  }

  // uint32 a4 = 4;
  if (this->_internal_a4() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a4());
  }

  // uint32 a5 = 5;
  if (this->_internal_a5() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a5());
  }

  // uint32 a6 = 6;
  if (this->_internal_a6() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_a6());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector6ui32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector6ui32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector6ui32::GetClassData() const { return &_class_data_; }


void Vector6ui32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector6ui32*>(&to_msg);
  auto& from = static_cast<const Vector6ui32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector6ui32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  if (from._internal_a3() != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  if (from._internal_a4() != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  if (from._internal_a5() != 0) {
    _this->_internal_set_a5(from._internal_a5());
  }
  if (from._internal_a6() != 0) {
    _this->_internal_set_a6(from._internal_a6());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector6ui32::CopyFrom(const Vector6ui32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector6ui32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector6ui32::IsInitialized() const {
  return true;
}

void Vector6ui32::InternalSwap(Vector6ui32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector6ui32, _impl_.a6_)
      + sizeof(Vector6ui32::_impl_.a6_)
      - PROTOBUF_FIELD_OFFSET(Vector6ui32, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector6ui32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[14]);
}

// ===================================================================

class VectorXi32::_Internal {
 public:
};

VectorXi32::VectorXi32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.VectorXi32)
}
VectorXi32::VectorXi32(const VectorXi32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorXi32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){from._impl_.val_}
    , /*decltype(_impl_._val_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.VectorXi32)
}

inline void VectorXi32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){arena}
    , /*decltype(_impl_._val_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VectorXi32::~VectorXi32() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.VectorXi32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorXi32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.val_.~RepeatedField();
}

void VectorXi32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorXi32::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.VectorXi32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.val_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorXi32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorXi32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.VectorXi32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 val = 1;
  {
    int byte_size = _impl_._val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_val(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.VectorXi32)
  return target;
}

size_t VectorXi32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.VectorXi32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 val = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.val_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorXi32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorXi32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorXi32::GetClassData() const { return &_class_data_; }


void VectorXi32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorXi32*>(&to_msg);
  auto& from = static_cast<const VectorXi32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.VectorXi32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.val_.MergeFrom(from._impl_.val_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorXi32::CopyFrom(const VectorXi32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.VectorXi32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorXi32::IsInitialized() const {
  return true;
}

void VectorXi32::InternalSwap(VectorXi32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.val_.InternalSwap(&other->_impl_.val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorXi32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[15]);
}

// ===================================================================

class Vector2i32::_Internal {
 public:
};

Vector2i32::Vector2i32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector2i32)
}
Vector2i32::Vector2i32(const Vector2i32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector2i32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a2_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a2_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector2i32)
}

inline void Vector2i32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector2i32::~Vector2i32() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector2i32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2i32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2i32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2i32::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector2i32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a2_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2i32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2i32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector2i32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a1 = 1;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a1(), target);
  }

  // int32 a2 = 2;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_a2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector2i32)
  return target;
}

size_t Vector2i32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector2i32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 a1 = 1;
  if (this->_internal_a1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a1());
  }

  // int32 a2 = 2;
  if (this->_internal_a2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2i32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector2i32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2i32::GetClassData() const { return &_class_data_; }


void Vector2i32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector2i32*>(&to_msg);
  auto& from = static_cast<const Vector2i32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector2i32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2i32::CopyFrom(const Vector2i32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector2i32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2i32::IsInitialized() const {
  return true;
}

void Vector2i32::InternalSwap(Vector2i32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2i32, _impl_.a2_)
      + sizeof(Vector2i32::_impl_.a2_)
      - PROTOBUF_FIELD_OFFSET(Vector2i32, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2i32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[16]);
}

// ===================================================================

class Vector3i32::_Internal {
 public:
};

Vector3i32::Vector3i32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector3i32)
}
Vector3i32::Vector3i32(const Vector3i32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3i32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a3_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a3_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector3i32)
}

inline void Vector3i32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , decltype(_impl_.a3_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3i32::~Vector3i32() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector3i32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3i32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3i32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3i32::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector3i32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a3_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3i32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3i32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector3i32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a1 = 1;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a1(), target);
  }

  // int32 a2 = 2;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_a2(), target);
  }

  // int32 a3 = 3;
  if (this->_internal_a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_a3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector3i32)
  return target;
}

size_t Vector3i32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector3i32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 a1 = 1;
  if (this->_internal_a1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a1());
  }

  // int32 a2 = 2;
  if (this->_internal_a2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a2());
  }

  // int32 a3 = 3;
  if (this->_internal_a3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a3());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3i32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3i32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3i32::GetClassData() const { return &_class_data_; }


void Vector3i32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3i32*>(&to_msg);
  auto& from = static_cast<const Vector3i32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector3i32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  if (from._internal_a3() != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3i32::CopyFrom(const Vector3i32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector3i32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3i32::IsInitialized() const {
  return true;
}

void Vector3i32::InternalSwap(Vector3i32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3i32, _impl_.a3_)
      + sizeof(Vector3i32::_impl_.a3_)
      - PROTOBUF_FIELD_OFFSET(Vector3i32, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3i32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[17]);
}

// ===================================================================

class Vector4i32::_Internal {
 public:
};

Vector4i32::Vector4i32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector4i32)
}
Vector4i32::Vector4i32(const Vector4i32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector4i32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.a4_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a4_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a4_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector4i32)
}

inline void Vector4i32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , decltype(_impl_.a3_){0}
    , decltype(_impl_.a4_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector4i32::~Vector4i32() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector4i32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector4i32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector4i32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector4i32::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector4i32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a4_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector4i32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 a4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.a4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector4i32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector4i32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a1 = 1;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a1(), target);
  }

  // int32 a2 = 2;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_a2(), target);
  }

  // int32 a3 = 3;
  if (this->_internal_a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_a3(), target);
  }

  // int32 a4 = 4;
  if (this->_internal_a4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_a4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector4i32)
  return target;
}

size_t Vector4i32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector4i32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 a1 = 1;
  if (this->_internal_a1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a1());
  }

  // int32 a2 = 2;
  if (this->_internal_a2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a2());
  }

  // int32 a3 = 3;
  if (this->_internal_a3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a3());
  }

  // int32 a4 = 4;
  if (this->_internal_a4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a4());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector4i32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector4i32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector4i32::GetClassData() const { return &_class_data_; }


void Vector4i32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector4i32*>(&to_msg);
  auto& from = static_cast<const Vector4i32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector4i32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  if (from._internal_a3() != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  if (from._internal_a4() != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector4i32::CopyFrom(const Vector4i32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector4i32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4i32::IsInitialized() const {
  return true;
}

void Vector4i32::InternalSwap(Vector4i32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector4i32, _impl_.a4_)
      + sizeof(Vector4i32::_impl_.a4_)
      - PROTOBUF_FIELD_OFFSET(Vector4i32, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector4i32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[18]);
}

// ===================================================================

class Vector6i32::_Internal {
 public:
};

Vector6i32::Vector6i32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector6i32)
}
Vector6i32::Vector6i32(const Vector6i32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector6i32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.a4_){}
    , decltype(_impl_.a5_){}
    , decltype(_impl_.a6_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a6_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a6_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector6i32)
}

inline void Vector6i32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){0}
    , decltype(_impl_.a2_){0}
    , decltype(_impl_.a3_){0}
    , decltype(_impl_.a4_){0}
    , decltype(_impl_.a5_){0}
    , decltype(_impl_.a6_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector6i32::~Vector6i32() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector6i32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector6i32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector6i32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector6i32::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector6i32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a6_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a6_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector6i32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 a4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.a4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 a5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.a5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 a6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.a6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector6i32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector6i32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a1 = 1;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_a1(), target);
  }

  // int32 a2 = 2;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_a2(), target);
  }

  // int32 a3 = 3;
  if (this->_internal_a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_a3(), target);
  }

  // int32 a4 = 4;
  if (this->_internal_a4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_a4(), target);
  }

  // int32 a5 = 5;
  if (this->_internal_a5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_a5(), target);
  }

  // int32 a6 = 6;
  if (this->_internal_a6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_a6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector6i32)
  return target;
}

size_t Vector6i32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector6i32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 a1 = 1;
  if (this->_internal_a1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a1());
  }

  // int32 a2 = 2;
  if (this->_internal_a2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a2());
  }

  // int32 a3 = 3;
  if (this->_internal_a3() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a3());
  }

  // int32 a4 = 4;
  if (this->_internal_a4() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a4());
  }

  // int32 a5 = 5;
  if (this->_internal_a5() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a5());
  }

  // int32 a6 = 6;
  if (this->_internal_a6() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_a6());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector6i32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector6i32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector6i32::GetClassData() const { return &_class_data_; }


void Vector6i32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector6i32*>(&to_msg);
  auto& from = static_cast<const Vector6i32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector6i32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  if (from._internal_a3() != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  if (from._internal_a4() != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  if (from._internal_a5() != 0) {
    _this->_internal_set_a5(from._internal_a5());
  }
  if (from._internal_a6() != 0) {
    _this->_internal_set_a6(from._internal_a6());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector6i32::CopyFrom(const Vector6i32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector6i32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector6i32::IsInitialized() const {
  return true;
}

void Vector6i32::InternalSwap(Vector6i32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector6i32, _impl_.a6_)
      + sizeof(Vector6i32::_impl_.a6_)
      - PROTOBUF_FIELD_OFFSET(Vector6i32, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector6i32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[19]);
}

// ===================================================================

class VectorXb::_Internal {
 public:
};

VectorXb::VectorXb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.VectorXb)
}
VectorXb::VectorXb(const VectorXb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorXb* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){from._impl_.val_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.VectorXb)
}

inline void VectorXb::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.val_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VectorXb::~VectorXb() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.VectorXb)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorXb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.val_.~RepeatedField();
}

void VectorXb::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorXb::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.VectorXb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.val_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorXb::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bool val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorXb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.VectorXb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool val = 1;
  if (this->_internal_val_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.VectorXb)
  return target;
}

size_t VectorXb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.VectorXb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool val = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_val_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorXb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorXb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorXb::GetClassData() const { return &_class_data_; }


void VectorXb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorXb*>(&to_msg);
  auto& from = static_cast<const VectorXb&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.VectorXb)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.val_.MergeFrom(from._impl_.val_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorXb::CopyFrom(const VectorXb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.VectorXb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorXb::IsInitialized() const {
  return true;
}

void VectorXb::InternalSwap(VectorXb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.val_.InternalSwap(&other->_impl_.val_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorXb::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[20]);
}

// ===================================================================

class Vector2b::_Internal {
 public:
};

Vector2b::Vector2b(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector2b)
}
Vector2b::Vector2b(const Vector2b& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector2b* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a2_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a2_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector2b)
}

inline void Vector2b::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){false}
    , decltype(_impl_.a2_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector2b::~Vector2b() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector2b)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector2b::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2b::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector2b::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector2b)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a2_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2b::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector2b::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector2b)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool a1 = 1;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_a1(), target);
  }

  // bool a2 = 2;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_a2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector2b)
  return target;
}

size_t Vector2b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector2b)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool a1 = 1;
  if (this->_internal_a1() != 0) {
    total_size += 1 + 1;
  }

  // bool a2 = 2;
  if (this->_internal_a2() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector2b::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector2b::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector2b::GetClassData() const { return &_class_data_; }


void Vector2b::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector2b*>(&to_msg);
  auto& from = static_cast<const Vector2b&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector2b)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector2b::CopyFrom(const Vector2b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector2b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2b::IsInitialized() const {
  return true;
}

void Vector2b::InternalSwap(Vector2b* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2b, _impl_.a2_)
      + sizeof(Vector2b::_impl_.a2_)
      - PROTOBUF_FIELD_OFFSET(Vector2b, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2b::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[21]);
}

// ===================================================================

class Vector3b::_Internal {
 public:
};

Vector3b::Vector3b(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector3b)
}
Vector3b::Vector3b(const Vector3b& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector3b* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a3_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a3_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector3b)
}

inline void Vector3b::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){false}
    , decltype(_impl_.a2_){false}
    , decltype(_impl_.a3_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3b::~Vector3b() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector3b)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3b::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3b::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3b::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector3b)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a3_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3b::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3b::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector3b)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool a1 = 1;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_a1(), target);
  }

  // bool a2 = 2;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_a2(), target);
  }

  // bool a3 = 3;
  if (this->_internal_a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_a3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector3b)
  return target;
}

size_t Vector3b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector3b)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool a1 = 1;
  if (this->_internal_a1() != 0) {
    total_size += 1 + 1;
  }

  // bool a2 = 2;
  if (this->_internal_a2() != 0) {
    total_size += 1 + 1;
  }

  // bool a3 = 3;
  if (this->_internal_a3() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3b::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3b::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3b::GetClassData() const { return &_class_data_; }


void Vector3b::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3b*>(&to_msg);
  auto& from = static_cast<const Vector3b&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector3b)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  if (from._internal_a3() != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3b::CopyFrom(const Vector3b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector3b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3b::IsInitialized() const {
  return true;
}

void Vector3b::InternalSwap(Vector3b* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3b, _impl_.a3_)
      + sizeof(Vector3b::_impl_.a3_)
      - PROTOBUF_FIELD_OFFSET(Vector3b, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3b::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[22]);
}

// ===================================================================

class Vector4b::_Internal {
 public:
};

Vector4b::Vector4b(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector4b)
}
Vector4b::Vector4b(const Vector4b& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector4b* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.a4_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a4_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a4_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector4b)
}

inline void Vector4b::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){false}
    , decltype(_impl_.a2_){false}
    , decltype(_impl_.a3_){false}
    , decltype(_impl_.a4_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector4b::~Vector4b() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector4b)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector4b::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector4b::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector4b::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector4b)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a4_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector4b::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool a4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.a4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector4b::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector4b)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool a1 = 1;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_a1(), target);
  }

  // bool a2 = 2;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_a2(), target);
  }

  // bool a3 = 3;
  if (this->_internal_a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_a3(), target);
  }

  // bool a4 = 4;
  if (this->_internal_a4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_a4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector4b)
  return target;
}

size_t Vector4b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector4b)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool a1 = 1;
  if (this->_internal_a1() != 0) {
    total_size += 1 + 1;
  }

  // bool a2 = 2;
  if (this->_internal_a2() != 0) {
    total_size += 1 + 1;
  }

  // bool a3 = 3;
  if (this->_internal_a3() != 0) {
    total_size += 1 + 1;
  }

  // bool a4 = 4;
  if (this->_internal_a4() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector4b::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector4b::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector4b::GetClassData() const { return &_class_data_; }


void Vector4b::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector4b*>(&to_msg);
  auto& from = static_cast<const Vector4b&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector4b)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  if (from._internal_a3() != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  if (from._internal_a4() != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector4b::CopyFrom(const Vector4b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector4b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4b::IsInitialized() const {
  return true;
}

void Vector4b::InternalSwap(Vector4b* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector4b, _impl_.a4_)
      + sizeof(Vector4b::_impl_.a4_)
      - PROTOBUF_FIELD_OFFSET(Vector4b, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector4b::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[23]);
}

// ===================================================================

class Vector6b::_Internal {
 public:
};

Vector6b::Vector6b(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dtproto.geometry_msgs.Vector6b)
}
Vector6b::Vector6b(const Vector6b& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector6b* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){}
    , decltype(_impl_.a2_){}
    , decltype(_impl_.a3_){}
    , decltype(_impl_.a4_){}
    , decltype(_impl_.a5_){}
    , decltype(_impl_.a6_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.a1_, &from._impl_.a1_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.a6_) -
    reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a6_));
  // @@protoc_insertion_point(copy_constructor:dtproto.geometry_msgs.Vector6b)
}

inline void Vector6b::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a1_){false}
    , decltype(_impl_.a2_){false}
    , decltype(_impl_.a3_){false}
    , decltype(_impl_.a4_){false}
    , decltype(_impl_.a5_){false}
    , decltype(_impl_.a6_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector6b::~Vector6b() {
  // @@protoc_insertion_point(destructor:dtproto.geometry_msgs.Vector6b)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector6b::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector6b::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector6b::Clear() {
// @@protoc_insertion_point(message_clear_start:dtproto.geometry_msgs.Vector6b)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.a1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.a6_) -
      reinterpret_cast<char*>(&_impl_.a1_)) + sizeof(_impl_.a6_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector6b::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool a1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.a1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool a2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.a2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool a3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.a3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool a4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.a4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool a5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.a5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool a6 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.a6_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector6b::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dtproto.geometry_msgs.Vector6b)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool a1 = 1;
  if (this->_internal_a1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_a1(), target);
  }

  // bool a2 = 2;
  if (this->_internal_a2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_a2(), target);
  }

  // bool a3 = 3;
  if (this->_internal_a3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_a3(), target);
  }

  // bool a4 = 4;
  if (this->_internal_a4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_a4(), target);
  }

  // bool a5 = 5;
  if (this->_internal_a5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_a5(), target);
  }

  // bool a6 = 6;
  if (this->_internal_a6() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_a6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dtproto.geometry_msgs.Vector6b)
  return target;
}

size_t Vector6b::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dtproto.geometry_msgs.Vector6b)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool a1 = 1;
  if (this->_internal_a1() != 0) {
    total_size += 1 + 1;
  }

  // bool a2 = 2;
  if (this->_internal_a2() != 0) {
    total_size += 1 + 1;
  }

  // bool a3 = 3;
  if (this->_internal_a3() != 0) {
    total_size += 1 + 1;
  }

  // bool a4 = 4;
  if (this->_internal_a4() != 0) {
    total_size += 1 + 1;
  }

  // bool a5 = 5;
  if (this->_internal_a5() != 0) {
    total_size += 1 + 1;
  }

  // bool a6 = 6;
  if (this->_internal_a6() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector6b::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector6b::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector6b::GetClassData() const { return &_class_data_; }


void Vector6b::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector6b*>(&to_msg);
  auto& from = static_cast<const Vector6b&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dtproto.geometry_msgs.Vector6b)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a1() != 0) {
    _this->_internal_set_a1(from._internal_a1());
  }
  if (from._internal_a2() != 0) {
    _this->_internal_set_a2(from._internal_a2());
  }
  if (from._internal_a3() != 0) {
    _this->_internal_set_a3(from._internal_a3());
  }
  if (from._internal_a4() != 0) {
    _this->_internal_set_a4(from._internal_a4());
  }
  if (from._internal_a5() != 0) {
    _this->_internal_set_a5(from._internal_a5());
  }
  if (from._internal_a6() != 0) {
    _this->_internal_set_a6(from._internal_a6());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector6b::CopyFrom(const Vector6b& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dtproto.geometry_msgs.Vector6b)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector6b::IsInitialized() const {
  return true;
}

void Vector6b::InternalSwap(Vector6b* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector6b, _impl_.a6_)
      + sizeof(Vector6b::_impl_.a6_)
      - PROTOBUF_FIELD_OFFSET(Vector6b, _impl_.a1_)>(
          reinterpret_cast<char*>(&_impl_.a1_),
          reinterpret_cast<char*>(&other->_impl_.a1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector6b::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_getter, &descriptor_table_dtProto_2fgeometry_5fmsgs_2fVector_2eproto_once,
      file_level_metadata_dtProto_2fgeometry_5fmsgs_2fVector_2eproto[24]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace geometry_msgs
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::VectorXd*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::VectorXd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::VectorXd >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector2d*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector2d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector2d >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector3d*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector3d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector3d >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector4d*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector4d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector4d >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector6d*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector6d >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector6d >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::VectorXf*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::VectorXf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::VectorXf >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector2f*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector2f >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector3f*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector3f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector3f >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector4f*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector4f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector4f >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector6f*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector6f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector6f >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::VectorXui32*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::VectorXui32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::VectorXui32 >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector2ui32*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector2ui32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector2ui32 >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector3ui32*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector3ui32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector3ui32 >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector4ui32*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector4ui32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector4ui32 >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector6ui32*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector6ui32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector6ui32 >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::VectorXi32*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::VectorXi32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::VectorXi32 >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector2i32*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector2i32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector2i32 >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector3i32*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector3i32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector3i32 >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector4i32*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector4i32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector4i32 >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector6i32*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector6i32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector6i32 >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::VectorXb*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::VectorXb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::VectorXb >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector2b*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector2b >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector2b >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector3b*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector3b >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector3b >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector4b*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector4b >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector4b >(arena);
}
template<> PROTOBUF_NOINLINE ::dtproto::geometry_msgs::Vector6b*
Arena::CreateMaybeMessage< ::dtproto::geometry_msgs::Vector6b >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dtproto::geometry_msgs::Vector6b >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
