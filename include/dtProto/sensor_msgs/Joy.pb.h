// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtProto/sensor_msgs/Joy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dtProto_2fsensor_5fmsgs_2fJoy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dtProto_2fsensor_5fmsgs_2fJoy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dtProto_2fsensor_5fmsgs_2fJoy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dtProto_2fsensor_5fmsgs_2fJoy_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dtProto_2fsensor_5fmsgs_2fJoy_2eproto;
namespace dtproto {
namespace sensor_msgs {
class Joy;
struct JoyDefaultTypeInternal;
extern JoyDefaultTypeInternal _Joy_default_instance_;
}  // namespace sensor_msgs
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> ::dtproto::sensor_msgs::Joy* Arena::CreateMaybeMessage<::dtproto::sensor_msgs::Joy>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dtproto {
namespace sensor_msgs {

// ===================================================================

class Joy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.sensor_msgs.Joy) */ {
 public:
  inline Joy() : Joy(nullptr) {}
  ~Joy() override;
  explicit PROTOBUF_CONSTEXPR Joy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Joy(const Joy& from);
  Joy(Joy&& from) noexcept
    : Joy() {
    *this = ::std::move(from);
  }

  inline Joy& operator=(const Joy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Joy& operator=(Joy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Joy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Joy* internal_default_instance() {
    return reinterpret_cast<const Joy*>(
               &_Joy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Joy& a, Joy& b) {
    a.Swap(&b);
  }
  inline void Swap(Joy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Joy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Joy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Joy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Joy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Joy& from) {
    Joy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Joy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.sensor_msgs.Joy";
  }
  protected:
  explicit Joy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesFieldNumber = 1,
    kButtonsFieldNumber = 2,
  };
  // repeated float axes = 1;
  int axes_size() const;
  private:
  int _internal_axes_size() const;
  public:
  void clear_axes();
  private:
  float _internal_axes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_axes() const;
  void _internal_add_axes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_axes();
  public:
  float axes(int index) const;
  void set_axes(int index, float value);
  void add_axes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      axes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_axes();

  // repeated int32 buttons = 2;
  int buttons_size() const;
  private:
  int _internal_buttons_size() const;
  public:
  void clear_buttons();
  private:
  int32_t _internal_buttons(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_buttons() const;
  void _internal_add_buttons(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_buttons();
  public:
  int32_t buttons(int index) const;
  void set_buttons(int index, int32_t value);
  void add_buttons(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      buttons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_buttons();

  // @@protoc_insertion_point(class_scope:dtproto.sensor_msgs.Joy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > axes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > buttons_;
    mutable std::atomic<int> _buttons_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fsensor_5fmsgs_2fJoy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Joy

// repeated float axes = 1;
inline int Joy::_internal_axes_size() const {
  return _impl_.axes_.size();
}
inline int Joy::axes_size() const {
  return _internal_axes_size();
}
inline void Joy::clear_axes() {
  _impl_.axes_.Clear();
}
inline float Joy::_internal_axes(int index) const {
  return _impl_.axes_.Get(index);
}
inline float Joy::axes(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.sensor_msgs.Joy.axes)
  return _internal_axes(index);
}
inline void Joy::set_axes(int index, float value) {
  _impl_.axes_.Set(index, value);
  // @@protoc_insertion_point(field_set:dtproto.sensor_msgs.Joy.axes)
}
inline void Joy::_internal_add_axes(float value) {
  _impl_.axes_.Add(value);
}
inline void Joy::add_axes(float value) {
  _internal_add_axes(value);
  // @@protoc_insertion_point(field_add:dtproto.sensor_msgs.Joy.axes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Joy::_internal_axes() const {
  return _impl_.axes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Joy::axes() const {
  // @@protoc_insertion_point(field_list:dtproto.sensor_msgs.Joy.axes)
  return _internal_axes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Joy::_internal_mutable_axes() {
  return &_impl_.axes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Joy::mutable_axes() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.sensor_msgs.Joy.axes)
  return _internal_mutable_axes();
}

// repeated int32 buttons = 2;
inline int Joy::_internal_buttons_size() const {
  return _impl_.buttons_.size();
}
inline int Joy::buttons_size() const {
  return _internal_buttons_size();
}
inline void Joy::clear_buttons() {
  _impl_.buttons_.Clear();
}
inline int32_t Joy::_internal_buttons(int index) const {
  return _impl_.buttons_.Get(index);
}
inline int32_t Joy::buttons(int index) const {
  // @@protoc_insertion_point(field_get:dtproto.sensor_msgs.Joy.buttons)
  return _internal_buttons(index);
}
inline void Joy::set_buttons(int index, int32_t value) {
  _impl_.buttons_.Set(index, value);
  // @@protoc_insertion_point(field_set:dtproto.sensor_msgs.Joy.buttons)
}
inline void Joy::_internal_add_buttons(int32_t value) {
  _impl_.buttons_.Add(value);
}
inline void Joy::add_buttons(int32_t value) {
  _internal_add_buttons(value);
  // @@protoc_insertion_point(field_add:dtproto.sensor_msgs.Joy.buttons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Joy::_internal_buttons() const {
  return _impl_.buttons_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Joy::buttons() const {
  // @@protoc_insertion_point(field_list:dtproto.sensor_msgs.Joy.buttons)
  return _internal_buttons();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Joy::_internal_mutable_buttons() {
  return &_impl_.buttons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Joy::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:dtproto.sensor_msgs.Joy.buttons)
  return _internal_mutable_buttons();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor_msgs
}  // namespace dtproto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dtProto_2fsensor_5fmsgs_2fJoy_2eproto
