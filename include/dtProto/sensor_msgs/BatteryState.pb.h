// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtProto/sensor_msgs/BatteryState.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dtProto_2fsensor_5fmsgs_2fBatteryState_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dtProto_2fsensor_5fmsgs_2fBatteryState_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dtProto_2fsensor_5fmsgs_2fBatteryState_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dtProto_2fsensor_5fmsgs_2fBatteryState_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dtProto_2fsensor_5fmsgs_2fBatteryState_2eproto;
namespace dtproto {
namespace sensor_msgs {
class BatteryState;
struct BatteryStateDefaultTypeInternal;
extern BatteryStateDefaultTypeInternal _BatteryState_default_instance_;
}  // namespace sensor_msgs
}  // namespace dtproto
PROTOBUF_NAMESPACE_OPEN
template<> ::dtproto::sensor_msgs::BatteryState* Arena::CreateMaybeMessage<::dtproto::sensor_msgs::BatteryState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dtproto {
namespace sensor_msgs {

enum BatteryState_ChargingStatus : int {
  BatteryState_ChargingStatus_ON = 0,
  BatteryState_ChargingStatus_OFF = 1,
  BatteryState_ChargingStatus_BatteryState_ChargingStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  BatteryState_ChargingStatus_BatteryState_ChargingStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool BatteryState_ChargingStatus_IsValid(int value);
constexpr BatteryState_ChargingStatus BatteryState_ChargingStatus_ChargingStatus_MIN = BatteryState_ChargingStatus_ON;
constexpr BatteryState_ChargingStatus BatteryState_ChargingStatus_ChargingStatus_MAX = BatteryState_ChargingStatus_OFF;
constexpr int BatteryState_ChargingStatus_ChargingStatus_ARRAYSIZE = BatteryState_ChargingStatus_ChargingStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BatteryState_ChargingStatus_descriptor();
template<typename T>
inline const std::string& BatteryState_ChargingStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BatteryState_ChargingStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BatteryState_ChargingStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BatteryState_ChargingStatus_descriptor(), enum_t_value);
}
inline bool BatteryState_ChargingStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BatteryState_ChargingStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BatteryState_ChargingStatus>(
    BatteryState_ChargingStatus_descriptor(), name, value);
}
// ===================================================================

class BatteryState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dtproto.sensor_msgs.BatteryState) */ {
 public:
  inline BatteryState() : BatteryState(nullptr) {}
  ~BatteryState() override;
  explicit PROTOBUF_CONSTEXPR BatteryState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatteryState(const BatteryState& from);
  BatteryState(BatteryState&& from) noexcept
    : BatteryState() {
    *this = ::std::move(from);
  }

  inline BatteryState& operator=(const BatteryState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatteryState& operator=(BatteryState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatteryState& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatteryState* internal_default_instance() {
    return reinterpret_cast<const BatteryState*>(
               &_BatteryState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BatteryState& a, BatteryState& b) {
    a.Swap(&b);
  }
  inline void Swap(BatteryState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatteryState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BatteryState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BatteryState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatteryState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BatteryState& from) {
    BatteryState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatteryState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dtproto.sensor_msgs.BatteryState";
  }
  protected:
  explicit BatteryState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BatteryState_ChargingStatus ChargingStatus;
  static constexpr ChargingStatus ON =
    BatteryState_ChargingStatus_ON;
  static constexpr ChargingStatus OFF =
    BatteryState_ChargingStatus_OFF;
  static inline bool ChargingStatus_IsValid(int value) {
    return BatteryState_ChargingStatus_IsValid(value);
  }
  static constexpr ChargingStatus ChargingStatus_MIN =
    BatteryState_ChargingStatus_ChargingStatus_MIN;
  static constexpr ChargingStatus ChargingStatus_MAX =
    BatteryState_ChargingStatus_ChargingStatus_MAX;
  static constexpr int ChargingStatus_ARRAYSIZE =
    BatteryState_ChargingStatus_ChargingStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ChargingStatus_descriptor() {
    return BatteryState_ChargingStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& ChargingStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChargingStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChargingStatus_Name.");
    return BatteryState_ChargingStatus_Name(enum_t_value);
  }
  static inline bool ChargingStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChargingStatus* value) {
    return BatteryState_ChargingStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVoltageFieldNumber = 1,
    kTemperatureFieldNumber = 2,
    kCurrentFieldNumber = 3,
    kChargeFieldNumber = 4,
    kDesignCapacityFieldNumber = 5,
    kPercentageFieldNumber = 6,
    kChargingStatusFieldNumber = 7,
  };
  // float voltage = 1;
  void clear_voltage();
  float voltage() const;
  void set_voltage(float value);
  private:
  float _internal_voltage() const;
  void _internal_set_voltage(float value);
  public:

  // float temperature = 2;
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // float current = 3;
  void clear_current();
  float current() const;
  void set_current(float value);
  private:
  float _internal_current() const;
  void _internal_set_current(float value);
  public:

  // float charge = 4;
  void clear_charge();
  float charge() const;
  void set_charge(float value);
  private:
  float _internal_charge() const;
  void _internal_set_charge(float value);
  public:

  // float design_capacity = 5;
  void clear_design_capacity();
  float design_capacity() const;
  void set_design_capacity(float value);
  private:
  float _internal_design_capacity() const;
  void _internal_set_design_capacity(float value);
  public:

  // float percentage = 6;
  void clear_percentage();
  float percentage() const;
  void set_percentage(float value);
  private:
  float _internal_percentage() const;
  void _internal_set_percentage(float value);
  public:

  // .dtproto.sensor_msgs.BatteryState.ChargingStatus charging_status = 7;
  void clear_charging_status();
  ::dtproto::sensor_msgs::BatteryState_ChargingStatus charging_status() const;
  void set_charging_status(::dtproto::sensor_msgs::BatteryState_ChargingStatus value);
  private:
  ::dtproto::sensor_msgs::BatteryState_ChargingStatus _internal_charging_status() const;
  void _internal_set_charging_status(::dtproto::sensor_msgs::BatteryState_ChargingStatus value);
  public:

  // @@protoc_insertion_point(class_scope:dtproto.sensor_msgs.BatteryState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float voltage_;
    float temperature_;
    float current_;
    float charge_;
    float design_capacity_;
    float percentage_;
    int charging_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dtProto_2fsensor_5fmsgs_2fBatteryState_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BatteryState

// float voltage = 1;
inline void BatteryState::clear_voltage() {
  _impl_.voltage_ = 0;
}
inline float BatteryState::_internal_voltage() const {
  return _impl_.voltage_;
}
inline float BatteryState::voltage() const {
  // @@protoc_insertion_point(field_get:dtproto.sensor_msgs.BatteryState.voltage)
  return _internal_voltage();
}
inline void BatteryState::_internal_set_voltage(float value) {
  
  _impl_.voltage_ = value;
}
inline void BatteryState::set_voltage(float value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:dtproto.sensor_msgs.BatteryState.voltage)
}

// float temperature = 2;
inline void BatteryState::clear_temperature() {
  _impl_.temperature_ = 0;
}
inline float BatteryState::_internal_temperature() const {
  return _impl_.temperature_;
}
inline float BatteryState::temperature() const {
  // @@protoc_insertion_point(field_get:dtproto.sensor_msgs.BatteryState.temperature)
  return _internal_temperature();
}
inline void BatteryState::_internal_set_temperature(float value) {
  
  _impl_.temperature_ = value;
}
inline void BatteryState::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:dtproto.sensor_msgs.BatteryState.temperature)
}

// float current = 3;
inline void BatteryState::clear_current() {
  _impl_.current_ = 0;
}
inline float BatteryState::_internal_current() const {
  return _impl_.current_;
}
inline float BatteryState::current() const {
  // @@protoc_insertion_point(field_get:dtproto.sensor_msgs.BatteryState.current)
  return _internal_current();
}
inline void BatteryState::_internal_set_current(float value) {
  
  _impl_.current_ = value;
}
inline void BatteryState::set_current(float value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:dtproto.sensor_msgs.BatteryState.current)
}

// float charge = 4;
inline void BatteryState::clear_charge() {
  _impl_.charge_ = 0;
}
inline float BatteryState::_internal_charge() const {
  return _impl_.charge_;
}
inline float BatteryState::charge() const {
  // @@protoc_insertion_point(field_get:dtproto.sensor_msgs.BatteryState.charge)
  return _internal_charge();
}
inline void BatteryState::_internal_set_charge(float value) {
  
  _impl_.charge_ = value;
}
inline void BatteryState::set_charge(float value) {
  _internal_set_charge(value);
  // @@protoc_insertion_point(field_set:dtproto.sensor_msgs.BatteryState.charge)
}

// float design_capacity = 5;
inline void BatteryState::clear_design_capacity() {
  _impl_.design_capacity_ = 0;
}
inline float BatteryState::_internal_design_capacity() const {
  return _impl_.design_capacity_;
}
inline float BatteryState::design_capacity() const {
  // @@protoc_insertion_point(field_get:dtproto.sensor_msgs.BatteryState.design_capacity)
  return _internal_design_capacity();
}
inline void BatteryState::_internal_set_design_capacity(float value) {
  
  _impl_.design_capacity_ = value;
}
inline void BatteryState::set_design_capacity(float value) {
  _internal_set_design_capacity(value);
  // @@protoc_insertion_point(field_set:dtproto.sensor_msgs.BatteryState.design_capacity)
}

// float percentage = 6;
inline void BatteryState::clear_percentage() {
  _impl_.percentage_ = 0;
}
inline float BatteryState::_internal_percentage() const {
  return _impl_.percentage_;
}
inline float BatteryState::percentage() const {
  // @@protoc_insertion_point(field_get:dtproto.sensor_msgs.BatteryState.percentage)
  return _internal_percentage();
}
inline void BatteryState::_internal_set_percentage(float value) {
  
  _impl_.percentage_ = value;
}
inline void BatteryState::set_percentage(float value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:dtproto.sensor_msgs.BatteryState.percentage)
}

// .dtproto.sensor_msgs.BatteryState.ChargingStatus charging_status = 7;
inline void BatteryState::clear_charging_status() {
  _impl_.charging_status_ = 0;
}
inline ::dtproto::sensor_msgs::BatteryState_ChargingStatus BatteryState::_internal_charging_status() const {
  return static_cast< ::dtproto::sensor_msgs::BatteryState_ChargingStatus >(_impl_.charging_status_);
}
inline ::dtproto::sensor_msgs::BatteryState_ChargingStatus BatteryState::charging_status() const {
  // @@protoc_insertion_point(field_get:dtproto.sensor_msgs.BatteryState.charging_status)
  return _internal_charging_status();
}
inline void BatteryState::_internal_set_charging_status(::dtproto::sensor_msgs::BatteryState_ChargingStatus value) {
  
  _impl_.charging_status_ = value;
}
inline void BatteryState::set_charging_status(::dtproto::sensor_msgs::BatteryState_ChargingStatus value) {
  _internal_set_charging_status(value);
  // @@protoc_insertion_point(field_set:dtproto.sensor_msgs.BatteryState.charging_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sensor_msgs
}  // namespace dtproto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dtproto::sensor_msgs::BatteryState_ChargingStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dtproto::sensor_msgs::BatteryState_ChargingStatus>() {
  return ::dtproto::sensor_msgs::BatteryState_ChargingStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dtProto_2fsensor_5fmsgs_2fBatteryState_2eproto
